{" A palindromic number is a non-negative integer such that its decimal representation (without insignificant leading zeros) is a palindromic string.\n": [[["det", "number-3", "A-1"], ["amod", "number-3", "palindromic-2"], ["nsubj", "integer-7", "number-3"], ["cop", "integer-7", "is-4"], ["det", "integer-7", "a-5"], ["amod", "integer-7", "non-negative-6"], ["root", "ROOT-0", "integer-7"], ["advcl", "integer-7", "such-8"], ["mark", "string-22", "that-9"], ["nmod:poss", "representation-12", "its-10"], ["amod", "representation-12", "decimal-11"], ["nsubj", "string-22", "representation-12"], ["case", "zeros-17", "without-14"], ["amod", "zeros-17", "insignificant-15"], ["amod", "zeros-17", "leading-16"], ["nmod:without", "representation-12", "zeros-17"], ["cop", "string-22", "is-19"], ["det", "string-22", "a-20"], ["amod", "string-22", "palindromic-21"], ["ccomp", "integer-7", "string-22"]], [[]]], "The digit sum of an integer is the sum of its digits in decimal notation.": [[["det", "sum-3", "The-1"], ["amod", "sum-3", "digit-2"], ["nsubj", "sum-9", "sum-3"], ["det", "integer-6", "an-5"], ["prep_of", "sum-3", "integer-6"], ["cop", "sum-9", "is-7"], ["det", "sum-9", "the-8"], ["root", "ROOT-0", "sum-9"], ["poss", "digits-12", "its-11"], ["prep_of", "sum-9", "digits-12"], ["amod", "notation-15", "decimal-14"], ["prep_in", "digits-12", "notation-15"]], [[]]], " In other words, return the total amount of damage the attacking fairies will deal.\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "return-5", "words-3"], ["root", "ROOT-0", "return-5"], ["det", "amount-8", "the-6"], ["amod", "amount-8", "total-7"], ["dobj", "return-5", "amount-8"], ["case", "damage-10", "of-9"], ["nmod:of", "amount-8", "damage-10"], ["det", "fairies-13", "the-11"], ["amod", "fairies-13", "attacking-12"], ["nsubj", "deal-15", "fairies-13"], ["aux", "deal-15", "will-14"], ["acl:relcl", "amount-8", "deal-15"]], [[]]], " mapping = lambda possibility: eval(input_array[:possibility]+'+'+input_array[possibility:])\n": [[["compound", "possibility-4", "mapping-1"], ["nummod", "possibility-4", "=-2"], ["compound", "possibility-4", "lambda-3"], ["root", "ROOT-0", "possibility-4"], ["dep", "possibility-4", "eval-6"], ["amod", "-LSB--9", "input_array-8"], ["dep", "eval-6", "-LSB--9"], ["dep", "-LSB--9", "possibility-11"], ["compound", "+-15", "-RSB--12"], ["compound", "+-15", "+-13"], ["nmod:poss", ":]-21", "+-15"], ["case", "+-15", "'-16"], ["nummod", ":]-21", "+-17"], ["advmod", "-LSB--19", "input_array-18"], ["amod", ":]-21", "-LSB--19"], ["compound", ":]-21", "possibility-20"], ["dep", "possibility-11", ":]-21"]], [[]]], " You are given a int[] input_array which contains exactly one element that is equal to -1, you must replace this element with a positive number in a way that the sequence becomes a TriFibonacci sequence.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["ccomp", "replace-22", "given-3"], ["det", "int-5", "a-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array-8", "-LSB--6"], ["amod", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"], ["nsubj", "contains-10", "input_array-8"], ["ref", "input_array-8", "which-9"], ["acl:relcl", "input_array-8", "contains-10"], ["advmod", "element-13", "exactly-11"], ["nummod", "element-13", "one-12"], ["dobj", "contains-10", "element-13"], ["nsubj", "equal-16", "element-13"], ["ref", "element-13", "that-14"], ["cop", "equal-16", "is-15"], ["acl:relcl", "element-13", "equal-16"], ["case", "-1-18", "to-17"], ["nmod:to", "equal-16", "-1-18"], ["nsubj", "replace-22", "you-20"], ["aux", "replace-22", "must-21"], ["root", "ROOT-0", "replace-22"], ["det", "element-24", "this-23"], ["dobj", "replace-22", "element-24"], ["case", "number-28", "with-25"], ["det", "number-28", "a-26"], ["amod", "number-28", "positive-27"], ["nmod:with", "replace-22", "number-28"], ["case", "way-31", "in-29"], ["det", "way-31", "a-30"], ["nmod:in", "number-28", "way-31"], ["mark", "becomes-35", "that-32"], ["det", "sequence-34", "the-33"], ["nsubj", "becomes-35", "sequence-34"], ["ccomp", "replace-22", "becomes-35"], ["det", "sequence-38", "a-36"], ["compound", "sequence-38", "TriFibonacci-37"], ["xcomp", "becomes-35", "sequence-38"]], [[]]], " The new String must again describe a valid positive integer, i.e., it must not have any leading zeros.\n": [[["det", "String-3", "The-1"], ["amod", "String-3", "new-2"], ["nsubj", "describe-6", "String-3"], ["aux", "describe-6", "must-4"], ["advmod", "describe-6", "again-5"], ["ccomp", "have-17", "describe-6"], ["det", "integer-10", "a-7"], ["amod", "integer-10", "valid-8"], ["amod", "integer-10", "positive-9"], ["dobj", "describe-6", "integer-10"], ["advmod", "describe-6", "i.e.-12"], ["nsubj", "have-17", "it-14"], ["aux", "have-17", "must-15"], ["neg", "have-17", "not-16"], ["root", "ROOT-0", "have-17"], ["det", "zeros-20", "any-18"], ["amod", "zeros-20", "leading-19"], ["dobj", "have-17", "zeros-20"]], [[]]], " Return the ambiguity number of the given tournament.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "ambiguity-3"], ["dobj", "Return-1", "number-4"], ["case", "tournament-8", "of-5"], ["det", "tournament-8", "the-6"], ["amod", "tournament-8", "given-7"], ["nmod:of", "number-4", "tournament-8"]], [[]]], " Said character will always be between 'A' and 'Z', inclusive, where 'A' means the best possible and 'Z' the worst possible candidate.\n": [[["compound", "character-2", "Said-1"], ["nsubj", "A-8", "character-2"], ["aux", "A-8", "will-3"], ["advmod", "A-8", "always-4"], ["cop", "A-8", "be-5"], ["case", "A-8", "between-6"], ["root", "ROOT-0", "A-8"], ["cc", "A-8", "and-10"], ["conj:and", "A-8", "Z-12"], ["advmod", "A-8", "inclusive-15"], ["advmod", "means-21", "where-17"], ["nsubj", "means-21", "A-19"], ["advcl", "A-8", "means-21"], ["det", "Z-27", "the-22"], ["amod", "Z-27", "best-23"], ["amod", "Z-27", "possible-24"], ["cc", "possible-24", "and-25"], ["dobj", "means-21", "Z-27"], ["det", "candidate-32", "the-29"], ["dep", "possible-31", "worst-30"], ["amod", "candidate-32", "possible-31"], ["dep", "Z-27", "candidate-32"]], [[]]], "Formally, Ciel thinks that a number X is interesting if the following property is satisfied: For each D between 0 and 9, inclusive, X either does not contain the digit D at all, or it contains exactly two digits D, and there are precisely D other digits between them.": [[["advmod", "thinks-4", "Formally-1"], ["nsubj", "thinks-4", "Ciel-3"], ["root", "ROOT-0", "thinks-4"], ["mark", "interesting-10", "that-5"], ["det", "X-8", "a-6"], ["nn", "X-8", "number-7"], ["nsubj", "interesting-10", "X-8"], ["cop", "interesting-10", "is-9"], ["ccomp", "thinks-4", "interesting-10"], ["mark", "satisfied-16", "if-11"], ["det", "property-14", "the-12"], ["amod", "property-14", "following-13"], ["nsubj", "satisfied-16", "property-14"], ["cop", "satisfied-16", "is-15"], ["advcl", "interesting-10", "satisfied-16"], ["det", "D-20", "each-19"], ["prep_for", "contain-32", "D-20"], ["prep_between", "D-20", "0-22"], ["prep_between", "D-20", "9-24"], ["conj_and", "0-22", "9-24"], ["advmod", "contain-32", "inclusive-26"], ["nsubj", "contain-32", "X-28"], ["advmod", "contain-32", "either-29"], ["aux", "contain-32", "does-30"], ["neg", "contain-32", "not-31"], ["parataxis", "thinks-4", "contain-32"], ["det", "D-35", "the-33"], ["amod", "D-35", "digit-34"], ["dobj", "contain-32", "D-35"], ["advmod", "contain-32", "at-36"], ["pobj", "at-36", "all-37"], ["nsubj", "contains-41", "it-40"], ["parataxis", "thinks-4", "contains-41"], ["conj_or", "contain-32", "contains-41"], ["advmod", "contains-41", "exactly-42"], ["num", "digits-44", "two-43"], ["pobj", "exactly-42", "digits-44"], ["dobj", "contains-41", "D-45"], ["expl", "are-49", "there-48"], ["conj_or", "contain-32", "are-49"], ["conj_and", "contains-41", "are-49"], ["advmod", "are-49", "precisely-50"], ["nn", "digits-53", "D-51"], ["amod", "digits-53", "other-52"], ["nsubj", "are-49", "digits-53"], ["prep_between", "digits-53", "them-55"]], [[]]], " The distance between input_array1 and input_array2 is defined as the sum of the differences between each letter in input_array1 and the letter in input_array2 at the same position.\n": [[["det", "distance-2", "The-1"], ["nsubjpass", "defined-8", "distance-2"], ["case", "input_array1-4", "between-3"], ["nmod:between", "distance-2", "input_array1-4"], ["cc", "input_array1-4", "and-5"], ["nmod:between", "distance-2", "input_array2-6"], ["conj:and", "input_array1-4", "input_array2-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["case", "sum-11", "as-9"], ["det", "sum-11", "the-10"], ["nmod:as", "defined-8", "sum-11"], ["case", "differences-14", "of-12"], ["det", "differences-14", "the-13"], ["nmod:of", "sum-11", "differences-14"], ["case", "letter-17", "between-15"], ["det", "letter-17", "each-16"], ["nmod:between", "differences-14", "letter-17"], ["case", "input_array1-19", "in-18"], ["nmod:in", "letter-17", "input_array1-19"], ["cc", "letter-17", "and-20"], ["det", "letter-22", "the-21"], ["nmod:between", "differences-14", "letter-22"], ["conj:and", "letter-17", "letter-22"], ["case", "input_array2-24", "in-23"], ["nmod:in", "letter-22", "input_array2-24"], ["case", "position-28", "at-25"], ["det", "position-28", "the-26"], ["amod", "position-28", "same-27"], ["nmod:at", "defined-8", "position-28"]], [[]]], "You are given a int[] input_array which contains exactly one element that is equal to -1, you must replace this element with a positive number in a way that the sequence becomes a TriFibonacci sequence.": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["ccomp", "replace-22", "given-3"], ["det", "int-5", "a-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array-8", "-LSB--6"], ["amod", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"], ["nsubj", "contains-10", "input_array-8"], ["rcmod", "input_array-8", "contains-10"], ["advmod", "element-13", "exactly-11"], ["num", "element-13", "one-12"], ["dobj", "contains-10", "element-13"], ["nsubj", "equal-16", "element-13"], ["cop", "equal-16", "is-15"], ["rcmod", "element-13", "equal-16"], ["prep_to", "equal-16", "-1-18"], ["nsubj", "replace-22", "you-20"], ["aux", "replace-22", "must-21"], ["root", "ROOT-0", "replace-22"], ["det", "element-24", "this-23"], ["dobj", "replace-22", "element-24"], ["det", "number-28", "a-26"], ["amod", "number-28", "positive-27"], ["prep_with", "replace-22", "number-28"], ["det", "way-31", "a-30"], ["prep_in", "number-28", "way-31"], ["mark", "becomes-35", "that-32"], ["det", "sequence-34", "the-33"], ["nsubj", "becomes-35", "sequence-34"], ["ccomp", "replace-22", "becomes-35"], ["det", "sequence-38", "a-36"], ["nn", "sequence-38", "TriFibonacci-37"], ["xcomp", "becomes-35", "sequence-38"]], [[]]], " For example, the distance between \"abcd\" and \"bcda\" is 6 (1 + 1 + 1 + 3)\n": [[["case", "example-2", "For-1"], ["nmod:for", "6-15", "example-2"], ["det", "distance-5", "the-4"], ["nsubj", "6-15", "distance-5"], ["case", "abcd-8", "between-6"], ["nmod:between", "distance-5", "abcd-8"], ["cc", "abcd-8", "and-10"], ["nmod:between", "distance-5", "bcda-12"], ["conj:and", "abcd-8", "bcda-12"], ["cop", "6-15", "is-14"], ["root", "ROOT-0", "6-15"], ["nummod", "+-18", "1-17"], ["dep", "6-15", "+-18"], ["nummod", "+-22", "1-19"], ["amod", "+-22", "+-20"], ["nummod", "+-22", "1-21"], ["dep", "+-18", "+-22"], ["dep", "+-22", "3-23"]], [[]]], " You are given Strings input_array0 and input_array1 .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["compound", "input_array0-5", "Strings-4"], ["dobj", "given-3", "input_array0-5"], ["cc", "input_array0-5", "and-6"], ["dobj", "given-3", "input_array1-7"], ["conj:and", "input_array0-5", "input_array1-7"]], [[]]], " You are given two int[]s, each of length N: input_array1 and input_array2.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["nummod", "int-5", "two-4"], ["compound", "s-8", "int-5"], ["compound", "s-8", "-LSB--6"], ["compound", "s-8", "-RSB--7"], ["dobj", "given-3", "s-8"], ["dobj", "given-3", "each-10"], ["case", "N-13", "of-11"], ["compound", "N-13", "length-12"], ["nmod:of", "each-10", "N-13"], ["amod", "N-13", "input_array1-15"], ["cc", "input_array1-15", "and-16"], ["amod", "N-13", "input_array2-17"], ["conj:and", "input_array1-15", "input_array2-17"]], [[]]], " You are also given an int input_int.\n": [[["nsubjpass", "given-4", "You-1"], ["auxpass", "given-4", "are-2"], ["advmod", "given-4", "also-3"], ["root", "ROOT-0", "given-4"], ["det", "input_int-7", "an-5"], ["compound", "input_int-7", "int-6"], ["dobj", "given-4", "input_int-7"]], [[]]], " For example, \"aaaaa\" and \"xxxxxxxxx\" are valid messages.\n": [[["case", "example-2", "For-1"], ["nmod:for", "messages-13", "example-2"], ["nsubj", "messages-13", "aaaaa-5"], ["cc", "aaaaa-5", "and-7"], ["conj:and", "aaaaa-5", "xxxxxxxxx-9"], ["nsubj", "messages-13", "xxxxxxxxx-9"], ["cop", "messages-13", "are-11"], ["amod", "messages-13", "valid-12"], ["root", "ROOT-0", "messages-13"]], [[]]], " Even though 24 can be written as 6*2*2, that does not make it a semi-square.)\n": [[["advmod", "written-6", "Even-1"], ["mark", "written-6", "though-2"], ["nsubjpass", "written-6", "24-3"], ["aux", "written-6", "can-4"], ["auxpass", "written-6", "be-5"], ["advcl", "make-17", "written-6"], ["case", "6-8", "as-7"], ["nmod:as", "written-6", "6-8"], ["xcomp", "written-6", "*-9"], ["dobj", "*-9", "2-10"], ["dep", "2-12", "*-11"], ["dep", "*-9", "2-12"], ["nsubj", "make-17", "that-14"], ["aux", "make-17", "does-15"], ["neg", "make-17", "not-16"], ["root", "ROOT-0", "make-17"], ["nsubj", "semi-square-20", "it-18"], ["det", "semi-square-20", "a-19"], ["xcomp", "make-17", "semi-square-20"]], [[]]], "After she raises the barn, Applejack will build a wall that will divide the barn into two separate parts: one containing the first k sections and the other containing the last N-k sections, for some integer k. Each part must contain at least one section.": [[["mark", "raises-3", "After-1"], ["nsubj", "raises-3", "she-2"], ["advcl", "build-9", "raises-3"], ["det", "barn-5", "the-4"], ["dobj", "raises-3", "barn-5"], ["nsubj", "build-9", "Applejack-7"], ["aux", "build-9", "will-8"], ["root", "ROOT-0", "build-9"], ["det", "wall-11", "a-10"], ["dobj", "build-9", "wall-11"], ["nsubj", "divide-14", "wall-11"], ["aux", "divide-14", "will-13"], ["rcmod", "wall-11", "divide-14"], ["det", "barn-16", "the-15"], ["dobj", "divide-14", "barn-16"], ["num", "parts-20", "two-18"], ["amod", "parts-20", "separate-19"], ["prep_into", "divide-14", "parts-20"], ["dobj", "build-9", "one-22"], ["conj_and", "wall-11", "one-22"], ["nsubj", "divide-14", "one-22"], ["vmod", "one-22", "containing-23"], ["det", "sections-27", "the-24"], ["amod", "sections-27", "first-25"], ["nn", "sections-27", "k-26"], ["dobj", "containing-23", "sections-27"], ["det", "other-30", "the-29"], ["dobj", "build-9", "other-30"], ["conj_and", "wall-11", "other-30"], ["nsubj", "divide-14", "other-30"], ["vmod", "other-30", "containing-31"], ["det", "sections-35", "the-32"], ["amod", "sections-35", "last-33"], ["num", "sections-35", "N-k-34"], ["dobj", "containing-31", "sections-35"], ["det", "k.-40", "some-38"], ["nn", "k.-40", "integer-39"], ["prep_for", "sections-35", "k.-40"], ["det", "part-42", "Each-41"], ["nsubj", "contain-44", "part-42"], ["aux", "contain-44", "must-43"], ["rcmod", "k.-40", "contain-44"], ["quantmod", "one-47", "at-45"], ["mwe", "at-45", "least-46"], ["pobj", "at-45", "least-46"], ["num", "section-48", "one-47"], ["dobj", "contain-44", "section-48"]], [[]]], " You are given the int[] input_array.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "the-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array-8", "-LSB--6"], ["amod", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"]], [[]]], "For each i, input_array1[i] is the damage per second of fairy i, and input_array2[i] is her initial amount of hit points.": [[["det", "i-3", "each-2"], ["prep_for", "damage-11", "i-3"], ["amod", "-RSB--8", "input_array1-5"], ["nn", "-RSB--8", "-LSB--6"], ["nn", "-RSB--8", "i-7"], ["nsubj", "damage-11", "-RSB--8"], ["cop", "damage-11", "is-9"], ["det", "damage-11", "the-10"], ["root", "ROOT-0", "damage-11"], ["prep_per", "damage-11", "second-13"], ["nn", "i-16", "fairy-15"], ["prep_of", "second-13", "i-16"], ["amod", "-RSB--22", "input_array2-19"], ["nn", "-RSB--22", "-LSB--20"], ["nn", "-RSB--22", "i-21"], ["nsubj", "amount-26", "-RSB--22"], ["cop", "amount-26", "is-23"], ["poss", "amount-26", "her-24"], ["amod", "amount-26", "initial-25"], ["conj_and", "damage-11", "amount-26"], ["nn", "points-29", "hit-28"], ["prep_of", "amount-26", "points-29"]], [[]]], " You are a wizard.\n": [[["nsubj", "wizard-4", "You-1"], ["cop", "wizard-4", "are-2"], ["det", "wizard-4", "a-3"], ["root", "ROOT-0", "wizard-4"]], [[]]], " We assume that your number of hit points is sufficiently large to avoid defeat when fighting the fairies.\n": [[["nsubj", "assume-2", "We-1"], ["root", "ROOT-0", "assume-2"], ["mark", "large-11", "that-3"], ["nmod:poss", "number-5", "your-4"], ["nsubj", "large-11", "number-5"], ["nsubj", "avoid-13", "number-5"], ["case", "points-8", "of-6"], ["compound", "points-8", "hit-7"], ["nmod:of", "number-5", "points-8"], ["cop", "large-11", "is-9"], ["advmod", "large-11", "sufficiently-10"], ["ccomp", "assume-2", "large-11"], ["mark", "avoid-13", "to-12"], ["xcomp", "large-11", "avoid-13"], ["dobj", "avoid-13", "defeat-14"], ["advmod", "fighting-16", "when-15"], ["advcl", "large-11", "fighting-16"], ["det", "fairies-18", "the-17"], ["dobj", "fighting-16", "fairies-18"]], [[]]], " It's winter time!\n": [[["nsubj", "time-4", "It-1"], ["cop", "time-4", "'s-2"], ["compound", "time-4", "winter-3"], ["root", "ROOT-0", "time-4"]], [[]]], " You are given a int[] input_array2 with N elements.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "a-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array2-8", "-LSB--6"], ["amod", "input_array2-8", "-RSB--7"], ["dobj", "given-3", "input_array2-8"], ["case", "elements-11", "with-9"], ["compound", "elements-11", "N-10"], ["nmod:with", "input_array2-8", "elements-11"]], [[]]], " You can insert input_array1 in 4 different places: Before the first letter of input_array0 .\n": [[["nsubj", "insert-3", "You-1"], ["aux", "insert-3", "can-2"], ["root", "ROOT-0", "insert-3"], ["dobj", "insert-3", "input_array1-4"], ["case", "places-8", "in-5"], ["nummod", "places-8", "4-6"], ["amod", "places-8", "different-7"], ["nmod:in", "insert-3", "places-8"], ["case", "letter-13", "Before-10"], ["det", "letter-13", "the-11"], ["amod", "letter-13", "first-12"], ["dep", "insert-3", "letter-13"], ["case", "input_array0-15", "of-14"], ["nmod:of", "letter-13", "input_array0-15"]], [[]]], " You are also given an int input_int .\n": [[["nsubjpass", "given-4", "You-1"], ["auxpass", "given-4", "are-2"], ["advmod", "given-4", "also-3"], ["root", "ROOT-0", "given-4"], ["det", "input_int-7", "an-5"], ["compound", "input_int-7", "int-6"], ["dobj", "given-4", "input_int-7"]], [[]]], " For example, if Bob sees the string \"1289\", Alice's expression is either \"128+9\" or \"12+89\" or \"1+289\".\n": [[["case", "example-2", "For-1"], ["nmod:for", "+9-20", "example-2"], ["mark", "sees-6", "if-4"], ["nsubj", "sees-6", "Bob-5"], ["advcl", "+9-20", "sees-6"], ["det", "string-8", "the-7"], ["dobj", "sees-6", "string-8"], ["dep", "string-8", "1289-10"], ["nmod:poss", "expression-15", "Alice-13"], ["case", "Alice-13", "'s-14"], ["nsubj", "+9-20", "expression-15"], ["cop", "+9-20", "is-16"], ["case", "+9-20", "either-17"], ["nummod", "+9-20", "128-19"], ["root", "ROOT-0", "+9-20"], ["cc", "+9-20", "or-22"], ["nummod", "+89-25", "12-24"], ["conj:or", "+9-20", "+89-25"], ["cc", "+9-20", "or-27"], ["nummod", "+289-30", "1-29"], ["conj:or", "+9-20", "+289-30"]], [[]]], " Little Arthur loves numbers, especially palindromic ones.\n": [[["compound", "Arthur-2", "Little-1"], ["nsubj", "loves-3", "Arthur-2"], ["root", "ROOT-0", "loves-3"], ["dobj", "loves-3", "numbers-4"], ["advmod", "palindromic-7", "especially-6"], ["amod", "ones-8", "palindromic-7"], ["appos", "numbers-4", "ones-8"]], [[]]], " Later, Snuke gave you the string input_array1 .\n": [[["advmod", "gave-4", "Later-1"], ["nsubj", "gave-4", "Snuke-3"], ["root", "ROOT-0", "gave-4"], ["iobj", "gave-4", "you-5"], ["det", "input_array1-8", "the-6"], ["compound", "input_array1-8", "string-7"], ["dobj", "gave-4", "input_array1-8"]], [[]]], " We have some baskets containing input_array, and we would like to perform the following procedure in a way that maximizes the number of remaining input_array.\n": [[["nsubj", "have-2", "We-1"], ["root", "ROOT-0", "have-2"], ["det", "baskets-4", "some-3"], ["dobj", "have-2", "baskets-4"], ["acl", "baskets-4", "containing-5"], ["advmod", "containing-5", "input_array-6"], ["cc", "have-2", "and-8"], ["nsubj", "like-11", "we-9"], ["nsubj", "perform-13", "we-9"], ["aux", "like-11", "would-10"], ["conj:and", "have-2", "like-11"], ["mark", "perform-13", "to-12"], ["xcomp", "like-11", "perform-13"], ["det", "procedure-16", "the-14"], ["amod", "procedure-16", "following-15"], ["dobj", "perform-13", "procedure-16"], ["case", "way-19", "in-17"], ["det", "way-19", "a-18"], ["nmod:in", "perform-13", "way-19"], ["nsubj", "maximizes-21", "way-19"], ["ref", "way-19", "that-20"], ["acl:relcl", "way-19", "maximizes-21"], ["det", "number-23", "the-22"], ["dobj", "maximizes-21", "number-23"], ["case", "input_array-26", "of-24"], ["amod", "input_array-26", "remaining-25"], ["nmod:of", "number-23", "input_array-26"]], [[]]], " The remaining elements are calculated using the following recurrence: input_array[i] = input_array[i-1] + input_array[i-2] + input_array[i-3]\n": [[["det", "elements-3", "The-1"], ["amod", "elements-3", "remaining-2"], ["nsubjpass", "calculated-5", "elements-3"], ["auxpass", "calculated-5", "are-4"], ["dep", "-RSB--14", "calculated-5"], ["xcomp", "calculated-5", "using-6"], ["det", "recurrence-9", "the-7"], ["amod", "recurrence-9", "following-8"], ["dobj", "using-6", "recurrence-9"], ["advmod", "-LSB--12", "input_array-11"], ["parataxis", "using-6", "-LSB--12"], ["dobj", "-LSB--12", "i-13"], ["root", "ROOT-0", "-RSB--14"], ["dep", "-RSB--19", "=-15"], ["amod", "-RSB--19", "input_array-16"], ["amod", "-RSB--19", "-LSB--17"], ["amod", "-RSB--19", "i-1-18"], ["ccomp", "-RSB--14", "-RSB--19"], ["nummod", "-RSB--29", "+-20"], ["amod", "-RSB--29", "input_array-21"], ["amod", "-RSB--29", "-LSB--22"], ["amod", "-RSB--29", "i-2-23"], ["amod", "-RSB--29", "-RSB--24"], ["amod", "-RSB--29", "+-25"], ["amod", "-RSB--29", "input_array-26"], ["amod", "-RSB--29", "-LSB--27"], ["amod", "-RSB--29", "i-3-28"], ["nsubj", "-RSB--14", "-RSB--29"]], [[]]], " (I.e., k must be between 1 and N-1, inclusive.)\n": [[["compound", "k-4", "I.e.-2"], ["nsubj", "1-8", "k-4"], ["aux", "1-8", "must-5"], ["cop", "1-8", "be-6"], ["amod", "1-8", "between-7"], ["root", "ROOT-0", "1-8"], ["cc", "1-8", "and-9"], ["conj:and", "1-8", "N-1-10"], ["advmod", "1-8", "inclusive-12"]], [[]]], " valid = lambda possibility: all(input_array[possibility] > input_array[element] for element in possibilities if abs(possibility-element) == 1)\n": [[["amod", "possibility-4", "valid-1"], ["amod", "possibility-4", "=-2"], ["compound", "possibility-4", "lambda-3"], ["root", "ROOT-0", "possibility-4"], ["dep", "possibility-4", "all-6"], ["advmod", "-LSB--9", "input_array-8"], ["amod", "-RSB--16", "-LSB--9"], ["compound", "-RSB--16", "possibility-10"], ["amod", "-RSB--16", "-RSB--11"], ["nummod", "-RSB--16", ">-12"], ["advmod", "-LSB--14", "input_array-13"], ["amod", "-RSB--16", "-LSB--14"], ["compound", "-RSB--16", "element-15"], ["dep", "all-6", "-RSB--16"], ["case", "element-18", "for-17"], ["nmod:for", "-RSB--16", "element-18"], ["case", "possibilities-20", "in-19"], ["nmod:in", "element-18", "possibilities-20"], ["mark", "==-26", "if-21"], ["nsubj", "==-26", "abs-22"], ["appos", "abs-22", "possibility-element-24"], ["dep", "-RSB--16", "==-26"], ["dobj", "==-26", "1-27"]], [[]]], " The first prime numbers are 2, 3, 5, 7, 11, 13, 17, ...\n": [[["det", "numbers-4", "The-1"], ["amod", "numbers-4", "first-2"], ["amod", "numbers-4", "prime-3"], ["nsubj", "2-6", "numbers-4"], ["cop", "2-6", "are-5"], ["root", "ROOT-0", "2-6"], ["amod", "2-6", "3-8"], ["amod", "2-6", "5-10"], ["amod", "2-6", "7-12"], ["amod", "2-6", "11-14"], ["appos", "2-6", "13-16"], ["amod", "13-16", "17-18"]], [[]]], " Little Romeo likes cosmic amoebas a lot.\n": [[["compound", "Romeo-2", "Little-1"], ["nsubj", "likes-3", "Romeo-2"], ["root", "ROOT-0", "likes-3"], ["amod", "amoebas-5", "cosmic-4"], ["dobj", "likes-3", "amoebas-5"], ["det", "lot-7", "a-6"], ["dep", "amoebas-5", "lot-7"]], [[]]], " We will denote the value assigned to the letter X by val[X].\n": [[["nsubj", "denote-3", "We-1"], ["aux", "denote-3", "will-2"], ["root", "ROOT-0", "denote-3"], ["det", "value-5", "the-4"], ["dobj", "denote-3", "value-5"], ["acl", "value-5", "assigned-6"], ["case", "X-10", "to-7"], ["det", "X-10", "the-8"], ["compound", "X-10", "letter-9"], ["nmod:to", "assigned-6", "X-10"], ["case", "-RSB--15", "by-11"], ["compound", "-RSB--15", "val-12"], ["compound", "-RSB--15", "-LSB--13"], ["compound", "-RSB--15", "X-14"], ["nmod:by", "assigned-6", "-RSB--15"]], [[]]], " Each color is defined by three integer components: R, G, and B (meaning red, green, and blue, respectively), where 0 <= R < input_int0 , 0 <= G < input_int1 , and 0 <= B < input_int2 .\n": [[["det", "color-2", "Each-1"], ["nsubjpass", "defined-4", "color-2"], ["auxpass", "defined-4", "is-3"], ["root", "ROOT-0", "defined-4"], ["case", "components-8", "by-5"], ["nummod", "components-8", "three-6"], ["compound", "components-8", "integer-7"], ["nmod:by", "defined-4", "components-8"], ["nmod:by", "defined-4", "R-10"], ["conj:and", "components-8", "R-10"], ["nmod:by", "defined-4", "G-12"], ["conj:and", "components-8", "G-12"], ["cc", "components-8", "and-14"], ["nmod:by", "defined-4", "B-15"], ["conj:and", "components-8", "B-15"], ["dep", "B-15", "meaning-17"], ["dobj", "meaning-17", "red-18"], ["amod", "red-18", "green-20"], ["cc", "green-20", "and-22"], ["amod", "red-18", "blue-23"], ["conj:and", "green-20", "blue-23"], ["advmod", "meaning-17", "respectively-25"], ["advmod", "input_int2-49", "where-28"], ["nsubj", "input_int2-49", "0-29"], ["acl", "0-29", "<-30"], ["dep", "input_int0-34", "=-31"], ["compound", "input_int0-34", "R-32"], ["compound", "input_int0-34", "<-33"], ["ccomp", "<-30", "input_int0-34"], ["conj:and", "0-29", "0-36"], ["nsubj", "input_int2-49", "0-36"], ["acl", "0-36", "<-37"], ["dep", "input_int1-41", "=-38"], ["compound", "input_int1-41", "G-39"], ["compound", "input_int1-41", "<-40"], ["ccomp", "<-37", "input_int1-41"], ["cc", "0-29", "and-43"], ["nummod", "<-45", "0-44"], ["conj:and", "0-29", "<-45"], ["nsubj", "input_int2-49", "<-45"], ["dep", "input_int2-49", "=-46"], ["compound", "input_int2-49", "B-47"], ["compound", "input_int2-49", "<-48"], ["acl:relcl", "components-8", "input_int2-49"]], [[]]], "Additionally, Applejack wants both parts to contain exactly the same number of cows.": [[["advmod", "wants-4", "Additionally-1"], ["nsubj", "wants-4", "Applejack-3"], ["root", "ROOT-0", "wants-4"], ["det", "parts-6", "both-5"], ["dobj", "wants-4", "parts-6"], ["nsubj", "contain-8", "parts-6"], ["aux", "contain-8", "to-7"], ["xcomp", "wants-4", "contain-8"], ["advmod", "number-12", "exactly-9"], ["det", "number-12", "the-10"], ["amod", "number-12", "same-11"], ["dobj", "contain-8", "number-12"], ["prep_of", "number-12", "cows-14"]], [[]]], " valid = lambda possibility: mapping(possibility) == min(mapping(possibility) for possibility in possibilities)\n": [[["amod", "possibility-4", "valid-1"], ["amod", "possibility-4", "=-2"], ["compound", "possibility-4", "lambda-3"], ["root", "ROOT-0", "possibility-4"], ["dep", "possibility-4", "mapping-6"], ["appos", "min-11", "possibility-8"], ["amod", "min-11", "==-10"], ["dobj", "mapping-6", "min-11"], ["dep", "min-11", "mapping-13"], ["appos", "mapping-13", "possibility-15"], ["case", "possibility-18", "for-17"], ["nmod:for", "mapping-13", "possibility-18"], ["case", "possibilities-20", "in-19"], ["nmod:in", "possibility-18", "possibilities-20"]], [[]]], " Each match resulted in one of three outcomes: the first player won, the second player won, or there was a draw.\n": [[["det", "match-2", "Each-1"], ["nsubj", "resulted-3", "match-2"], ["root", "ROOT-0", "resulted-3"], ["case", "one-5", "in-4"], ["nmod:in", "resulted-3", "one-5"], ["case", "outcomes-8", "of-6"], ["nummod", "outcomes-8", "three-7"], ["nmod:of", "one-5", "outcomes-8"], ["det", "player-12", "the-10"], ["amod", "player-12", "first-11"], ["nsubj", "won-13", "player-12"], ["conj:or", "resulted-3", "won-13"], ["det", "player-17", "the-15"], ["amod", "player-17", "second-16"], ["nsubj", "won-18", "player-17"], ["ccomp", "resulted-3", "won-18"], ["cc", "resulted-3", "or-20"], ["expl", "was-22", "there-21"], ["conj:or", "resulted-3", "was-22"], ["det", "draw-24", "a-23"], ["nsubj", "was-22", "draw-24"]], [[]]], " Additionally, Applejack wants both parts to contain exactly the same number of cows.\n": [[["advmod", "wants-4", "Additionally-1"], ["nsubj", "wants-4", "Applejack-3"], ["root", "ROOT-0", "wants-4"], ["det", "parts-6", "both-5"], ["dobj", "wants-4", "parts-6"], ["nsubj", "contain-8", "parts-6"], ["mark", "contain-8", "to-7"], ["xcomp", "wants-4", "contain-8"], ["advmod", "number-12", "exactly-9"], ["det", "number-12", "the-10"], ["amod", "number-12", "same-11"], ["dobj", "contain-8", "number-12"], ["case", "cows-14", "of-13"], ["nmod:of", "number-12", "cows-14"]], [[]]], " No two bins contained the same number of balls.\n": [[["neg", "bins-3", "No-1"], ["nummod", "bins-3", "two-2"], ["nsubj", "contained-4", "bins-3"], ["root", "ROOT-0", "contained-4"], ["det", "number-7", "the-5"], ["amod", "number-7", "same-6"], ["dobj", "contained-4", "number-7"], ["case", "balls-9", "of-8"], ["nmod:of", "number-7", "balls-9"]], [[]]], " That is, in each step you can change your current number X either to X+1 or to X-1.\n": [[["discourse", "change-9", "That-1"], ["mwe", "That-1", "is-2"], ["case", "step-6", "in-4"], ["det", "step-6", "each-5"], ["nmod:in", "change-9", "step-6"], ["nsubj", "change-9", "you-7"], ["nsubj", "change-9", "you-7"], ["aux", "change-9", "can-8"], ["root", "ROOT-0", "change-9"], ["conj:or", "change-9", "change-9"], ["nmod:poss", "X-13", "your-10"], ["amod", "X-13", "current-11"], ["compound", "X-13", "number-12"], ["dobj", "change-9", "X-13"], ["cc:preconj", "X-16", "either-14"], ["case", "X-16", "to-15"], ["nmod:to", "change-9", "X-16"], ["nummod", "X-16", "+1-17"], ["cc", "change-9", "or-18"], ["case", "X-1-20", "to-19"], ["nmod:to", "change-9", "X-1-20"]], [[]]], "In one turn Little Elephant can remove either the first ball in the row, or the last one.": [[["num", "turn-3", "one-2"], ["prep_in", "remove-7", "turn-3"], ["nn", "Elephant-5", "Little-4"], ["nsubj", "remove-7", "Elephant-5"], ["aux", "remove-7", "can-6"], ["root", "ROOT-0", "remove-7"], ["advmod", "ball-11", "either-8"], ["det", "ball-11", "the-9"], ["amod", "ball-11", "first-10"], ["dobj", "remove-7", "ball-11"], ["det", "row-14", "the-13"], ["prep_in", "remove-7", "row-14"], ["det", "one-19", "the-17"], ["amod", "one-19", "last-18"], ["prep_in", "remove-7", "one-19"], ["conj_or", "row-14", "one-19"]], [[]]], " Note that the string f(input_array0) still has a beginning.\n": [[["root", "ROOT-0", "Note-1"], ["mark", "has-10", "that-2"], ["det", "f-5", "the-3"], ["compound", "f-5", "string-4"], ["nsubj", "has-10", "f-5"], ["appos", "f-5", "input_array0-7"], ["advmod", "has-10", "still-9"], ["ccomp", "Note-1", "has-10"], ["det", "beginning-12", "a-11"], ["dobj", "has-10", "beginning-12"]], [[]]], " You are given a String[] input_array that represents a square input_array.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "input_array-8", "a-4"], ["compound", "input_array-8", "String-5"], ["compound", "input_array-8", "-LSB--6"], ["compound", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"], ["nsubj", "represents-10", "input_array-8"], ["ref", "input_array-8", "that-9"], ["acl:relcl", "input_array-8", "represents-10"], ["det", "input_array-13", "a-11"], ["amod", "input_array-13", "square-12"], ["dobj", "represents-10", "input_array-13"]], [[]]], " A word is a maximal continuous sequence of letters ('a'-'z', 'A'-'Z').\n": [[["det", "word-2", "A-1"], ["nsubj", "sequence-7", "word-2"], ["cop", "sequence-7", "is-3"], ["det", "sequence-7", "a-4"], ["amod", "continuous-6", "maximal-5"], ["amod", "sequence-7", "continuous-6"], ["root", "ROOT-0", "sequence-7"], ["case", "letters-9", "of-8"], ["nmod:of", "sequence-7", "letters-9"], ["dep", "letters-9", "a-12"], ["amod", "letters-9", "z-16"], ["appos", "sequence-7", "A-20"], ["dep", "A-20", "Z-24"]], [[]]], " This change will consist of zero or more steps.\n": [[["det", "change-2", "This-1"], ["nsubj", "consist-4", "change-2"], ["aux", "consist-4", "will-3"], ["root", "ROOT-0", "consist-4"], ["case", "zero-6", "of-5"], ["nmod:of", "consist-4", "zero-6"], ["cc", "zero-6", "or-7"], ["amod", "steps-9", "more-8"], ["nmod:of", "consist-4", "steps-9"], ["conj:or", "zero-6", "steps-9"]], [[]]], " He would like to sell it to the tourists but first he needs to know how many peaks are visible in the picture.\n": [[["nsubj", "like-3", "He-1"], ["nsubj", "sell-5", "He-1"], ["aux", "like-3", "would-2"], ["root", "ROOT-0", "like-3"], ["mark", "sell-5", "to-4"], ["xcomp", "like-3", "sell-5"], ["dobj", "sell-5", "it-6"], ["case", "tourists-9", "to-7"], ["det", "tourists-9", "the-8"], ["nmod:to", "sell-5", "tourists-9"], ["cc", "like-3", "but-10"], ["advmod", "needs-13", "first-11"], ["nsubj", "needs-13", "he-12"], ["nsubj", "know-15", "he-12"], ["conj:but", "like-3", "needs-13"], ["mark", "know-15", "to-14"], ["xcomp", "needs-13", "know-15"], ["advmod", "many-17", "how-16"], ["dep", "visible-20", "many-17"], ["nsubj", "visible-20", "peaks-18"], ["cop", "visible-20", "are-19"], ["ccomp", "know-15", "visible-20"], ["case", "picture-23", "in-21"], ["det", "picture-23", "the-22"], ["nmod:in", "visible-20", "picture-23"]], [[]]], " You are given the int[] input_array, the int input_int1 and the int input_int2.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "the-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array-8", "-LSB--6"], ["amod", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"], ["det", "input_int1-12", "the-10"], ["compound", "input_int1-12", "int-11"], ["dobj", "given-3", "input_int1-12"], ["conj:and", "input_array-8", "input_int1-12"], ["cc", "input_array-8", "and-13"], ["det", "input_int2-16", "the-14"], ["compound", "input_int2-16", "int-15"], ["dobj", "given-3", "input_int2-16"], ["conj:and", "input_array-8", "input_int2-16"]], [[]]], "Given a range of integers from input_int0 to input_int1 (inclusive), determine how many numbers within that range are evenly divisible by input_int2.": [[["prep", "determine-14", "Given-1"], ["det", "range-3", "a-2"], ["pobj", "Given-1", "range-3"], ["prep_of", "range-3", "integers-5"], ["num", "input_int1-9", "input_int0-7"], ["dep", "input_int1-9", "to-8"], ["prep_from", "integers-5", "input_int1-9"], ["appos", "input_int1-9", "inclusive-11"], ["root", "ROOT-0", "determine-14"], ["advmod", "many-16", "how-15"], ["dep", "divisible-23", "many-16"], ["nsubj", "divisible-23", "numbers-17"], ["det", "range-20", "that-19"], ["prep_within", "numbers-17", "range-20"], ["cop", "divisible-23", "are-21"], ["advmod", "divisible-23", "evenly-22"], ["ccomp", "determine-14", "divisible-23"], ["prep_by", "divisible-23", "input_int2-25"]], [[]]], " Brus and Gogo went through the deer enclosure and they collected all the antlers already lost by the deer.\n": [[["nsubj", "went-4", "Brus-1"], ["cc", "Brus-1", "and-2"], ["conj:and", "Brus-1", "Gogo-3"], ["nsubj", "went-4", "Gogo-3"], ["root", "ROOT-0", "went-4"], ["case", "enclosure-8", "through-5"], ["det", "enclosure-8", "the-6"], ["amod", "enclosure-8", "deer-7"], ["nmod:through", "went-4", "enclosure-8"], ["cc", "went-4", "and-9"], ["nsubj", "collected-11", "they-10"], ["conj:and", "went-4", "collected-11"], ["det:predet", "antlers-14", "all-12"], ["det", "antlers-14", "the-13"], ["nsubj", "lost-16", "antlers-14"], ["advmod", "lost-16", "already-15"], ["ccomp", "collected-11", "lost-16"], ["case", "deer-19", "by-17"], ["det", "deer-19", "the-18"], ["nmod:by", "lost-16", "deer-19"]], [[]]], " You are given a String input_array with N characters.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "input_array-6", "a-4"], ["compound", "input_array-6", "String-5"], ["dobj", "given-3", "input_array-6"], ["case", "characters-9", "with-7"], ["compound", "characters-9", "N-8"], ["nmod:with", "given-3", "characters-9"]], [[]]], " To be as fair as possible, you want to minimize the difference between the chosen bag with most mandarins and the chosen bag with fewest mandarins.\n": [[["mark", "fair-4", "To-1"], ["cop", "fair-4", "be-2"], ["advmod", "fair-4", "as-3"], ["advcl", "want-9", "fair-4"], ["case", "possible-6", "as-5"], ["advcl:as", "fair-4", "possible-6"], ["nsubj", "want-9", "you-8"], ["nsubj", "minimize-11", "you-8"], ["root", "ROOT-0", "want-9"], ["mark", "minimize-11", "to-10"], ["xcomp", "want-9", "minimize-11"], ["det", "difference-13", "the-12"], ["dobj", "minimize-11", "difference-13"], ["case", "bag-17", "between-14"], ["det", "bag-17", "the-15"], ["amod", "bag-17", "chosen-16"], ["nmod:between", "difference-13", "bag-17"], ["case", "mandarins-20", "with-18"], ["amod", "mandarins-20", "most-19"], ["nmod:with", "bag-17", "mandarins-20"], ["cc", "bag-17", "and-21"], ["det", "bag-24", "the-22"], ["amod", "bag-24", "chosen-23"], ["nmod:between", "difference-13", "bag-24"], ["conj:and", "bag-17", "bag-24"], ["case", "mandarins-27", "with-25"], ["amod", "mandarins-27", "fewest-26"], ["nmod:with", "bag-24", "mandarins-27"]], [[]]], " Note that 0 is not a positive number.\n": [[["root", "ROOT-0", "Note-1"], ["mark", "number-8", "that-2"], ["nsubj", "number-8", "0-3"], ["cop", "number-8", "is-4"], ["neg", "number-8", "not-5"], ["det", "number-8", "a-6"], ["amod", "number-8", "positive-7"], ["ccomp", "Note-1", "number-8"]], [[]]], " There are two types of egg cartons.\n": [[["expl", "are-2", "There-1"], ["root", "ROOT-0", "are-2"], ["nummod", "types-4", "two-3"], ["nsubj", "are-2", "types-4"], ["case", "cartons-7", "of-5"], ["compound", "cartons-7", "egg-6"], ["nmod:of", "types-4", "cartons-7"]], [[]]], "Unfortunately, on its way to you the message became corrupted: exactly input_int letters of the original message were changed to some other letters.": [[["advmod", "became-10", "Unfortunately-1"], ["poss", "way-5", "its-4"], ["prep_on", "became-10", "way-5"], ["prep_to", "way-5", "you-7"], ["det", "message-9", "the-8"], ["nsubj", "became-10", "message-9"], ["root", "ROOT-0", "became-10"], ["acomp", "became-10", "corrupted-11"], ["advmod", "letters-15", "exactly-13"], ["amod", "letters-15", "input_int-14"], ["nsubjpass", "changed-21", "letters-15"], ["det", "message-19", "the-17"], ["amod", "message-19", "original-18"], ["prep_of", "letters-15", "message-19"], ["auxpass", "changed-21", "were-20"], ["parataxis", "became-10", "changed-21"], ["det", "letters-25", "some-23"], ["amod", "letters-25", "other-24"], ["prep_to", "changed-21", "letters-25"]], [[]]], " For each letter input_array[i], let k[i] be the number of letters in input_array that are less than or equal to input_array[i], including input_array[i] itself.\n": [[["case", "-RSB--7", "For-1"], ["det", "-RSB--7", "each-2"], ["compound", "-RSB--7", "letter-3"], ["compound", "-RSB--7", "input_array-4"], ["compound", "-RSB--7", "-LSB--5"], ["compound", "-RSB--7", "i-6"], ["nmod:for", "let-9", "-RSB--7"], ["root", "ROOT-0", "let-9"], ["compound", "-RSB--13", "k-10"], ["compound", "-RSB--13", "-LSB--11"], ["compound", "-RSB--13", "i-12"], ["nsubj", "number-16", "-RSB--13"], ["nsubj", "equal-26", "-RSB--13"], ["cop", "number-16", "be-14"], ["det", "number-16", "the-15"], ["ccomp", "let-9", "number-16"], ["nsubj", "are-22", "number-16"], ["case", "letters-18", "of-17"], ["nmod:of", "number-16", "letters-18"], ["case", "input_array-20", "in-19"], ["nmod:in", "letters-18", "input_array-20"], ["ref", "number-16", "that-21"], ["acl:relcl", "number-16", "are-22"], ["advmod", "are-22", "less-23"], ["case", "less-23", "than-24"], ["cc", "number-16", "or-25"], ["ccomp", "let-9", "equal-26"], ["conj:or", "number-16", "equal-26"], ["nsubj", "are-22", "equal-26"], ["mark", "input_array-28", "to-27"], ["xcomp", "equal-26", "input_array-28"], ["compound", "-RSB--31", "-LSB--29"], ["compound", "-RSB--31", "i-30"], ["dobj", "input_array-28", "-RSB--31"], ["case", "-RSB--37", "including-33"], ["compound", "-RSB--37", "input_array-34"], ["compound", "-RSB--37", "-LSB--35"], ["compound", "-RSB--37", "i-36"], ["nmod:including", "-RSB--31", "-RSB--37"], ["dobj", "equal-26", "itself-38"], ["nsubj", "input_array-28", "itself-38"]], [[]]], "In other words, whenever Josh places box x on top of box y, we have x > y.": [[["amod", "words-3", "other-2"], ["prep_in", "have-17", "words-3"], ["advmod", "places-7", "whenever-5"], ["nsubj", "places-7", "Josh-6"], ["advcl", "have-17", "places-7"], ["nn", "x-9", "box-8"], ["dobj", "places-7", "x-9"], ["nn", "y-14", "box-13"], ["prep_on_top_of", "places-7", "y-14"], ["nsubj", "have-17", "we-16"], ["root", "ROOT-0", "have-17"], ["dobj", "have-17", "x-18"], ["vmod", "x-18", ">-19"], ["dobj", ">-19", "y.-20"]], [[]]], " Your method should return a double, equal to the maximum distance that the car can travel (in kilometers) with the given amount of input_int, and travelling at a constant velocity equal to one of the elements of input_array1.\n": [[["nmod:poss", "method-2", "Your-1"], ["nsubj", "return-4", "method-2"], ["aux", "return-4", "should-3"], ["root", "ROOT-0", "return-4"], ["det", "distance-12", "a-5"], ["amod", "distance-12", "double-6"], ["amod", "distance-12", "equal-8"], ["case", "maximum-11", "to-9"], ["det", "maximum-11", "the-10"], ["nmod:to", "equal-8", "maximum-11"], ["dobj", "return-4", "distance-12"], ["mark", "travel-17", "that-13"], ["det", "car-15", "the-14"], ["nsubj", "travel-17", "car-15"], ["aux", "travel-17", "can-16"], ["dep", "distance-12", "travel-17"], ["case", "kilometers-20", "in-19"], ["dep", "amount-25", "kilometers-20"], ["case", "amount-25", "with-22"], ["det", "amount-25", "the-23"], ["amod", "amount-25", "given-24"], ["nmod:with", "travel-17", "amount-25"], ["case", "input_int-27", "of-26"], ["nmod:of", "distance-12", "input_int-27"], ["cc", "distance-12", "and-29"], ["dobj", "return-4", "travelling-30"], ["conj:and", "distance-12", "travelling-30"], ["case", "velocity-34", "at-31"], ["det", "velocity-34", "a-32"], ["amod", "velocity-34", "constant-33"], ["nmod:at", "travelling-30", "velocity-34"], ["amod", "velocity-34", "equal-35"], ["case", "one-37", "to-36"], ["nmod:to", "equal-35", "one-37"], ["case", "elements-40", "of-38"], ["det", "elements-40", "the-39"], ["nmod:of", "travelling-30", "elements-40"], ["case", "input_array1-42", "of-41"], ["nmod:of", "travelling-30", "input_array1-42"]], [[]]], "Determine whether there are 5 consecutive cells (horizontally, vertically, or diagonally) that contain Jiro's tokens.": [[["root", "ROOT-0", "Determine-1"], ["mark", "are-4", "whether-2"], ["expl", "are-4", "there-3"], ["ccomp", "Determine-1", "are-4"], ["num", "cells-7", "5-5"], ["amod", "cells-7", "consecutive-6"], ["nsubj", "are-4", "cells-7"], ["nsubj", "contain-17", "cells-7"], ["dep", "cells-7", "horizontally-9"], ["dep", "cells-7", "vertically-11"], ["conj_or", "horizontally-9", "vertically-11"], ["dep", "cells-7", "diagonally-14"], ["conj_or", "horizontally-9", "diagonally-14"], ["rcmod", "cells-7", "contain-17"], ["poss", "tokens-20", "Jiro-18"], ["dobj", "contain-17", "tokens-20"]], [[]]], "The deer have lost exactly input_int2 antlers in total.": [[["det", "deer-2", "The-1"], ["nsubj", "lost-4", "deer-2"], ["aux", "lost-4", "have-3"], ["root", "ROOT-0", "lost-4"], ["advmod", "antlers-7", "exactly-5"], ["amod", "antlers-7", "input_int2-6"], ["dobj", "lost-4", "antlers-7"], ["prep_in", "antlers-7", "total-9"]], [[]]], "Return the number of input_array remaining after the procedure described above is performed.": [[["csubjpass", "performed-13", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["advmod", "remaining-6", "input_array-5"], ["prepc_of", "number-3", "remaining-6"], ["mark", "described-10", "after-7"], ["det", "procedure-9", "the-8"], ["nsubj", "described-10", "procedure-9"], ["advcl", "remaining-6", "described-10"], ["advmod", "described-10", "above-11"], ["auxpass", "performed-13", "is-12"], ["root", "ROOT-0", "performed-13"]], [[]]], " The returned hash is the sum of all character values in input.\n": [[["det", "hash-3", "The-1"], ["amod", "hash-3", "returned-2"], ["nsubj", "sum-6", "hash-3"], ["cop", "sum-6", "is-4"], ["det", "sum-6", "the-5"], ["root", "ROOT-0", "sum-6"], ["case", "values-10", "of-7"], ["det", "values-10", "all-8"], ["compound", "values-10", "character-9"], ["nmod:of", "sum-6", "values-10"], ["case", "input-12", "in-11"], ["nmod:in", "values-10", "input-12"]], [[]]], " Ciel evaluated the level each candidate has in each of the skills.\n": [[["nsubj", "evaluated-2", "Ciel-1"], ["root", "ROOT-0", "evaluated-2"], ["det", "level-4", "the-3"], ["dobj", "evaluated-2", "level-4"], ["det", "candidate-6", "each-5"], ["nsubj", "each-9", "candidate-6"], ["aux", "each-9", "has-7"], ["case", "each-9", "in-8"], ["acl:relcl", "level-4", "each-9"], ["case", "skills-12", "of-10"], ["det", "skills-12", "the-11"], ["nmod:of", "each-9", "skills-12"]], [[]]], " If no such positive number exists, return -1.\n": [[["mark", "exists-6", "If-1"], ["neg", "number-5", "no-2"], ["amod", "number-5", "such-3"], ["amod", "number-5", "positive-4"], ["nsubj", "exists-6", "number-5"], ["advcl", "return-8", "exists-6"], ["root", "ROOT-0", "return-8"], ["dobj", "return-8", "-1-9"]], [[]]], " Unfortunately, on its way to you the message became corrupted: exactly input_int letters of the original message were changed to some other letters.\n": [[["advmod", "became-10", "Unfortunately-1"], ["case", "way-5", "on-3"], ["nmod:poss", "way-5", "its-4"], ["nmod:on", "became-10", "way-5"], ["case", "you-7", "to-6"], ["nmod:to", "way-5", "you-7"], ["det", "message-9", "the-8"], ["nsubj", "became-10", "message-9"], ["root", "ROOT-0", "became-10"], ["xcomp", "became-10", "corrupted-11"], ["advmod", "letters-15", "exactly-13"], ["amod", "letters-15", "input_int-14"], ["nsubjpass", "changed-21", "letters-15"], ["case", "message-19", "of-16"], ["det", "message-19", "the-17"], ["amod", "message-19", "original-18"], ["nmod:of", "letters-15", "message-19"], ["auxpass", "changed-21", "were-20"], ["parataxis", "became-10", "changed-21"], ["case", "letters-25", "to-22"], ["det", "letters-25", "some-23"], ["amod", "letters-25", "other-24"], ["nmod:to", "changed-21", "letters-25"]], [[]]], " 6  =  3 + 1 + 2   :  'D' in element 1 position 2\n": [[["root", "ROOT-0", "6-1"], ["dep", "1-5", "=-2"], ["nummod", "1-5", "3-3"], ["amod", "1-5", "+-4"], ["acl:relcl", "6-1", "1-5"], ["compound", "2-7", "+-6"], ["dep", "6-1", "2-7"], ["dep", "2-7", "'D-9"], ["case", "'D-9", "'-10"], ["case", "position-14", "in-11"], ["compound", "position-14", "element-12"], ["nummod", "position-14", "1-13"], ["nmod:in", "'D-9", "position-14"], ["nummod", "position-14", "2-15"]], [[]]], " For example, f(\"abc\") is the same as f(\"abcabc\").\n": [[["case", "example-2", "For-1"], ["nmod:for", "f-14", "example-2"], ["nsubj", "f-14", "f-4"], ["dep", "f-4", "abc-7"], ["cop", "f-14", "is-10"], ["det", "same-12", "the-11"], ["dep", "f-14", "same-12"], ["advmod", "f-14", "as-13"], ["root", "ROOT-0", "f-14"], ["dep", "f-14", "abcabc-17"]], [[]]], " The digit sum of an integer is the sum of its digits in decimal notation.\n": [[["det", "sum-3", "The-1"], ["amod", "sum-3", "digit-2"], ["nsubj", "sum-9", "sum-3"], ["case", "integer-6", "of-4"], ["det", "integer-6", "an-5"], ["nmod:of", "sum-3", "integer-6"], ["cop", "sum-9", "is-7"], ["det", "sum-9", "the-8"], ["root", "ROOT-0", "sum-9"], ["case", "digits-12", "of-10"], ["nmod:poss", "digits-12", "its-11"], ["nmod:of", "sum-9", "digits-12"], ["case", "notation-15", "in-13"], ["amod", "notation-15", "decimal-14"], ["nmod:in", "digits-12", "notation-15"]], [[]]], "She wants a sequence of marbles consisting of at most two different colors.": [[["nsubj", "wants-2", "She-1"], ["root", "ROOT-0", "wants-2"], ["det", "sequence-4", "a-3"], ["dobj", "wants-2", "sequence-4"], ["prep_of", "sequence-4", "marbles-6"], ["vmod", "marbles-6", "consisting-7"], ["quantmod", "two-11", "at-9"], ["mwe", "at-9", "most-10"], ["pobj", "at-9", "most-10"], ["num", "colors-13", "two-11"], ["amod", "colors-13", "different-12"], ["prep_of", "consisting-7", "colors-13"]], [[]]], " One type contains 6 eggs and the other type contains 8 eggs.\n": [[["nummod", "type-2", "One-1"], ["nsubj", "contains-3", "type-2"], ["root", "ROOT-0", "contains-3"], ["nummod", "eggs-5", "6-4"], ["nsubj", "contains-10", "eggs-5"], ["cc", "eggs-5", "and-6"], ["det", "type-9", "the-7"], ["amod", "type-9", "other-8"], ["conj:and", "eggs-5", "type-9"], ["nsubj", "contains-10", "type-9"], ["ccomp", "contains-3", "contains-10"], ["nummod", "eggs-12", "8-11"], ["dobj", "contains-10", "eggs-12"]], [[]]], " This is because of the following property:\n": [[["nsubj", "property-7", "This-1"], ["cop", "property-7", "is-2"], ["case", "property-7", "because-3"], ["mwe", "because-3", "of-4"], ["det", "property-7", "the-5"], ["amod", "property-7", "following-6"], ["root", "ROOT-0", "property-7"]], [[]]], " There is a letter carved on each square.\n": [[["expl", "is-2", "There-1"], ["root", "ROOT-0", "is-2"], ["det", "letter-4", "a-3"], ["nsubj", "is-2", "letter-4"], ["acl", "letter-4", "carved-5"], ["case", "square-8", "on-6"], ["det", "square-8", "each-7"], ["nmod:on", "carved-5", "square-8"]], [[]]], " Your method must find and return the maximum number of moves Gogo could have performed.\n": [[["nmod:poss", "method-2", "Your-1"], ["nsubj", "find-4", "method-2"], ["nsubj", "return-6", "method-2"], ["aux", "find-4", "must-3"], ["dep", "performed-15", "find-4"], ["cc", "find-4", "and-5"], ["conj:and", "find-4", "return-6"], ["dep", "performed-15", "return-6"], ["det", "number-9", "the-7"], ["amod", "number-9", "maximum-8"], ["dobj", "find-4", "number-9"], ["case", "moves-11", "of-10"], ["nmod:of", "number-9", "moves-11"], ["nsubj", "performed-15", "Gogo-12"], ["aux", "performed-15", "could-13"], ["aux", "performed-15", "have-14"], ["root", "ROOT-0", "performed-15"]], [[]]], " Gogo is very smart, so he always uses the smallest possible number of moves.\n": [[["nsubj", "smart-4", "Gogo-1"], ["cop", "smart-4", "is-2"], ["advmod", "smart-4", "very-3"], ["root", "ROOT-0", "smart-4"], ["dep", "smart-4", "so-6"], ["nsubj", "uses-9", "he-7"], ["advmod", "uses-9", "always-8"], ["parataxis", "smart-4", "uses-9"], ["det", "number-13", "the-10"], ["amod", "number-13", "smallest-11"], ["amod", "number-13", "possible-12"], ["dobj", "uses-9", "number-13"], ["case", "moves-15", "of-14"], ["nmod:of", "number-13", "moves-15"]], [[]]], " The character input_array[i][j] represents the cell with coordinates (i,j).\n": [[["det", "input_array-3", "The-1"], ["compound", "input_array-3", "character-2"], ["nsubj", "represents-10", "input_array-3"], ["compound", "-RSB--9", "-LSB--4"], ["compound", "-RSB--9", "i-5"], ["compound", "-RSB--9", "-RSB--6"], ["compound", "-RSB--9", "-LSB--7"], ["compound", "-RSB--9", "j-8"], ["dep", "input_array-3", "-RSB--9"], ["root", "ROOT-0", "represents-10"], ["det", "cell-12", "the-11"], ["dobj", "represents-10", "cell-12"], ["case", "coordinates-14", "with-13"], ["nmod:with", "cell-12", "coordinates-14"], ["dep", "coordinates-14", "i-16"], ["appos", "i-16", "j-18"]], [[]]], " In other words, in each move Gogo takes a single ball from one bin and places it into another bin.\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "takes-9", "words-3"], ["case", "move-7", "in-5"], ["det", "move-7", "each-6"], ["nmod:in", "takes-9", "move-7"], ["nsubj", "takes-9", "Gogo-8"], ["nsubj", "places-17", "Gogo-8"], ["root", "ROOT-0", "takes-9"], ["det", "ball-12", "a-10"], ["amod", "ball-12", "single-11"], ["dobj", "takes-9", "ball-12"], ["case", "bin-15", "from-13"], ["nummod", "bin-15", "one-14"], ["nmod:from", "takes-9", "bin-15"], ["cc", "takes-9", "and-16"], ["conj:and", "takes-9", "places-17"], ["dobj", "places-17", "it-18"], ["case", "bin-21", "into-19"], ["det", "bin-21", "another-20"], ["nmod:into", "places-17", "bin-21"]], [[]]], " Note that the return value is case-sensitive.\n": [[["root", "ROOT-0", "Note-1"], ["mark", "case-sensitive-7", "that-2"], ["det", "value-5", "the-3"], ["compound", "value-5", "return-4"], ["nsubj", "case-sensitive-7", "value-5"], ["cop", "case-sensitive-7", "is-6"], ["ccomp", "Note-1", "case-sensitive-7"]], [[]]], " Arthur will color the disc using two colors: one for the top side, one for the bottom side.\n": [[["nsubj", "color-3", "Arthur-1"], ["aux", "color-3", "will-2"], ["root", "ROOT-0", "color-3"], ["det", "disc-5", "the-4"], ["dobj", "color-3", "disc-5"], ["acl", "disc-5", "using-6"], ["nummod", "colors-8", "two-7"], ["dobj", "using-6", "colors-8"], ["dep", "colors-8", "one-10"], ["case", "side-14", "for-11"], ["det", "side-14", "the-12"], ["amod", "side-14", "top-13"], ["nmod:for", "one-10", "side-14"], ["appos", "side-14", "one-16"], ["case", "side-20", "for-17"], ["det", "side-20", "the-18"], ["amod", "side-20", "bottom-19"], ["nmod:for", "one-16", "side-20"]], [[]]], " A positive integer n is called a semi-square if and only if there are positive integers a >= 1 and b > 1 such that a < b and a*b*b = n. For example, 81 (=1*9*9) and 48 (=3*4*4) are semi-squares, while 24, 63, and 125 are not.\n": [[["det", "n-4", "A-1"], ["amod", "n-4", "positive-2"], ["compound", "n-4", "integer-3"], ["nsubjpass", "called-6", "n-4"], ["auxpass", "called-6", "is-5"], ["root", "ROOT-0", "called-6"], ["det", "semi-square-8", "a-7"], ["dobj", "called-6", "semi-square-8"], ["mark", "integers-16", "if-9"], ["cc", "integers-16", "and-10"], ["advmod", "integers-16", "only-11"], ["mark", "are-14", "if-12"], ["expl", "are-14", "there-13"], ["csubj", "integers-16", "are-14"], ["xcomp", "are-14", "positive-15"], ["advcl", "called-6", "integers-16"], ["det", ">-18", "a-17"], ["nsubj", "1-20", ">-18"], ["dep", "1-20", "=-19"], ["ccomp", "integers-16", "1-20"], ["cc", "integers-16", "and-21"], ["dep", "1-24", "b-22"], ["compound", "1-24", ">-23"], ["dep", "b-33", "1-24"], ["dep", "b-29", "such-25"], ["case", "b-29", "that-26"], ["det", "b-29", "a-27"], ["amod", "b-29", "<-28"], ["nmod:that", "1-24", "b-29"], ["cc", "b-29", "and-30"], ["det", "*-32", "a-31"], ["nmod:that", "1-24", "*-32"], ["conj:and", "b-29", "*-32"], ["dep", "n.-37", "b-33"], ["dep", "b-35", "*-34"], ["dep", "n.-37", "b-35"], ["nsubj", "n.-37", "=-36"], ["advcl", "called-6", "n.-37"], ["conj:and", "integers-16", "n.-37"], ["case", "example-39", "For-38"], ["nmod:for", "semi-squares-61", "example-39"], ["nsubj", "semi-squares-61", "81-41"], ["dep", "81-41", "=-43"], ["nummod", "9-46", "1-44"], ["amod", "9-46", "*-45"], ["dobj", "=-43", "9-46"], ["dep", "9-48", "*-47"], ["dep", "=-43", "9-48"], ["cc", "81-41", "and-50"], ["conj:and", "81-41", "48-51"], ["nsubj", "semi-squares-61", "48-51"], ["dep", "48-51", "=-53"], ["nummod", "4-56", "3-54"], ["amod", "4-56", "*-55"], ["dobj", "=-53", "4-56"], ["dep", "4-58", "*-57"], ["dep", "=-53", "4-58"], ["cop", "semi-squares-61", "are-60"], ["ccomp", "n.-37", "semi-squares-61"], ["mark", "are-70", "while-63"], ["nsubj", "are-70", "24-64"], ["conj:and", "24-64", "63-66"], ["nsubj", "are-70", "63-66"], ["cc", "24-64", "and-68"], ["conj:and", "24-64", "125-69"], ["nsubj", "are-70", "125-69"], ["advcl", "semi-squares-61", "are-70"], ["neg", "are-70", "not-71"]], [[]]], " This string represents all the balls that are initially in the row (in the order from left to right).\n": [[["det", "string-2", "This-1"], ["nsubj", "represents-3", "string-2"], ["root", "ROOT-0", "represents-3"], ["det:predet", "balls-6", "all-4"], ["det", "balls-6", "the-5"], ["dobj", "represents-3", "balls-6"], ["nsubj", "row-12", "balls-6"], ["ref", "balls-6", "that-7"], ["cop", "row-12", "are-8"], ["advmod", "row-12", "initially-9"], ["case", "row-12", "in-10"], ["det", "row-12", "the-11"], ["acl:relcl", "balls-6", "row-12"], ["case", "order-16", "in-14"], ["det", "order-16", "the-15"], ["dep", "represents-3", "order-16"], ["mark", "left-18", "from-17"], ["acl", "order-16", "left-18"], ["case", "right-20", "to-19"], ["nmod:to", "left-18", "right-20"]], [[]]], " The barn will consist of N sections in a row.\n": [[["det", "barn-2", "The-1"], ["nsubj", "consist-4", "barn-2"], ["aux", "consist-4", "will-3"], ["root", "ROOT-0", "consist-4"], ["case", "sections-7", "of-5"], ["compound", "sections-7", "N-6"], ["nmod:of", "consist-4", "sections-7"], ["case", "row-10", "in-8"], ["det", "row-10", "a-9"], ["nmod:in", "consist-4", "row-10"]], [[]]], " In addition, you will be given an int input_int specifying the total amount of input_int in milliliters.\n": [[["case", "addition-2", "In-1"], ["nmod:in", "given-7", "addition-2"], ["nsubjpass", "given-7", "you-4"], ["aux", "given-7", "will-5"], ["auxpass", "given-7", "be-6"], ["root", "ROOT-0", "given-7"], ["det", "int-9", "an-8"], ["iobj", "given-7", "int-9"], ["dobj", "given-7", "input_int-10"], ["acl", "input_int-10", "specifying-11"], ["det", "amount-14", "the-12"], ["amod", "amount-14", "total-13"], ["dobj", "specifying-11", "amount-14"], ["case", "input_int-16", "of-15"], ["nmod:of", "amount-14", "input_int-16"], ["case", "milliliters-18", "in-17"], ["nmod:in", "input_int-16", "milliliters-18"]], [[]]], " Sometimes, two different finite strings can produce the same infinite string.\n": [[["advmod", "produce-8", "Sometimes-1"], ["nummod", "strings-6", "two-3"], ["amod", "strings-6", "different-4"], ["amod", "strings-6", "finite-5"], ["nsubj", "produce-8", "strings-6"], ["aux", "produce-8", "can-7"], ["root", "ROOT-0", "produce-8"], ["det", "string-12", "the-9"], ["amod", "string-12", "same-10"], ["compound", "string-12", "infinite-11"], ["dobj", "produce-8", "string-12"]], [[]]], " The sum of the word lengths is 4+2+3+4+7=20, so the average word length is 20/5=4.\n": [[["det", "sum-2", "The-1"], ["nsubj", "+2-9", "sum-2"], ["case", "lengths-6", "of-3"], ["det", "lengths-6", "the-4"], ["compound", "lengths-6", "word-5"], ["nmod:of", "sum-2", "lengths-6"], ["cop", "+2-9", "is-7"], ["compound", "+2-9", "4-8"], ["root", "ROOT-0", "+2-9"], ["acl", "+2-9", "+3-10"], ["compound", "+7-12", "+4-11"], ["nsubj", "20-14", "+7-12"], ["dep", "20-14", "=-13"], ["ccomp", "+3-10", "20-14"], ["dep", "+2-9", "so-16"], ["det", "length-20", "the-17"], ["amod", "length-20", "average-18"], ["compound", "length-20", "word-19"], ["nsubj", "20/5-22", "length-20"], ["cop", "20/5-22", "is-21"], ["parataxis", "+2-9", "20/5-22"], ["dep", "4-24", "=-23"], ["dep", "20/5-22", "4-24"]], [[]]], " Fox Ciel wants to hire a new maid.\n": [[["compound", "Ciel-2", "Fox-1"], ["nsubj", "wants-3", "Ciel-2"], ["nsubj", "hire-5", "Ciel-2"], ["root", "ROOT-0", "wants-3"], ["mark", "hire-5", "to-4"], ["xcomp", "wants-3", "hire-5"], ["det", "maid-8", "a-6"], ["amod", "maid-8", "new-7"], ["dobj", "hire-5", "maid-8"]], [[]]], " A frisbee has the shape of a disc.\n": [[["det", "frisbee-2", "A-1"], ["nsubj", "has-3", "frisbee-2"], ["root", "ROOT-0", "has-3"], ["det", "shape-5", "the-4"], ["dobj", "has-3", "shape-5"], ["case", "disc-8", "of-6"], ["det", "disc-8", "a-7"], ["nmod:of", "shape-5", "disc-8"]], [[]]], " Ciel plays better, so before they start she allowed Jiro to put some of his pieces on the input_array.\n": [[["nsubj", "plays-2", "Ciel-1"], ["root", "ROOT-0", "plays-2"], ["advmod", "plays-2", "better-3"], ["advmod", "better-3", "so-5"], ["mark", "start-8", "before-6"], ["nsubj", "start-8", "they-7"], ["dep", "so-5", "start-8"], ["nsubj", "allowed-10", "she-9"], ["ccomp", "start-8", "allowed-10"], ["dobj", "allowed-10", "Jiro-11"], ["nsubj", "put-13", "Jiro-11"], ["mark", "put-13", "to-12"], ["xcomp", "allowed-10", "put-13"], ["dobj", "put-13", "some-14"], ["case", "pieces-17", "of-15"], ["nmod:poss", "pieces-17", "his-16"], ["nmod:of", "some-14", "pieces-17"], ["case", "input_array-20", "on-18"], ["det", "input_array-20", "the-19"], ["nmod:on", "put-13", "input_array-20"]], [[]]], " Fox Ciel is going to play Gomoku with her friend Fox Jiro.\n": [[["compound", "Ciel-2", "Fox-1"], ["nsubj", "going-4", "Ciel-2"], ["nsubj", "play-6", "Ciel-2"], ["aux", "going-4", "is-3"], ["root", "ROOT-0", "going-4"], ["mark", "play-6", "to-5"], ["xcomp", "going-4", "play-6"], ["dobj", "play-6", "Gomoku-7"], ["case", "friend-10", "with-8"], ["nmod:poss", "friend-10", "her-9"], ["nmod:with", "play-6", "friend-10"], ["compound", "Jiro-12", "Fox-11"], ["dep", "friend-10", "Jiro-12"]], [[]]], "the correct array can be done from S by removing exactly 1 element": [[["det", "array-3", "the-1"], ["amod", "array-3", "correct-2"], ["nsubjpass", "done-6", "array-3"], ["aux", "done-6", "can-4"], ["auxpass", "done-6", "be-5"], ["root", "ROOT-0", "done-6"], ["prep_from", "done-6", "S-8"], ["agent", "done-6", "removing-10"], ["advmod", "element-13", "exactly-11"], ["num", "element-13", "1-12"], ["dobj", "removing-10", "element-13"]], [[]]], " The number of red bricks they have is input_int0 and each of them has a height of input_int1 .\n": [[["det", "number-2", "The-1"], ["nsubj", "has-14", "number-2"], ["case", "bricks-5", "of-3"], ["amod", "bricks-5", "red-4"], ["nmod:of", "number-2", "bricks-5"], ["nsubj", "input_int0-9", "they-6"], ["aux", "input_int0-9", "have-7"], ["cop", "input_int0-9", "is-8"], ["acl:relcl", "bricks-5", "input_int0-9"], ["cc", "bricks-5", "and-10"], ["nmod:of", "number-2", "each-11"], ["conj:and", "bricks-5", "each-11"], ["case", "them-13", "of-12"], ["nmod:of", "each-11", "them-13"], ["root", "ROOT-0", "has-14"], ["det", "height-16", "a-15"], ["dobj", "has-14", "height-16"], ["case", "input_int1-18", "of-17"], ["nmod:of", "height-16", "input_int1-18"]], [[]]], " Given is a String input_array .\n": [[["nsubj", "input_array-5", "Given-1"], ["cop", "input_array-5", "is-2"], ["det", "input_array-5", "a-3"], ["compound", "input_array-5", "String-4"], ["root", "ROOT-0", "input_array-5"]], [[]]], " You are given an int input_int1 and an int input_int2.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "an-4"], ["iobj", "given-3", "int-5"], ["dobj", "given-3", "input_int1-6"], ["cc", "input_int1-6", "and-7"], ["det", "input_int2-10", "an-8"], ["compound", "input_int2-10", "int-9"], ["dobj", "given-3", "input_int2-10"], ["conj:and", "input_int1-6", "input_int2-10"]], [[]]], " (Now there may be some deer with two antlers, some with one, and some with no antlers at all.)\n": [[["advmod", "deer-7", "Now-2"], ["expl", "deer-7", "there-3"], ["aux", "deer-7", "may-4"], ["cop", "deer-7", "be-5"], ["det", "deer-7", "some-6"], ["root", "ROOT-0", "deer-7"], ["case", "antlers-10", "with-8"], ["nummod", "antlers-10", "two-9"], ["nmod:with", "deer-7", "antlers-10"], ["appos", "antlers-10", "some-12"], ["case", "one-14", "with-13"], ["nmod:with", "some-12", "one-14"], ["cc", "deer-7", "and-16"], ["nsubj", "antlers-20", "some-17"], ["case", "no-19", "with-18"], ["nmod:with", "some-17", "no-19"], ["conj:and", "deer-7", "antlers-20"], ["case", "all-22", "at-21"], ["nmod:at", "antlers-20", "all-22"]], [[]]], " Return a int[] with n elements: the numbers of all candidates, ordered according to their level in skill input_int from the best to the worst.\n": [[["root", "ROOT-0", "Return-1"], ["det", "-RSB--5", "a-2"], ["compound", "-RSB--5", "int-3"], ["compound", "-RSB--5", "-LSB--4"], ["dep", "Return-1", "-RSB--5"], ["case", "elements-8", "with-6"], ["compound", "elements-8", "n-7"], ["nmod:with", "-RSB--5", "elements-8"], ["det", "numbers-11", "the-10"], ["dep", "Return-1", "numbers-11"], ["case", "candidates-14", "of-12"], ["det", "candidates-14", "all-13"], ["nmod:of", "numbers-11", "candidates-14"], ["acl", "numbers-11", "ordered-16"], ["case", "level-20", "according-17"], ["mwe", "according-17", "to-18"], ["nmod:poss", "level-20", "their-19"], ["nmod:according_to", "ordered-16", "level-20"], ["case", "input_int-23", "in-21"], ["compound", "input_int-23", "skill-22"], ["nmod:in", "level-20", "input_int-23"], ["case", "best-26", "from-24"], ["det", "best-26", "the-25"], ["nmod:from", "input_int-23", "best-26"], ["case", "worst-29", "to-27"], ["det", "worst-29", "the-28"], ["nmod:to", "best-26", "worst-29"]], [[]]], " You do not know the original state S.\n": [[["nsubj", "know-4", "You-1"], ["aux", "know-4", "do-2"], ["neg", "know-4", "not-3"], ["root", "ROOT-0", "know-4"], ["det", "S.-8", "the-5"], ["amod", "S.-8", "original-6"], ["compound", "S.-8", "state-7"], ["dobj", "know-4", "S.-8"]], [[]]], " You enjoy working with numbers that contain only square digits (namely, 0, 1, 4 and 9).\n": [[["nsubj", "enjoy-2", "You-1"], ["root", "ROOT-0", "enjoy-2"], ["xcomp", "enjoy-2", "working-3"], ["case", "numbers-5", "with-4"], ["nmod:with", "working-3", "numbers-5"], ["nsubj", "contain-7", "numbers-5"], ["ref", "numbers-5", "that-6"], ["acl:relcl", "numbers-5", "contain-7"], ["advmod", "digits-10", "only-8"], ["amod", "digits-10", "square-9"], ["dobj", "contain-7", "digits-10"], ["dep", "0-14", "namely-12"], ["dep", "numbers-5", "0-14"], ["amod", "0-14", "1-16"], ["dep", "0-14", "4-18"], ["cc", "4-18", "and-19"], ["dep", "0-14", "9-20"], ["conj:and", "4-18", "9-20"]], [[]]], " Whenever you do so, you will gain power equal to the sum of all elements in the chosen subsequence.\n": [[["advmod", "do-3", "Whenever-1"], ["nsubj", "do-3", "you-2"], ["advcl", "gain-8", "do-3"], ["advmod", "do-3", "so-4"], ["nsubj", "gain-8", "you-6"], ["aux", "gain-8", "will-7"], ["root", "ROOT-0", "gain-8"], ["nsubj", "equal-10", "power-9"], ["xcomp", "gain-8", "equal-10"], ["case", "sum-13", "to-11"], ["det", "sum-13", "the-12"], ["nmod:to", "equal-10", "sum-13"], ["case", "elements-16", "of-14"], ["det", "elements-16", "all-15"], ["nmod:of", "sum-13", "elements-16"], ["case", "subsequence-20", "in-17"], ["det", "subsequence-20", "the-18"], ["amod", "subsequence-20", "chosen-19"], ["nmod:in", "elements-16", "subsequence-20"]], [[]]], " He likes all his towers to follow three simple rules:\n": [[["nsubj", "likes-2", "He-1"], ["root", "ROOT-0", "likes-2"], ["det:predet", "towers-5", "all-3"], ["nmod:poss", "towers-5", "his-4"], ["dobj", "likes-2", "towers-5"], ["mark", "follow-7", "to-6"], ["advcl", "likes-2", "follow-7"], ["nummod", "rules-10", "three-8"], ["amod", "rules-10", "simple-9"], ["dobj", "follow-7", "rules-10"]], [[]]], " Your method should return the maximum number of consecutive competitions with positive rating changes.\n": [[["nmod:poss", "method-2", "Your-1"], ["nsubj", "return-4", "method-2"], ["aux", "return-4", "should-3"], ["root", "ROOT-0", "return-4"], ["det", "number-7", "the-5"], ["amod", "number-7", "maximum-6"], ["dobj", "return-4", "number-7"], ["case", "competitions-10", "of-8"], ["amod", "competitions-10", "consecutive-9"], ["nmod:of", "number-7", "competitions-10"], ["case", "changes-14", "with-11"], ["amod", "changes-14", "positive-12"], ["compound", "changes-14", "rating-13"], ["nmod:with", "return-4", "changes-14"]], [[]]], "The number N is considered far from primes if there are no prime numbers between N-10 and N+10, inclusive, i.e., all numbers N-10, N-9,  ..., N-1, N, N+1, ..., N+9, N+10 are not prime.": [[["det", "number-2", "The-1"], ["advmod", "are-47", "number-2"], ["nsubjpass", "considered-5", "N-3"], ["auxpass", "considered-5", "is-4"], ["rcmod", "number-2", "considered-5"], ["prep_far_from", "considered-5", "primes-8"], ["mark", "are-11", "if-9"], ["expl", "are-11", "there-10"], ["advcl", "considered-5", "are-11"], ["neg", "numbers-14", "no-12"], ["amod", "numbers-14", "prime-13"], ["nsubj", "are-11", "numbers-14"], ["prep_between", "numbers-14", "N-10-16"], ["prep_between", "numbers-14", "N-18"], ["conj_and", "N-10-16", "N-18"], ["num", "N-18", "+10-19"], ["num", "N-18", "inclusive-21"], ["appos", "N-10-16", "i.e.-23"], ["det", "N-10-27", "all-25"], ["nn", "N-10-27", "numbers-26"], ["appos", "N-10-16", "N-10-27"], ["appos", "N-10-27", "N-9-29"], ["appos", "numbers-14", "N-1-33"], ["nn", "N-37", "N-35"], ["appos", "N-1-33", "N-37"], ["num", "N-37", "+1-38"], ["dep", "number-2", "N-42"], ["dep", "N-42", "+9-43"], ["nsubj", "are-47", "N-45"], ["num", "N-45", "+10-46"], ["root", "ROOT-0", "are-47"], ["neg", "are-47", "not-48"], ["acomp", "are-47", "prime-49"]], [[]]], " Given ints input_int0 , input_int1 , input_int2 , input_int3 , input_int4 , input_int5 , input_int6 , and input_int7 , return the number of valid colors that make a good transition from the color ( input_int3 , input_int4 , input_int5 ).\n": [[["root", "ROOT-0", "Given-1"], ["nsubj", "return-20", "ints-2"], ["nummod", "ints-2", "input_int0-3"], ["nummod", "ints-2", "input_int1-5"], ["nummod", "ints-2", "input_int2-7"], ["nummod", "ints-2", "input_int3-9"], ["nummod", "ints-2", "input_int4-11"], ["nummod", "ints-2", "input_int5-13"], ["nummod", "ints-2", "input_int6-15"], ["cc", "ints-2", "and-17"], ["conj:and", "ints-2", "input_int7-18"], ["nsubj", "return-20", "input_int7-18"], ["ccomp", "Given-1", "return-20"], ["det", "number-22", "the-21"], ["dobj", "return-20", "number-22"], ["nsubj", "make-27", "number-22"], ["case", "colors-25", "of-23"], ["amod", "colors-25", "valid-24"], ["nmod:of", "number-22", "colors-25"], ["ref", "number-22", "that-26"], ["acl:relcl", "number-22", "make-27"], ["det", "transition-30", "a-28"], ["amod", "transition-30", "good-29"], ["dobj", "make-27", "transition-30"], ["case", "color-33", "from-31"], ["det", "color-33", "the-32"], ["nmod:from", "make-27", "color-33"], ["dep", "color-33", "input_int3-35"], ["appos", "input_int3-35", "input_int4-37"], ["appos", "input_int3-35", "input_int5-39"]], [[]]], "It is known that Arthur can use any of the input_int0 * input_int1 * input_int2 possible colors.": [[["nsubjpass", "known-3", "It-1"], ["auxpass", "known-3", "is-2"], ["root", "ROOT-0", "known-3"], ["mark", "use-7", "that-4"], ["nsubj", "use-7", "Arthur-5"], ["aux", "use-7", "can-6"], ["ccomp", "known-3", "use-7"], ["dobj", "use-7", "any-8"], ["iobj", "use-7", "any-8"], ["det", "input_int1-13", "the-10"], ["amod", "input_int1-13", "input_int0-11"], ["num", "input_int1-13", "*-12"], ["prep_of", "any-8", "input_int1-13"], ["dep", "any-8", "*-14"], ["amod", "colors-17", "input_int2-15"], ["amod", "colors-17", "possible-16"], ["dep", "any-8", "colors-17"]], [[]]], " He has some balls arranged in a row.\n": [[["nsubj", "has-2", "He-1"], ["root", "ROOT-0", "has-2"], ["det", "balls-4", "some-3"], ["dobj", "has-2", "balls-4"], ["acl", "balls-4", "arranged-5"], ["case", "row-8", "in-6"], ["det", "row-8", "a-7"], ["nmod:in", "arranged-5", "row-8"]], [[]]], " For example, suppose that S = {2, 5, 0}, i.e., there are 2 balls in bin 0, 5 balls in bin 1, and 0 balls in bin 2.\n": [[["case", "example-2", "For-1"], ["nmod:for", "suppose-4", "example-2"], ["root", "ROOT-0", "suppose-4"], ["mark", "balls-21", "that-5"], ["compound", "=-7", "S-6"], ["nsubj", "balls-21", "=-7"], ["appos", "=-7", "2-9"], ["dep", "2-9", "5-11"], ["dep", "2-9", "0-13"], ["appos", "=-7", "i.e.-16"], ["advmod", "balls-21", "there-18"], ["cop", "balls-21", "are-19"], ["nummod", "balls-21", "2-20"], ["ccomp", "suppose-4", "balls-21"], ["case", "bin-23", "in-22"], ["nmod:in", "balls-21", "bin-23"], ["nummod", "bin-23", "0-24"], ["nummod", "balls-27", "5-26"], ["ccomp", "suppose-4", "balls-27"], ["conj:and", "balls-21", "balls-27"], ["case", "bin-29", "in-28"], ["nmod:in", "balls-27", "bin-29"], ["nummod", "bin-29", "1-30"], ["cc", "balls-21", "and-32"], ["nummod", "balls-34", "0-33"], ["ccomp", "suppose-4", "balls-34"], ["conj:and", "balls-21", "balls-34"], ["case", "bin-36", "in-35"], ["nmod:in", "balls-34", "bin-36"], ["nummod", "bin-36", "2-37"]], [[]]], " Two variants are considered different if string input_array1 is inserted in different places.\n": [[["nummod", "variants-2", "Two-1"], ["nsubjpass", "considered-4", "variants-2"], ["auxpass", "considered-4", "are-3"], ["root", "ROOT-0", "considered-4"], ["xcomp", "considered-4", "different-5"], ["mark", "inserted-10", "if-6"], ["compound", "input_array1-8", "string-7"], ["nsubjpass", "inserted-10", "input_array1-8"], ["auxpass", "inserted-10", "is-9"], ["advcl", "considered-4", "inserted-10"], ["case", "places-13", "in-11"], ["amod", "places-13", "different-12"], ["nmod:in", "inserted-10", "places-13"]], [[]]], "If the two infinite strings are equal, return \"Equal\".": [[["mark", "equal-7", "If-1"], ["det", "strings-5", "the-2"], ["num", "strings-5", "two-3"], ["amod", "strings-5", "infinite-4"], ["nsubj", "equal-7", "strings-5"], ["cop", "equal-7", "are-6"], ["advcl", "Equal-11", "equal-7"], ["nsubj", "Equal-11", "return-9"], ["root", "ROOT-0", "Equal-11"]], [[]]], " e.g., the input_array \"11010\" and \"01100\" differ at the first, third and fourth positions, so they have a Hamming distance of 3.\n": [[["advmod", "differ-12", "e.g.-1"], ["det", "input_array-4", "the-3"], ["nsubj", "differ-12", "input_array-4"], ["amod", "input_array-4", "11010-6"], ["conj:and", "01100-10", "11010-6"], ["cc", "01100-10", "and-8"], ["amod", "input_array-4", "01100-10"], ["root", "ROOT-0", "differ-12"], ["case", "positions-20", "at-13"], ["det", "positions-20", "the-14"], ["amod", "positions-20", "first-15"], ["conj:and", "first-15", "third-17"], ["amod", "positions-20", "third-17"], ["cc", "first-15", "and-18"], ["conj:and", "first-15", "fourth-19"], ["amod", "positions-20", "fourth-19"], ["nmod:at", "differ-12", "positions-20"], ["mark", "have-24", "so-22"], ["nsubj", "have-24", "they-23"], ["advcl", "differ-12", "have-24"], ["det", "distance-27", "a-25"], ["compound", "distance-27", "Hamming-26"], ["dobj", "have-24", "distance-27"], ["case", "3-29", "of-28"], ["nmod:of", "distance-27", "3-29"]], [[]]], "(I.e., k must be between 1 and N-1, inclusive.)": [[["nn", "k-4", "I.e.-2"], ["nsubj", "1-8", "k-4"], ["aux", "1-8", "must-5"], ["cop", "1-8", "be-6"], ["amod", "1-8", "between-7"], ["root", "ROOT-0", "1-8"], ["conj_and", "1-8", "N-1-10"], ["advmod", "1-8", "inclusive-12"]], [[]]], " One nice statistic is the average word length in the input_array.\n": [[["nummod", "statistic-3", "One-1"], ["amod", "statistic-3", "nice-2"], ["nsubj", "length-8", "statistic-3"], ["cop", "length-8", "is-4"], ["det", "length-8", "the-5"], ["amod", "length-8", "average-6"], ["compound", "length-8", "word-7"], ["root", "ROOT-0", "length-8"], ["case", "input_array-11", "in-9"], ["det", "input_array-11", "the-10"], ["nmod:in", "length-8", "input_array-11"]], [[]]], " You just came to visit Gogo.\n": [[["nsubj", "came-3", "You-1"], ["nsubj", "visit-5", "You-1"], ["advmod", "came-3", "just-2"], ["root", "ROOT-0", "came-3"], ["mark", "visit-5", "to-4"], ["xcomp", "came-3", "visit-5"], ["dobj", "visit-5", "Gogo-6"]], [[]]], "A palindromic string is a string that reads the same both forwards and backwards.": [[["det", "string-3", "A-1"], ["amod", "string-3", "palindromic-2"], ["nsubj", "string-6", "string-3"], ["cop", "string-6", "is-4"], ["det", "string-6", "a-5"], ["root", "ROOT-0", "string-6"], ["nsubj", "reads-8", "string-6"], ["rcmod", "string-6", "reads-8"], ["det", "same-10", "the-9"], ["dobj", "reads-8", "same-10"], ["preconj", "forwards-12", "both-11"], ["advmod", "reads-8", "forwards-12"], ["advmod", "reads-8", "backwards-14"], ["conj_and", "forwards-12", "backwards-14"]], [[]]], " You are allowed to swap one pair of digits in the given number.\n": [[["nsubjpass", "allowed-3", "You-1"], ["nsubj", "swap-5", "You-1"], ["auxpass", "allowed-3", "are-2"], ["root", "ROOT-0", "allowed-3"], ["mark", "swap-5", "to-4"], ["xcomp", "allowed-3", "swap-5"], ["nummod", "pair-7", "one-6"], ["dobj", "swap-5", "pair-7"], ["case", "digits-9", "of-8"], ["nmod:of", "pair-7", "digits-9"], ["case", "number-13", "in-10"], ["det", "number-13", "the-11"], ["amod", "number-13", "given-12"], ["nmod:in", "digits-9", "number-13"]], [[]]], " You are given three integers: input_int0, input_int1 and input_int2.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["nummod", "integers-5", "three-4"], ["dobj", "given-3", "integers-5"], ["amod", "integers-5", "input_int0-7"], ["amod", "integers-5", "input_int1-9"], ["conj:and", "input_int0-7", "input_int1-9"], ["cc", "input_int0-7", "and-10"], ["amod", "integers-5", "input_int2-11"], ["conj:and", "input_int0-7", "input_int2-11"]], [[]]], "Return the total number of stars Ciel has at the moment.": [[["det", "number-4", "the-2"], ["amod", "number-4", "total-3"], ["prep_return", "at-9", "number-4"], ["prep_of", "number-4", "stars-6"], ["nsubj", "at-9", "Ciel-7"], ["aux", "at-9", "has-8"], ["root", "ROOT-0", "at-9"], ["det", "moment-11", "the-10"], ["pobj", "at-9", "moment-11"]], [[]]], " Each of those characters is either '.' (representing an empty cell) or 'o' (representing a cell with Jiro's piece).\n": [[["nsubj", "is-5", "Each-1"], ["case", "characters-4", "of-2"], ["det", "characters-4", "those-3"], ["nmod:of", "Each-1", "characters-4"], ["root", "ROOT-0", "is-5"], ["advmod", "is-5", "either-6"]], [["dep", "cell-5", "representing-2"], ["advmod", "cell-5", "an-3"], ["advmod", "cell-5", "empty-4"], ["root", "ROOT-0", "cell-5"], ["cc", "cell-5", "or-7"], ["conj:or", "cell-5", "o-9"], ["dep", "o-9", "representing-12"], ["det", "cell-14", "a-13"], ["dobj", "representing-12", "cell-14"], ["case", "piece-18", "with-15"], ["nmod:poss", "piece-18", "Jiro-16"], ["case", "Jiro-16", "'s-17"], ["nmod:with", "representing-12", "piece-18"]], [[]]], "According to Alice, a ribbon that connects two stars with different colors is beautiful, while a ribbon that connects two same-colored stars is not.": [[["prepc_according_to", "beautiful-15", "to-2"], ["pobj", "beautiful-15", "Alice-3"], ["det", "ribbon-6", "a-5"], ["nsubj", "connects-8", "ribbon-6"], ["nsubj", "beautiful-15", "ribbon-6"], ["rcmod", "ribbon-6", "connects-8"], ["num", "stars-10", "two-9"], ["dobj", "connects-8", "stars-10"], ["amod", "colors-13", "different-12"], ["prep_with", "stars-10", "colors-13"], ["cop", "beautiful-15", "is-14"], ["root", "ROOT-0", "beautiful-15"], ["mark", "is-25", "while-17"], ["det", "ribbon-19", "a-18"], ["nsubj", "connects-21", "ribbon-19"], ["nsubj", "is-25", "ribbon-19"], ["rcmod", "ribbon-19", "connects-21"], ["num", "stars-24", "two-22"], ["amod", "stars-24", "same-colored-23"], ["dobj", "connects-21", "stars-24"], ["advcl", "beautiful-15", "is-25"], ["neg", "is-25", "not-26"]], [[]]], " Return the input_int -th term (indexed from 0) in this sequence.\n": [[["root", "ROOT-0", "Return-1"], ["det", "input_int-3", "the-2"], ["dep", "Return-1", "input_int-3"], ["compound", "term-6", "th-5"], ["dep", "Return-1", "term-6"], ["dep", "term-6", "indexed-8"], ["case", "0-10", "from-9"], ["nmod:from", "indexed-8", "0-10"], ["case", "sequence-14", "in-12"], ["det", "sequence-14", "this-13"], ["nmod:in", "term-6", "sequence-14"]], [[]]], " Return \"found\" (quotes for clarity) if there are five such cells anywhere on the input_array. Otherwise, return \"not found\".\n": [[["root", "ROOT-0", "Return-1"], ["xcomp", "Return-1", "found-3"], ["dep", "Return-1", "quotes-6"], ["case", "clarity-8", "for-7"], ["nmod:for", "quotes-6", "clarity-8"], ["mark", "are-12", "if-10"], ["expl", "are-12", "there-11"], ["advcl", "Return-1", "are-12"], ["nummod", "cells-15", "five-13"], ["amod", "cells-15", "such-14"], ["nmod:npmod", "anywhere-16", "cells-15"], ["advmod", "are-12", "anywhere-16"], ["case", "input_array-19", "on-17"], ["det", "input_array-19", "the-18"], ["nmod:on", "are-12", "input_array-19"]], [["advmod", "return-3", "Otherwise-1"], ["root", "ROOT-0", "return-3"], ["neg", "found-6", "not-5"], ["xcomp", "return-3", "found-6"]], [[]]], " represents an empty section.\n": [[["root", "ROOT-0", "represents-1"], ["det", "section-4", "an-2"], ["amod", "section-4", "empty-3"], ["dobj", "represents-1", "section-4"]], [[]]], "Given a String input_array , return the average word length in it.": [[["prep", "return-6", "Given-1"], ["det", "input_array-4", "a-2"], ["nn", "input_array-4", "String-3"], ["pobj", "Given-1", "input_array-4"], ["root", "ROOT-0", "return-6"], ["det", "length-10", "the-7"], ["amod", "length-10", "average-8"], ["nn", "length-10", "word-9"], ["dobj", "return-6", "length-10"], ["prep_in", "return-6", "it-12"]], [[]]], " Josh loves playing with blocks.\n": [[["nsubj", "loves-2", "Josh-1"], ["root", "ROOT-0", "loves-2"], ["xcomp", "loves-2", "playing-3"], ["case", "blocks-5", "with-4"], ["nmod:with", "playing-3", "blocks-5"]], [[]]], " Return the total number of stars Ciel has at the moment.\n": [[["case", "number-4", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "total-3"], ["nmod:return", "moment-11", "number-4"], ["case", "stars-6", "of-5"], ["nmod:of", "number-4", "stars-6"], ["nsubj", "moment-11", "Ciel-7"], ["aux", "moment-11", "has-8"], ["case", "moment-11", "at-9"], ["det", "moment-11", "the-10"], ["root", "ROOT-0", "moment-11"]], [[]]], " In the previous example Arthur would have to pay 8 dollars.\n": [[["case", "example-4", "In-1"], ["det", "example-4", "the-2"], ["amod", "example-4", "previous-3"], ["nmod:in", "have-7", "example-4"], ["nsubj", "have-7", "Arthur-5"], ["nsubj", "pay-9", "Arthur-5"], ["aux", "have-7", "would-6"], ["root", "ROOT-0", "have-7"], ["mark", "pay-9", "to-8"], ["xcomp", "have-7", "pay-9"], ["nummod", "dollars-11", "8-10"], ["dobj", "pay-9", "dollars-11"]], [[]]], " \", there are 5 words: \"This\", \"is\", \"div\", \"easy\", and \"problem\".\n": [[["advmod", "is-13", "there-3"], ["cop", "words-6", "are-4"], ["nummod", "words-6", "5-5"], ["ccomp", "is-13", "words-6"], ["dep", "words-6", "This-9"], ["dep", "div-17", "is-13"], ["ccomp", "easy-21", "div-17"], ["root", "ROOT-0", "easy-21"], ["case", "problem-26", "and-24"], ["dep", "easy-21", "problem-26"]], [[]]], " He has a lovely picture of the local mountain range.\n": [[["nsubj", "has-2", "He-1"], ["root", "ROOT-0", "has-2"], ["det", "picture-5", "a-3"], ["amod", "picture-5", "lovely-4"], ["dobj", "has-2", "picture-5"], ["case", "range-10", "of-6"], ["det", "range-10", "the-7"], ["amod", "range-10", "local-8"], ["compound", "range-10", "mountain-9"], ["nmod:of", "picture-5", "range-10"]], [[]]], " The input_array is a grid of square 1x1 cells, and each cell is occupied by either matter or antimatter.\n": [[["det", "input_array-2", "The-1"], ["nsubj", "grid-5", "input_array-2"], ["cop", "grid-5", "is-3"], ["det", "grid-5", "a-4"], ["root", "ROOT-0", "grid-5"], ["case", "cells-9", "of-6"], ["amod", "cells-9", "square-7"], ["amod", "cells-9", "1x1-8"], ["nmod:of", "grid-5", "cells-9"], ["cc", "grid-5", "and-11"], ["det", "cell-13", "each-12"], ["nsubjpass", "occupied-15", "cell-13"], ["auxpass", "occupied-15", "is-14"], ["conj:and", "grid-5", "occupied-15"], ["case", "matter-18", "by-16"], ["cc:preconj", "matter-18", "either-17"], ["nmod:by", "occupied-15", "matter-18"], ["cc", "matter-18", "or-19"], ["nmod:by", "occupied-15", "antimatter-20"], ["conj:or", "matter-18", "antimatter-20"]], [[]]], " After the first letter 'a'.\n": [[["case", "letter-4", "After-1"], ["det", "letter-4", "the-2"], ["amod", "letter-4", "first-3"], ["root", "ROOT-0", "letter-4"], ["dep", "letter-4", "a-6"]], [[]]], " He wants to know if it's possible to buy a single lottery ticket without getting any change back.\n": [[["nsubj", "wants-2", "He-1"], ["nsubj", "know-4", "He-1"], ["root", "ROOT-0", "wants-2"], ["mark", "know-4", "to-3"], ["xcomp", "wants-2", "know-4"], ["mark", "possible-8", "if-5"], ["nsubj", "possible-8", "it-6"], ["nsubj", "buy-10", "it-6"], ["cop", "possible-8", "'s-7"], ["advcl", "know-4", "possible-8"], ["mark", "buy-10", "to-9"], ["xcomp", "possible-8", "buy-10"], ["det", "ticket-14", "a-11"], ["amod", "ticket-14", "single-12"], ["compound", "ticket-14", "lottery-13"], ["dobj", "buy-10", "ticket-14"], ["mark", "getting-16", "without-15"], ["advcl", "buy-10", "getting-16"], ["det", "change-18", "any-17"], ["dobj", "getting-16", "change-18"], ["advmod", "getting-16", "back-19"]], [[]]], "Return \"Possible\" (quotes for clarity) if input_array1 can be obtained from input_array0 by erasing exactly one character.": [[["nn", "Possible-3", "Return-1"], ["root", "ROOT-0", "Possible-3"], ["dep", "Possible-3", "quotes-6"], ["prep_for", "quotes-6", "clarity-8"], ["mark", "obtained-14", "if-10"], ["nsubjpass", "obtained-14", "input_array1-11"], ["aux", "obtained-14", "can-12"], ["auxpass", "obtained-14", "be-13"], ["dep", "Possible-3", "obtained-14"], ["prep_from", "obtained-14", "input_array0-16"], ["agent", "obtained-14", "erasing-18"], ["advmod", "character-21", "exactly-19"], ["num", "character-21", "one-20"], ["dobj", "erasing-18", "character-21"]], [[]]], " Gogo would rearrange the balls to obtain input_array = {0, 2, 5}.\n": [[["nsubj", "rearrange-3", "Gogo-1"], ["aux", "rearrange-3", "would-2"], ["root", "ROOT-0", "rearrange-3"], ["det", "balls-5", "the-4"], ["dobj", "rearrange-3", "balls-5"], ["nsubj", "obtain-7", "balls-5"], ["mark", "obtain-7", "to-6"], ["xcomp", "rearrange-3", "obtain-7"], ["amod", "=-9", "input_array-8"], ["dobj", "obtain-7", "=-9"], ["appos", "=-9", "0-11"], ["dep", "0-11", "2-13"], ["dep", "0-11", "5-15"]], [[]]], "Your method should return the maximum number of consecutive competitions with positive rating changes.": [[["poss", "method-2", "Your-1"], ["nsubj", "return-4", "method-2"], ["aux", "return-4", "should-3"], ["root", "ROOT-0", "return-4"], ["det", "number-7", "the-5"], ["amod", "number-7", "maximum-6"], ["dobj", "return-4", "number-7"], ["amod", "competitions-10", "consecutive-9"], ["prep_of", "number-7", "competitions-10"], ["amod", "changes-14", "positive-12"], ["nn", "changes-14", "rating-13"], ["prep_with", "return-4", "changes-14"]], [[]]], " Little Dazdraperma likes palindromes a lot.\n": [[["compound", "Dazdraperma-2", "Little-1"], ["nsubj", "likes-3", "Dazdraperma-2"], ["root", "ROOT-0", "likes-3"], ["dobj", "likes-3", "palindromes-4"], ["det", "lot-6", "a-5"], ["dep", "palindromes-4", "lot-6"]], [[]]], " Return the number of input_array remaining after the procedure described above is performed.\n": [[["csubjpass", "performed-13", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["mark", "remaining-6", "of-4"], ["advmod", "remaining-6", "input_array-5"], ["acl", "number-3", "remaining-6"], ["mark", "described-10", "after-7"], ["det", "procedure-9", "the-8"], ["nsubj", "described-10", "procedure-9"], ["advcl", "remaining-6", "described-10"], ["advmod", "described-10", "above-11"], ["auxpass", "performed-13", "is-12"], ["root", "ROOT-0", "performed-13"]], [[]]], " Iris also likes semi-squares.\n": [[["nsubj", "likes-3", "Iris-1"], ["advmod", "likes-3", "also-2"], ["root", "ROOT-0", "likes-3"], ["dobj", "likes-3", "semi-squares-4"]], [[]]], " Josh is interested in making the tallest block tower possible.\n": [[["nsubj", "interested-3", "Josh-1"], ["cop", "interested-3", "is-2"], ["root", "ROOT-0", "interested-3"], ["mark", "making-5", "in-4"], ["advcl", "interested-3", "making-5"], ["det", "tower-9", "the-6"], ["amod", "tower-9", "tallest-7"], ["compound", "tower-9", "block-8"], ["nsubj", "possible-10", "tower-9"], ["xcomp", "making-5", "possible-10"]], [[]]], " Value = (Alphabet Position) + (Element of input) + (Position in Element)\n": [[["compound", "+-7", "Value-1"], ["compound", "+-7", "=-2"], ["compound", "Position-5", "Alphabet-4"], ["appos", "+-7", "Position-5"], ["nsubj", "+-13", "+-7"], ["dep", "+-7", "Element-9"], ["case", "input-11", "of-10"], ["nmod:of", "Element-9", "input-11"], ["root", "ROOT-0", "+-13"], ["dep", "+-13", "Position-15"], ["case", "Element-17", "in-16"], ["nmod:in", "Position-15", "Element-17"]], [[]]], " The game has multiple stages, and for each stage the player can gain between 0 and 3 stars, inclusive.\n": [[["det", "game-2", "The-1"], ["nsubj", "has-3", "game-2"], ["root", "ROOT-0", "has-3"], ["amod", "stages-5", "multiple-4"], ["dobj", "has-3", "stages-5"], ["cc", "has-3", "and-7"], ["case", "stage-10", "for-8"], ["det", "stage-10", "each-9"], ["nmod:for", "gain-14", "stage-10"], ["det", "player-12", "the-11"], ["nsubj", "gain-14", "player-12"], ["aux", "gain-14", "can-13"], ["conj:and", "has-3", "gain-14"], ["case", "stars-19", "between-15"], ["compound", "stars-19", "0-16"], ["cc", "0-16", "and-17"], ["conj:and", "0-16", "3-18"], ["compound", "stars-19", "3-18"], ["nmod:between", "gain-14", "stars-19"], ["xcomp", "gain-14", "inclusive-21"]], [[]]], "Then, if the remaining baskets do not all contain the same number of input_array, we remove excess input_array from the baskets until they do.": [[["advmod", "remove-18", "Then-1"], ["mark", "contain-10", "if-3"], ["det", "baskets-6", "the-4"], ["amod", "baskets-6", "remaining-5"], ["nsubj", "contain-10", "baskets-6"], ["aux", "contain-10", "do-7"], ["neg", "contain-10", "not-8"], ["advmod", "contain-10", "all-9"], ["parataxis", "remove-18", "contain-10"], ["det", "number-13", "the-11"], ["amod", "number-13", "same-12"], ["dobj", "contain-10", "number-13"], ["prep_of", "number-13", "input_array-15"], ["nsubj", "remove-18", "we-17"], ["root", "ROOT-0", "remove-18"], ["amod", "input_array-20", "excess-19"], ["dobj", "remove-18", "input_array-20"], ["det", "baskets-23", "the-22"], ["prep_from", "remove-18", "baskets-23"], ["mark", "do-26", "until-24"], ["nsubj", "do-26", "they-25"], ["advcl", "remove-18", "do-26"]], [[]]], " For example, the difference between the words \"ant\" and \"art\" is 1.\n": [[["case", "example-2", "For-1"], ["nmod:for", "1-17", "example-2"], ["det", "difference-5", "the-4"], ["nsubj", "1-17", "difference-5"], ["case", "ant-10", "between-6"], ["det", "ant-10", "the-7"], ["compound", "ant-10", "words-8"], ["nmod:between", "difference-5", "ant-10"], ["cc", "ant-10", "and-12"], ["nmod:between", "difference-5", "art-14"], ["conj:and", "ant-10", "art-14"], ["cop", "1-17", "is-16"], ["root", "ROOT-0", "1-17"]], [[]]], "Return \"POSSIBLE\" if it is possible or \"IMPOSSIBLE\" if it is not (all quotes for clarity).": [[["advmod", "POSSIBLE-3", "Return-1"], ["root", "ROOT-0", "POSSIBLE-3"], ["mark", "possible-8", "if-5"], ["nsubj", "possible-8", "it-6"], ["nsubj", "IMPOSSIBLE-11", "it-6"], ["cop", "possible-8", "is-7"], ["dep", "POSSIBLE-3", "possible-8"], ["dep", "POSSIBLE-3", "IMPOSSIBLE-11"], ["conj_or", "possible-8", "IMPOSSIBLE-11"], ["mark", "is-15", "if-13"], ["nsubj", "is-15", "it-14"], ["advcl", "possible-8", "is-15"], ["neg", "is-15", "not-16"], ["nsubj", "quotes-19", "all-18"], ["parataxis", "possible-8", "quotes-19"], ["prep_for", "quotes-19", "clarity-21"]], [[]]], "Advancing time in cellar i will gain Gogo a input_array0 of input_array0 [i].": [[["amod", "time-2", "Advancing-1"], ["nsubj", "gain-7", "time-2"], ["nn", "i-5", "cellar-4"], ["prep_in", "time-2", "i-5"], ["aux", "gain-7", "will-6"], ["root", "ROOT-0", "gain-7"], ["nsubj", "input_array0-10", "Gogo-8"], ["det", "input_array0-10", "a-9"], ["xcomp", "gain-7", "input_array0-10"], ["nn", "-RSB--15", "input_array0-12"], ["nn", "-RSB--15", "-LSB--13"], ["nn", "-RSB--15", "i-14"], ["prep_of", "input_array0-10", "-RSB--15"]], [[]]], " The j-th character of the i-th element of input_array is '1' (one) if player i defeated player j, '0' (zero) if player j defeated player i, or '-' if the match between players i and j resulted in a draw.\n": [[["det", "character-3", "The-1"], ["amod", "character-3", "j-th-2"], ["nsubj", "0-25", "character-3"], ["case", "element-7", "of-4"], ["det", "element-7", "the-5"], ["amod", "element-7", "i-th-6"], ["nmod:of", "character-3", "element-7"], ["case", "input_array-9", "of-8"], ["nmod:of", "element-7", "input_array-9"], ["cop", "0-25", "is-10"], ["nmod:poss", "0-25", "1-12"], ["case", "1-12", "'-13"], ["amod", "0-25", "one-15"], ["mark", "defeated-20", "if-17"], ["compound", "i-19", "player-18"], ["nsubj", "defeated-20", "i-19"], ["ccomp", "one-15", "defeated-20"], ["compound", "j-22", "player-21"], ["dobj", "defeated-20", "j-22"], ["root", "ROOT-0", "0-25"], ["appos", "0-25", "zero-28"], ["mark", "defeated-33", "if-30"], ["compound", "j-32", "player-31"], ["nsubj", "defeated-33", "j-32"], ["dep", "0-25", "defeated-33"], ["compound", "i-35", "player-34"], ["dobj", "defeated-33", "i-35"], ["cc", "0-25", "or-37"], ["case", "match-43", "if-41"], ["det", "match-43", "the-42"], ["advmod", "0-25", "match-43"], ["case", "i-46", "between-44"], ["compound", "i-46", "players-45"], ["nmod:between", "match-43", "i-46"], ["cc", "i-46", "and-47"], ["nmod:between", "match-43", "j-48"], ["conj:and", "i-46", "j-48"], ["dep", "0-25", "resulted-49"], ["case", "draw-52", "in-50"], ["det", "draw-52", "a-51"], ["nmod:in", "resulted-49", "draw-52"]], [[]]], " Can this be the string created from your string input_array0 ?\n": [[["aux", "string-5", "Can-1"], ["nsubj", "string-5", "this-2"], ["cop", "string-5", "be-3"], ["det", "string-5", "the-4"], ["root", "ROOT-0", "string-5"], ["acl", "string-5", "created-6"], ["case", "input_array0-10", "from-7"], ["nmod:poss", "input_array0-10", "your-8"], ["compound", "input_array0-10", "string-9"], ["nmod:from", "created-6", "input_array0-10"]], [[]]], " input_array0 palindrome is a string that is the same whether it is read from left to right or from right to left.\n": [[["amod", "palindrome-2", "input_array0-1"], ["nsubj", "string-5", "palindrome-2"], ["cop", "string-5", "is-3"], ["det", "string-5", "a-4"], ["root", "ROOT-0", "string-5"], ["nsubj", "same-9", "string-5"], ["ref", "string-5", "that-6"], ["cop", "same-9", "is-7"], ["det", "same-9", "the-8"], ["acl:relcl", "string-5", "same-9"], ["mark", "read-13", "whether-10"], ["nsubjpass", "read-13", "it-11"], ["nsubjpass", "read-13", "it-11"], ["auxpass", "read-13", "is-12"], ["ccomp", "same-9", "read-13"], ["ccomp", "same-9", "read-13"], ["conj:or", "read-13", "read-13"], ["case", "left-15", "from-14"], ["nmod:from", "read-13", "left-15"], ["case", "right-17", "to-16"], ["nmod:to", "read-13", "right-17"], ["cc", "read-13", "or-18"], ["case", "right-20", "from-19"], ["nmod:from", "read-13", "right-20"], ["case", "left-22", "to-21"], ["nmod:to", "read-13", "left-22"]], [[]]], " Return the number of far from primes numbers between input_int1 and input_int2, inclusive.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["case", "numbers-8", "of-4"], ["amod", "numbers-8", "far-5"], ["case", "primes-7", "from-6"], ["nmod:from", "far-5", "primes-7"], ["nmod:of", "number-3", "numbers-8"], ["case", "input_int1-10", "between-9"], ["nmod:between", "numbers-8", "input_int1-10"], ["cc", "input_int1-10", "and-11"], ["nmod:between", "numbers-8", "input_int2-12"], ["conj:and", "input_int1-10", "input_int2-12"], ["dep", "Return-1", "inclusive-14"]], [[]]], " The value of each character in input is computed as follows:\n": [[["det", "value-2", "The-1"], ["nsubjpass", "computed-9", "value-2"], ["case", "character-5", "of-3"], ["det", "character-5", "each-4"], ["nmod:of", "value-2", "character-5"], ["case", "input-7", "in-6"], ["nmod:in", "character-5", "input-7"], ["auxpass", "computed-9", "is-8"], ["root", "ROOT-0", "computed-9"], ["mark", "follows-11", "as-10"], ["advcl", "computed-9", "follows-11"]], [[]]], " The mountain range in the picture can be seen as a sequence of input_array.\n": [[["det", "range-3", "The-1"], ["compound", "range-3", "mountain-2"], ["nsubjpass", "seen-9", "range-3"], ["case", "picture-6", "in-4"], ["det", "picture-6", "the-5"], ["nmod:in", "range-3", "picture-6"], ["aux", "seen-9", "can-7"], ["auxpass", "seen-9", "be-8"], ["root", "ROOT-0", "seen-9"], ["case", "sequence-12", "as-10"], ["det", "sequence-12", "a-11"], ["nmod:as", "seen-9", "sequence-12"], ["case", "input_array-14", "of-13"], ["nmod:of", "sequence-12", "input_array-14"]], [[]]], "More precisely, input_array[i] will be \"---\" if she got 0 stars in stage i, \"o--\" if she got 1 star, \"oo-\" if she got 2 stars and \"ooo\" if she managed to get all 3 stars.": [[["advmod", "precisely-2", "More-1"], ["ccomp", "be-9", "precisely-2"], ["amod", "-RSB--7", "input_array-4"], ["nn", "-RSB--7", "-LSB--5"], ["nn", "-RSB--7", "i-6"], ["nsubj", "be-9", "-RSB--7"], ["aux", "be-9", "will-8"], ["root", "ROOT-0", "be-9"], ["mark", "got-15", "if-13"], ["nsubj", "got-15", "she-14"], ["dep", "be-9", "got-15"], ["num", "stars-17", "0-16"], ["dobj", "got-15", "stars-17"], ["prep", "stars-17", "in-18"], ["dep", "in-18", "stage-19"], ["dobj", "stage-19", "i-20"], ["dep", "i-20", "o-23"], ["mark", "got-28", "if-26"], ["nsubj", "got-28", "she-27"], ["advcl", "stage-19", "got-28"], ["num", "star-30", "1-29"], ["dobj", "got-28", "star-30"], ["dep", "star-30", "oo-33"], ["mark", "got-38", "if-36"], ["nsubj", "got-38", "she-37"], ["advcl", "stage-19", "got-38"], ["num", "stars-40", "2-39"], ["dobj", "got-38", "stars-40"], ["dobj", "got-38", "ooo-43"], ["conj_and", "stars-40", "ooo-43"], ["mark", "managed-47", "if-45"], ["nsubj", "managed-47", "she-46"], ["nsubj", "get-49", "she-46"], ["advcl", "got-38", "managed-47"], ["aux", "get-49", "to-48"], ["xcomp", "managed-47", "get-49"], ["quantmod", "3-51", "all-50"], ["num", "stars-52", "3-51"], ["dobj", "get-49", "stars-52"]], [[]]], "For each letter input_array[i], let k[i] be the number of letters in input_array that are less than or equal to input_array[i], including input_array[i] itself.": [[["det", "-RSB--7", "each-2"], ["nn", "-RSB--7", "letter-3"], ["nn", "-RSB--7", "input_array-4"], ["nn", "-RSB--7", "-LSB--5"], ["nn", "-RSB--7", "i-6"], ["prep_for", "let-9", "-RSB--7"], ["root", "ROOT-0", "let-9"], ["nn", "-RSB--13", "k-10"], ["nn", "-RSB--13", "-LSB--11"], ["nn", "-RSB--13", "i-12"], ["nsubj", "number-16", "-RSB--13"], ["nsubj", "equal-26", "-RSB--13"], ["cop", "number-16", "be-14"], ["det", "number-16", "the-15"], ["ccomp", "let-9", "number-16"], ["nsubj", "are-22", "number-16"], ["prep_of", "number-16", "letters-18"], ["prep_in", "letters-18", "input_array-20"], ["rcmod", "number-16", "are-22"], ["advmod", "than-24", "less-23"], ["advmod", "are-22", "than-24"], ["ccomp", "let-9", "equal-26"], ["conj_or", "number-16", "equal-26"], ["nsubj", "are-22", "equal-26"], ["aux", "input_array-28", "to-27"], ["xcomp", "equal-26", "input_array-28"], ["nn", "-RSB--31", "-LSB--29"], ["nn", "-RSB--31", "i-30"], ["dobj", "input_array-28", "-RSB--31"], ["nn", "-RSB--37", "input_array-34"], ["nn", "-RSB--37", "-LSB--35"], ["nn", "-RSB--37", "i-36"], ["prep_including", "-RSB--31", "-RSB--37"], ["dobj", "equal-26", "itself-38"], ["nsubj", "input_array-28", "itself-38"]], [[]]], " It is guaranteed that this input_array0 will be positive.\n": [[["nsubjpass", "guaranteed-3", "It-1"], ["auxpass", "guaranteed-3", "is-2"], ["root", "ROOT-0", "guaranteed-3"], ["mark", "positive-9", "that-4"], ["det", "input_array0-6", "this-5"], ["nsubj", "positive-9", "input_array0-6"], ["aux", "positive-9", "will-7"], ["cop", "positive-9", "be-8"], ["ccomp", "guaranteed-3", "positive-9"]], [[]]], " Return the integer X between input_int0 and input_int1, inclusive, such that the absolute difference between the digit sum of X and the digit sum of input_int2 is as small as possible.\n": [[["nsubj", "small-31", "Return-1"], ["det", "X-4", "the-2"], ["compound", "X-4", "integer-3"], ["dep", "Return-1", "X-4"], ["case", "input_int0-6", "between-5"], ["nmod:between", "X-4", "input_int0-6"], ["cc", "input_int0-6", "and-7"], ["nmod:between", "X-4", "input_int1-8"], ["conj:and", "input_int0-6", "input_int1-8"], ["dep", "Return-1", "inclusive-10"], ["conj:and", "X-4", "inclusive-10"], ["dep", "difference-16", "such-12"], ["case", "difference-16", "that-13"], ["det", "difference-16", "the-14"], ["amod", "difference-16", "absolute-15"], ["dep", "Return-1", "difference-16"], ["conj:and", "X-4", "difference-16"], ["case", "sum-20", "between-17"], ["det", "sum-20", "the-18"], ["amod", "sum-20", "digit-19"], ["nmod:between", "difference-16", "sum-20"], ["case", "X-22", "of-21"], ["nmod:of", "sum-20", "X-22"], ["cc", "X-4", "and-23"], ["det", "sum-26", "the-24"], ["amod", "sum-26", "digit-25"], ["dep", "Return-1", "sum-26"], ["conj:and", "X-4", "sum-26"], ["case", "input_int2-28", "of-27"], ["nmod:of", "sum-26", "input_int2-28"], ["cop", "small-31", "is-29"], ["advmod", "small-31", "as-30"], ["root", "ROOT-0", "small-31"], ["case", "possible-33", "as-32"], ["advcl:as", "small-31", "possible-33"]], [[]]], " Shiny has a company.\n": [[["nsubj", "has-2", "Shiny-1"], ["root", "ROOT-0", "has-2"], ["det", "company-4", "a-3"], ["dobj", "has-2", "company-4"]], [[]]], "Value = (Alphabet Position) + (Element of input) + (Position in Element)": [[["nn", "+-7", "Value-1"], ["nn", "+-7", "=-2"], ["nn", "Position-5", "Alphabet-4"], ["appos", "+-7", "Position-5"], ["nsubj", "+-13", "+-7"], ["dep", "+-7", "Element-9"], ["prep_of", "Element-9", "input-11"], ["root", "ROOT-0", "+-13"], ["dep", "+-13", "Position-15"], ["prep_in", "Position-15", "Element-17"]], [[]]], " However, as a side effect, he must also choose one other cellar and turn back time there, making the wine inside younger.\n": [[["advmod", "choose-11", "However-1"], ["case", "effect-6", "as-3"], ["det", "effect-6", "a-4"], ["compound", "effect-6", "side-5"], ["nmod:as", "choose-11", "effect-6"], ["nsubj", "choose-11", "he-8"], ["nsubj", "turn-16", "he-8"], ["aux", "choose-11", "must-9"], ["advmod", "choose-11", "also-10"], ["root", "ROOT-0", "choose-11"], ["nummod", "cellar-14", "one-12"], ["amod", "cellar-14", "other-13"], ["dobj", "choose-11", "cellar-14"], ["cc", "choose-11", "and-15"], ["conj:and", "choose-11", "turn-16"], ["compound:prt", "turn-16", "back-17"], ["dobj", "turn-16", "time-18"], ["advmod", "turn-16", "there-19"], ["advcl", "turn-16", "making-21"], ["det", "wine-23", "the-22"], ["dobj", "making-21", "wine-23"], ["case", "younger-25", "inside-24"], ["nmod:inside", "wine-23", "younger-25"]], [[]]], " Intuitively, a transition between two colors is called good if they are neither too similar, nor too different.\n": [[["advmod", "called-9", "Intuitively-1"], ["det", "transition-4", "a-3"], ["nsubjpass", "called-9", "transition-4"], ["case", "colors-7", "between-5"], ["nummod", "colors-7", "two-6"], ["nmod:between", "transition-4", "colors-7"], ["auxpass", "called-9", "is-8"], ["root", "ROOT-0", "called-9"], ["xcomp", "called-9", "good-10"], ["mark", "similar-16", "if-11"], ["nsubj", "similar-16", "they-12"], ["nsubj", "different-20", "they-12"], ["cop", "similar-16", "are-13"], ["cc:preconj", "similar-16", "neither-14"], ["advmod", "similar-16", "too-15"], ["advcl", "called-9", "similar-16"], ["cc", "similar-16", "nor-18"], ["advmod", "different-20", "too-19"], ["advcl", "called-9", "different-20"], ["conj:nor", "similar-16", "different-20"]], [[]]], " Every other employee has precisely one direct boss in the company.\n": [[["det", "employee-3", "Every-1"], ["amod", "employee-3", "other-2"], ["nsubj", "has-4", "employee-3"], ["root", "ROOT-0", "has-4"], ["advmod", "boss-8", "precisely-5"], ["nummod", "boss-8", "one-6"], ["amod", "boss-8", "direct-7"], ["dobj", "has-4", "boss-8"], ["case", "company-11", "in-9"], ["det", "company-11", "the-10"], ["nmod:in", "boss-8", "company-11"]], [[]]], " For example, when rearranging S = {2, 5, 0} to input_array = {0, 2, 5}, Gogo will make exactly 5 moves.\n": [[["case", "example-2", "For-1"], ["nmod:for", "make-28", "example-2"], ["advmod", "rearranging-5", "when-4"], ["advcl", "make-28", "rearranging-5"], ["compound", "=-7", "S-6"], ["dobj", "rearranging-5", "=-7"], ["appos", "=-7", "2-9"], ["dep", "2-9", "5-11"], ["dep", "2-9", "0-13"], ["case", "=-17", "to-15"], ["amod", "=-17", "input_array-16"], ["nmod:to", "rearranging-5", "=-17"], ["appos", "=-17", "0-19"], ["dep", "0-19", "2-21"], ["dep", "0-19", "5-23"], ["nsubj", "make-28", "Gogo-26"], ["aux", "make-28", "will-27"], ["root", "ROOT-0", "make-28"], ["advmod", "moves-31", "exactly-29"], ["nummod", "moves-31", "5-30"], ["dobj", "make-28", "moves-31"]], [[]]], " Moreover, you must fight the fairies in order: you can only attack fairy X+1 after you defeat fairy X.\n": [[["advmod", "fight-5", "Moreover-1"], ["nsubj", "fight-5", "you-3"], ["aux", "fight-5", "must-4"], ["root", "ROOT-0", "fight-5"], ["det", "fairies-7", "the-6"], ["dobj", "fight-5", "fairies-7"], ["advcl", "fight-5", "in-8"], ["mwe", "in-8", "order-9"], ["nsubj", "attack-14", "you-11"], ["aux", "attack-14", "can-12"], ["advmod", "attack-14", "only-13"], ["parataxis", "fight-5", "attack-14"], ["iobj", "attack-14", "fairy-15"], ["dobj", "attack-14", "X-16"], ["nummod", "X-16", "+1-17"], ["mark", "defeat-20", "after-18"], ["nsubj", "defeat-20", "you-19"], ["advcl", "attack-14", "defeat-20"], ["compound", "X.-22", "fairy-21"], ["dobj", "defeat-20", "X.-22"]], [[]]], " Recently he received one as a gift from his mother.\n": [[["advmod", "received-3", "Recently-1"], ["nsubj", "received-3", "he-2"], ["root", "ROOT-0", "received-3"], ["dobj", "received-3", "one-4"], ["case", "gift-7", "as-5"], ["det", "gift-7", "a-6"], ["nmod:as", "received-3", "gift-7"], ["case", "mother-10", "from-8"], ["nmod:poss", "mother-10", "his-9"], ["nmod:from", "received-3", "mother-10"]], [[]]], " Given two ints, input_int0 and input_int1, find the least common multiple of all the numbers between input_int0 and input_int1, inclusive.\n": [[["case", "ints-3", "Given-1"], ["nummod", "ints-3", "two-2"], ["nmod:given", "find-9", "ints-3"], ["conj:and", "ints-3", "input_int0-5"], ["nmod:given", "find-9", "input_int0-5"], ["cc", "ints-3", "and-6"], ["conj:and", "ints-3", "input_int1-7"], ["nmod:given", "find-9", "input_int1-7"], ["root", "ROOT-0", "find-9"], ["det", "multiple-13", "the-10"], ["dep", "common-12", "least-11"], ["amod", "multiple-13", "common-12"], ["dobj", "find-9", "multiple-13"], ["case", "numbers-17", "of-14"], ["det:predet", "numbers-17", "all-15"], ["det", "numbers-17", "the-16"], ["nmod:of", "multiple-13", "numbers-17"], ["case", "input_int0-19", "between-18"], ["nmod:between", "numbers-17", "input_int0-19"], ["cc", "input_int0-19", "and-20"], ["nmod:between", "numbers-17", "input_int1-21"], ["conj:and", "input_int0-19", "input_int1-21"], ["dep", "find-9", "inclusive-23"]], [[]]], " # Compute and return the smallest possible result after inserting the missing plus sign\n": [[["dep", "Compute-2", "#-1"], ["root", "ROOT-0", "Compute-2"], ["cc", "Compute-2", "and-3"], ["conj:and", "Compute-2", "return-4"], ["det", "result-8", "the-5"], ["amod", "result-8", "smallest-6"], ["amod", "result-8", "possible-7"], ["dep", "Compute-2", "result-8"], ["case", "inserting-10", "after-9"], ["nmod:after", "result-8", "inserting-10"], ["det", "sign-14", "the-11"], ["amod", "sign-14", "missing-12"], ["compound", "sign-14", "plus-13"], ["dep", "result-8", "sign-14"]], [[]]], "Then, the value of input_array is defined to be the sum of k[i] * val[input_array[i]] for all valid i.": [[["advmod", "defined-8", "Then-1"], ["det", "value-4", "the-3"], ["nsubjpass", "defined-8", "value-4"], ["nsubj", "sum-12", "value-4"], ["prep_of", "value-4", "input_array-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["aux", "sum-12", "to-9"], ["cop", "sum-12", "be-10"], ["det", "sum-12", "the-11"], ["xcomp", "defined-8", "sum-12"], ["nn", "-RSB--25", "k-14"], ["nn", "-RSB--25", "-LSB--15"], ["nn", "-RSB--25", "i-16"], ["nn", "-RSB--25", "-RSB--17"], ["amod", "-RSB--25", "*-18"], ["nn", "-RSB--25", "val-19"], ["nn", "-RSB--25", "-LSB--20"], ["nn", "-RSB--25", "input_array-21"], ["nn", "-RSB--25", "-LSB--22"], ["nn", "-RSB--25", "i-23"], ["nn", "-RSB--25", "-RSB--24"], ["prep_of", "sum-12", "-RSB--25"], ["det", "i.-29", "all-27"], ["amod", "i.-29", "valid-28"], ["prep_for", "sum-12", "i.-29"]], [[]]], "Now she is curious if there is a way to insert string input_array1 into string input_array0 so that the resulting string is a palindrome.": [[["advmod", "curious-4", "Now-1"], ["nsubj", "curious-4", "she-2"], ["cop", "curious-4", "is-3"], ["root", "ROOT-0", "curious-4"], ["mark", "is-7", "if-5"], ["expl", "is-7", "there-6"], ["advcl", "curious-4", "is-7"], ["det", "way-9", "a-8"], ["nsubj", "is-7", "way-9"], ["aux", "insert-11", "to-10"], ["vmod", "way-9", "insert-11"], ["nn", "input_array1-13", "string-12"], ["dobj", "insert-11", "input_array1-13"], ["nn", "input_array0-16", "string-15"], ["prep_into", "insert-11", "input_array0-16"], ["advmod", "palindrome-24", "so-17"], ["mark", "palindrome-24", "that-18"], ["det", "string-21", "the-19"], ["amod", "string-21", "resulting-20"], ["nsubj", "palindrome-24", "string-21"], ["cop", "palindrome-24", "is-22"], ["det", "palindrome-24", "a-23"], ["advcl", "insert-11", "palindrome-24"]], [[]]], " Fox Ciel is playing the popular game 'Cut the Rope' on her smartphone.\n": [[["compound", "Ciel-2", "Fox-1"], ["nsubj", "playing-4", "Ciel-2"], ["aux", "playing-4", "is-3"], ["root", "ROOT-0", "playing-4"], ["det", "game-7", "the-5"], ["amod", "game-7", "popular-6"], ["dobj", "playing-4", "game-7"], ["compound", "Rope-11", "Cut-9"], ["det", "Rope-11", "the-10"], ["dep", "game-7", "Rope-11"], ["case", "smartphone-15", "on-13"], ["nmod:poss", "smartphone-15", "her-14"], ["nmod:on", "playing-4", "smartphone-15"]], [[]]], " Return the number of different sequences Brus can obtain after he makes the swap.\n": [[["case", "number-3", "Return-1"], ["det", "number-3", "the-2"], ["nmod:return", "obtain-9", "number-3"], ["case", "sequences-6", "of-4"], ["amod", "sequences-6", "different-5"], ["nmod:of", "number-3", "sequences-6"], ["nsubj", "obtain-9", "Brus-7"], ["aux", "obtain-9", "can-8"], ["root", "ROOT-0", "obtain-9"], ["mark", "makes-12", "after-10"], ["nsubj", "makes-12", "he-11"], ["advcl", "obtain-9", "makes-12"], ["det", "swap-14", "the-13"], ["dobj", "makes-12", "swap-14"]], [[]]], " For example, if\n": [[["dep", "example-2", "For-1"], ["root", "ROOT-0", "example-2"], ["amod", "example-2", "if-4"]], [[]]], " To make the sequence look interesting, each pair of adjacent marbles must have different colors.\n": [[["mark", "make-2", "To-1"], ["advcl", "have-14", "make-2"], ["det", "sequence-4", "the-3"], ["nsubj", "look-5", "sequence-4"], ["ccomp", "make-2", "look-5"], ["xcomp", "look-5", "interesting-6"], ["det", "pair-9", "each-8"], ["nsubj", "have-14", "pair-9"], ["case", "marbles-12", "of-10"], ["amod", "marbles-12", "adjacent-11"], ["nmod:of", "pair-9", "marbles-12"], ["aux", "have-14", "must-13"], ["root", "ROOT-0", "have-14"], ["amod", "colors-16", "different-15"], ["dobj", "have-14", "colors-16"]], [[]]], " A tower is built by placing bricks one atop another.\n": [[["det", "tower-2", "A-1"], ["nsubjpass", "built-4", "tower-2"], ["auxpass", "built-4", "is-3"], ["root", "ROOT-0", "built-4"], ["mark", "placing-6", "by-5"], ["advcl", "built-4", "placing-6"], ["dobj", "placing-6", "bricks-7"], ["nummod", "bricks-7", "one-8"], ["case", "another-10", "atop-9"], ["nmod:atop", "bricks-7", "another-10"]], [[]]], " If there are multiple such states, return one with the lowest index in input_array.\n": [[["mark", "are-3", "If-1"], ["expl", "are-3", "there-2"], ["advcl", "return-8", "are-3"], ["amod", "states-6", "multiple-4"], ["amod", "states-6", "such-5"], ["nsubj", "are-3", "states-6"], ["root", "ROOT-0", "return-8"], ["dobj", "return-8", "one-9"], ["case", "index-13", "with-10"], ["det", "index-13", "the-11"], ["amod", "index-13", "lowest-12"], ["nmod:with", "return-8", "index-13"], ["case", "input_array-15", "in-14"], ["nmod:in", "index-13", "input_array-15"]], [[]]], "The least common multiple of a group of integers is the smallest number that can be evenly divided by all the integers in the group.": [[["det", "multiple-4", "The-1"], ["dep", "common-3", "least-2"], ["amod", "multiple-4", "common-3"], ["nsubj", "number-13", "multiple-4"], ["det", "group-7", "a-6"], ["prep_of", "multiple-4", "group-7"], ["prep_of", "group-7", "integers-9"], ["cop", "number-13", "is-10"], ["det", "number-13", "the-11"], ["amod", "number-13", "smallest-12"], ["root", "ROOT-0", "number-13"], ["nsubjpass", "divided-18", "number-13"], ["aux", "divided-18", "can-15"], ["auxpass", "divided-18", "be-16"], ["advmod", "divided-18", "evenly-17"], ["rcmod", "number-13", "divided-18"], ["predet", "integers-22", "all-20"], ["det", "integers-22", "the-21"], ["agent", "divided-18", "integers-22"], ["det", "group-25", "the-24"], ["prep_in", "integers-22", "group-25"]], [[]]], " For each employee, their boss joined the company before them.\n": [[["case", "employee-3", "For-1"], ["det", "employee-3", "each-2"], ["nmod:for", "joined-7", "employee-3"], ["nmod:poss", "boss-6", "their-5"], ["nsubj", "joined-7", "boss-6"], ["root", "ROOT-0", "joined-7"], ["det", "company-9", "the-8"], ["dobj", "joined-7", "company-9"], ["case", "them-11", "before-10"], ["nmod:before", "joined-7", "them-11"]], [[]]], " This morning, Gogo attended a lecture about sorting.\n": [[["det", "morning-2", "This-1"], ["nmod:tmod", "attended-5", "morning-2"], ["nsubj", "attended-5", "Gogo-4"], ["root", "ROOT-0", "attended-5"], ["det", "lecture-7", "a-6"], ["dobj", "attended-5", "lecture-7"], ["case", "sorting-9", "about-8"], ["nmod:about", "lecture-7", "sorting-9"]], [[]]], " Otherwise, return \"Impossible\".\n": [[["advmod", "return-3", "Otherwise-1"], ["root", "ROOT-0", "return-3"], ["xcomp", "return-3", "Impossible-5"]], [[]]], " You are given a String[] input_array, where the j-th character of the i-th element is 'A' if the cell in row i, column j of the input_array contains antimatter or 'M' if it contains matter.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "-RSB--7", "a-4"], ["compound", "-RSB--7", "String-5"], ["compound", "-RSB--7", "-LSB--6"], ["dobj", "given-3", "-RSB--7"], ["advmod", "given-3", "input_array-8"], ["advmod", "A-20", "where-10"], ["det", "character-13", "the-11"], ["amod", "character-13", "j-th-12"], ["nsubj", "A-20", "character-13"], ["case", "element-17", "of-14"], ["det", "element-17", "the-15"], ["amod", "element-17", "i-th-16"], ["nmod:of", "character-13", "element-17"], ["cop", "A-20", "is-18"], ["advcl", "given-3", "A-20"], ["mark", "contains-34", "if-22"], ["det", "cell-24", "the-23"], ["nsubj", "contains-34", "cell-24"], ["case", "i-27", "in-25"], ["compound", "i-27", "row-26"], ["nmod:in", "cell-24", "i-27"], ["compound", "j-30", "column-29"], ["appos", "i-27", "j-30"], ["case", "input_array-33", "of-31"], ["det", "input_array-33", "the-32"], ["nmod:of", "j-30", "input_array-33"], ["advcl", "given-3", "contains-34"], ["dobj", "contains-34", "antimatter-35"], ["cc", "antimatter-35", "or-36"], ["dobj", "contains-34", "'M-37"], ["conj:or", "antimatter-35", "'M-37"], ["mark", "contains-41", "if-39"], ["nsubj", "contains-41", "it-40"], ["advcl", "contains-34", "contains-41"], ["dobj", "contains-41", "matter-42"]], [[]]], " For example, let input_array0 =\"aba\" and input_array1 =\"b\".\n": [[["case", "example-2", "For-1"], ["nmod:for", "let-4", "example-2"], ["root", "ROOT-0", "let-4"], ["amod", "aba-8", "input_array0-5"], ["compound", "aba-8", "=-6"], ["dobj", "let-4", "aba-8"], ["cc", "aba-8", "and-10"], ["amod", "b-14", "input_array1-11"], ["amod", "b-14", "=-12"], ["dobj", "let-4", "b-14"], ["conj:and", "aba-8", "b-14"]], [[]]], " You're given an int input_int.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "'re-2"], ["root", "ROOT-0", "given-3"], ["det", "input_int-6", "an-4"], ["compound", "input_int-6", "int-5"], ["dobj", "given-3", "input_int-6"]], [[]]], " Later, Bob saw the string on the screen.\n": [[["advmod", "saw-4", "Later-1"], ["nsubj", "saw-4", "Bob-3"], ["root", "ROOT-0", "saw-4"], ["det", "string-6", "the-5"], ["dobj", "saw-4", "string-6"], ["case", "screen-9", "on-7"], ["det", "screen-9", "the-8"], ["nmod:on", "saw-4", "screen-9"]], [[]]], " Each ribbon connects two of the stars in such a way that all stars and ribbons hold together.\n": [[["det", "ribbon-2", "Each-1"], ["nsubj", "connects-3", "ribbon-2"], ["root", "ROOT-0", "connects-3"], ["dobj", "connects-3", "two-4"], ["case", "stars-7", "of-5"], ["det", "stars-7", "the-6"], ["nmod:of", "two-4", "stars-7"], ["case", "way-11", "in-8"], ["det:predet", "way-11", "such-9"], ["det", "way-11", "a-10"], ["nmod:in", "stars-7", "way-11"], ["mark", "hold-17", "that-12"], ["det", "stars-14", "all-13"], ["nsubj", "hold-17", "stars-14"], ["cc", "stars-14", "and-15"], ["conj:and", "stars-14", "ribbons-16"], ["nsubj", "hold-17", "ribbons-16"], ["ccomp", "connects-3", "hold-17"], ["advmod", "hold-17", "together-18"]], [[]]], " However, he does not understand money well.\n": [[["advmod", "understand-6", "However-1"], ["nsubj", "understand-6", "he-3"], ["aux", "understand-6", "does-4"], ["neg", "understand-6", "not-5"], ["root", "ROOT-0", "understand-6"], ["dobj", "understand-6", "money-7"], ["advmod", "understand-6", "well-8"]], [[]]], " If there are multiple possible answers, you may return any of them.\n": [[["mark", "are-3", "If-1"], ["expl", "are-3", "there-2"], ["advcl", "return-10", "are-3"], ["amod", "answers-6", "multiple-4"], ["amod", "answers-6", "possible-5"], ["nsubj", "are-3", "answers-6"], ["nsubj", "return-10", "you-8"], ["aux", "return-10", "may-9"], ["root", "ROOT-0", "return-10"], ["dobj", "return-10", "any-11"], ["case", "them-13", "of-12"], ["nmod:of", "any-11", "them-13"]], [[]]], "Josh will never place a box of an even height on top of a box of an odd height.": [[["nsubj", "place-4", "Josh-1"], ["aux", "place-4", "will-2"], ["neg", "place-4", "never-3"], ["root", "ROOT-0", "place-4"], ["det", "box-6", "a-5"], ["dobj", "place-4", "box-6"], ["det", "height-10", "an-8"], ["amod", "height-10", "even-9"], ["prep_of", "box-6", "height-10"], ["det", "box-15", "a-14"], ["prep_on_top_of", "place-4", "box-15"], ["det", "height-19", "an-17"], ["amod", "height-19", "odd-18"], ["prep_of", "box-15", "height-19"]], [[]]], "In other words, he wants to pay the exact input_int of a ticket using any subset of his banknotes.": [[["amod", "words-3", "other-2"], ["prep_in", "wants-6", "words-3"], ["nsubj", "wants-6", "he-5"], ["nsubj", "pay-8", "he-5"], ["root", "ROOT-0", "wants-6"], ["aux", "pay-8", "to-7"], ["xcomp", "wants-6", "pay-8"], ["det", "input_int-11", "the-9"], ["amod", "input_int-11", "exact-10"], ["dobj", "pay-8", "input_int-11"], ["det", "ticket-14", "a-13"], ["prep_of", "input_int-11", "ticket-14"], ["vmod", "ticket-14", "using-15"], ["det", "subset-17", "any-16"], ["dobj", "using-15", "subset-17"], ["poss", "banknotes-20", "his-19"], ["prep_of", "subset-17", "banknotes-20"]], [[]]], " For each i between 1 and N-1, inclusive, element i of input_array1 will be the number of the boss of employee i.\n": [[["case", "i-3", "For-1"], ["det", "i-3", "each-2"], ["nmod:for", "number-18", "i-3"], ["case", "1-5", "between-4"], ["nmod:between", "i-3", "1-5"], ["cc", "1-5", "and-6"], ["nmod:between", "i-3", "N-1-7"], ["conj:and", "1-5", "N-1-7"], ["advmod", "number-18", "inclusive-9"], ["compound", "i-12", "element-11"], ["nsubj", "number-18", "i-12"], ["case", "input_array1-14", "of-13"], ["nmod:of", "i-12", "input_array1-14"], ["aux", "number-18", "will-15"], ["cop", "number-18", "be-16"], ["det", "number-18", "the-17"], ["root", "ROOT-0", "number-18"], ["case", "boss-21", "of-19"], ["det", "boss-21", "the-20"], ["nmod:of", "number-18", "boss-21"], ["case", "i.-24", "of-22"], ["compound", "i.-24", "employee-23"], ["nmod:of", "boss-21", "i.-24"]], [[]]], " # You are given a String expression that contains the expression on Alice's screen.\n": [[["dep", "You-2", "#-1"], ["nsubjpass", "given-4", "You-2"], ["auxpass", "given-4", "are-3"], ["root", "ROOT-0", "given-4"], ["det", "expression-7", "a-5"], ["compound", "expression-7", "String-6"], ["dobj", "given-4", "expression-7"], ["nsubj", "contains-9", "expression-7"], ["ref", "expression-7", "that-8"], ["acl:relcl", "expression-7", "contains-9"], ["det", "expression-11", "the-10"], ["dobj", "contains-9", "expression-11"], ["case", "screen-15", "on-12"], ["nmod:poss", "screen-15", "Alice-13"], ["case", "Alice-13", "'s-14"], ["nmod:on", "expression-11", "screen-15"]], [[]]], " The ith element of input_array2 is the amount of input_int (in milliliters) the car will consume in 1 hour, if your speed is equal to the ith element of input_array1.\n": [[["det", "element-3", "The-1"], ["compound", "element-3", "ith-2"], ["nsubj", "amount-8", "element-3"], ["case", "input_array2-5", "of-4"], ["nmod:of", "element-3", "input_array2-5"], ["cop", "amount-8", "is-6"], ["det", "amount-8", "the-7"], ["root", "ROOT-0", "amount-8"], ["case", "input_int-10", "of-9"], ["nmod:of", "amount-8", "input_int-10"], ["case", "milliliters-13", "in-12"], ["nmod:in", "input_int-10", "milliliters-13"], ["det", "car-16", "the-15"], ["nsubj", "consume-18", "car-16"], ["aux", "consume-18", "will-17"], ["acl:relcl", "amount-8", "consume-18"], ["case", "hour-21", "in-19"], ["nummod", "hour-21", "1-20"], ["nmod:in", "consume-18", "hour-21"], ["mark", "equal-27", "if-23"], ["nmod:poss", "speed-25", "your-24"], ["nsubj", "equal-27", "speed-25"], ["cop", "equal-27", "is-26"], ["advcl", "consume-18", "equal-27"], ["case", "element-31", "to-28"], ["det", "element-31", "the-29"], ["compound", "element-31", "ith-30"], ["nmod:to", "equal-27", "element-31"], ["case", "input_array1-33", "of-32"], ["nmod:of", "element-31", "input_array1-33"]], [[]]], " More precisely, input_array[i] will be \"---\" if she got 0 stars in stage i, \"o--\" if she got 1 star, \"oo-\" if she got 2 stars and \"ooo\" if she managed to get all 3 stars.\n": [[["advmod", "precisely-2", "More-1"], ["ccomp", "be-9", "precisely-2"], ["amod", "-RSB--7", "input_array-4"], ["compound", "-RSB--7", "-LSB--5"], ["compound", "-RSB--7", "i-6"], ["nsubj", "be-9", "-RSB--7"], ["aux", "be-9", "will-8"], ["root", "ROOT-0", "be-9"], ["mark", "got-15", "if-13"], ["nsubj", "got-15", "she-14"], ["dep", "be-9", "got-15"], ["nummod", "stars-17", "0-16"], ["dobj", "got-15", "stars-17"], ["case", "stage-19", "in-18"], ["acl:in", "stars-17", "stage-19"], ["dobj", "stage-19", "i-20"], ["dep", "i-20", "o-23"], ["mark", "got-28", "if-26"], ["nsubj", "got-28", "she-27"], ["advcl", "stage-19", "got-28"], ["nummod", "star-30", "1-29"], ["dobj", "got-28", "star-30"], ["dep", "star-30", "oo-33"], ["mark", "got-38", "if-36"], ["nsubj", "got-38", "she-37"], ["advcl", "stage-19", "got-38"], ["nummod", "stars-40", "2-39"], ["dobj", "got-38", "stars-40"], ["cc", "stars-40", "and-41"], ["dobj", "got-38", "ooo-43"], ["conj:and", "stars-40", "ooo-43"], ["mark", "managed-47", "if-45"], ["nsubj", "managed-47", "she-46"], ["nsubj", "get-49", "she-46"], ["advcl", "got-38", "managed-47"], ["mark", "get-49", "to-48"], ["xcomp", "managed-47", "get-49"], ["advmod", "3-51", "all-50"], ["nummod", "stars-52", "3-51"], ["dobj", "get-49", "stars-52"]], [[]]], "Return the number of different ways that Romeo can place the cosmic amoeba on the input_array.": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["amod", "ways-6", "different-5"], ["prep_of", "number-3", "ways-6"], ["mark", "place-10", "that-7"], ["nsubj", "place-10", "Romeo-8"], ["aux", "place-10", "can-9"], ["ccomp", "Return-1", "place-10"], ["det", "amoeba-13", "the-11"], ["amod", "amoeba-13", "cosmic-12"], ["dobj", "place-10", "amoeba-13"], ["det", "input_array-16", "the-15"], ["prep_on", "place-10", "input_array-16"]], [[]]], "You want to choose exactly input_int input_array and distribute them among you and your friends.": [[["nsubj", "want-2", "You-1"], ["nsubj", "choose-4", "You-1"], ["nsubj", "distribute-9", "You-1"], ["root", "ROOT-0", "want-2"], ["aux", "choose-4", "to-3"], ["xcomp", "want-2", "choose-4"], ["advmod", "input_array-7", "exactly-5"], ["amod", "input_array-7", "input_int-6"], ["dobj", "choose-4", "input_array-7"], ["xcomp", "want-2", "distribute-9"], ["conj_and", "choose-4", "distribute-9"], ["dobj", "distribute-9", "them-10"], ["prep_among", "distribute-9", "you-12"], ["poss", "friends-15", "your-14"], ["prep_among", "distribute-9", "friends-15"], ["conj_and", "you-12", "friends-15"]], [[]]], " John wants to buy exactly input_int eggs.\n": [[["nsubj", "wants-2", "John-1"], ["nsubj", "buy-4", "John-1"], ["root", "ROOT-0", "wants-2"], ["mark", "buy-4", "to-3"], ["xcomp", "wants-2", "buy-4"], ["advmod", "eggs-7", "exactly-5"], ["amod", "eggs-7", "input_int-6"], ["dobj", "buy-4", "eggs-7"]], [[]]], " the correct array can be done from S by removing exactly 1 element\n": [[["det", "array-3", "the-1"], ["amod", "array-3", "correct-2"], ["nsubjpass", "done-6", "array-3"], ["aux", "done-6", "can-4"], ["auxpass", "done-6", "be-5"], ["root", "ROOT-0", "done-6"], ["case", "S-8", "from-7"], ["nmod:from", "done-6", "S-8"], ["mark", "removing-10", "by-9"], ["advcl", "done-6", "removing-10"], ["advmod", "element-13", "exactly-11"], ["nummod", "element-13", "1-12"], ["dobj", "removing-10", "element-13"]], [[]]], " Compute and return the total amount of power you gained.\n": [[["dep", "gained-10", "Compute-1"], ["cc", "Compute-1", "and-2"], ["conj:and", "Compute-1", "return-3"], ["dep", "gained-10", "return-3"], ["det", "amount-6", "the-4"], ["amod", "amount-6", "total-5"], ["dobj", "return-3", "amount-6"], ["case", "power-8", "of-7"], ["nmod:of", "amount-6", "power-8"], ["nsubj", "gained-10", "you-9"], ["root", "ROOT-0", "gained-10"]], [[]]], " Cucumber Boy is young and loves cucumbers.\n": [[["compound", "Boy-2", "Cucumber-1"], ["nsubj", "young-4", "Boy-2"], ["nsubj", "loves-6", "Boy-2"], ["cop", "young-4", "is-3"], ["root", "ROOT-0", "young-4"], ["cc", "young-4", "and-5"], ["conj:and", "young-4", "loves-6"], ["dobj", "loves-6", "cucumbers-7"]], [[]]], " You are given a String S.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "S.-6", "a-4"], ["compound", "S.-6", "String-5"], ["dobj", "given-3", "S.-6"]], [[]]], " (See Notes for a formal definition.)\n": [[["root", "ROOT-0", "See-2"], ["dobj", "See-2", "Notes-3"], ["case", "definition-7", "for-4"], ["det", "definition-7", "a-5"], ["amod", "definition-7", "formal-6"], ["nmod:for", "See-2", "definition-7"]], [[]]], "Return this number.": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "this-2"], ["dep", "Return-1", "number-3"]], [[]]], "We will denote the value assigned to the letter X by val[X].": [[["nsubj", "denote-3", "We-1"], ["aux", "denote-3", "will-2"], ["root", "ROOT-0", "denote-3"], ["det", "value-5", "the-4"], ["dobj", "denote-3", "value-5"], ["vmod", "value-5", "assigned-6"], ["det", "X-10", "the-8"], ["nn", "X-10", "letter-9"], ["prep_to", "assigned-6", "X-10"], ["nn", "-RSB--15", "val-12"], ["nn", "-RSB--15", "-LSB--13"], ["nn", "-RSB--15", "X-14"], ["agent", "assigned-6", "-RSB--15"]], [[]]], " Candidate 1 wants to campaign in one last state, and needs to figure out which state that should be.\n": [[["nsubj", "wants-3", "Candidate-1"], ["nsubj", "needs-12", "Candidate-1"], ["nsubj", "figure-14", "Candidate-1"], ["nummod", "Candidate-1", "1-2"], ["root", "ROOT-0", "wants-3"], ["case", "campaign-5", "to-4"], ["nmod:to", "wants-3", "campaign-5"], ["case", "state-9", "in-6"], ["nummod", "state-9", "one-7"], ["amod", "state-9", "last-8"], ["nmod:in", "campaign-5", "state-9"], ["cc", "wants-3", "and-11"], ["conj:and", "wants-3", "needs-12"], ["mark", "figure-14", "to-13"], ["xcomp", "needs-12", "figure-14"], ["compound:prt", "figure-14", "out-15"], ["det", "state-17", "which-16"], ["dobj", "be-20", "state-17"], ["nsubj", "be-20", "that-18"], ["aux", "be-20", "should-19"], ["ccomp", "figure-14", "be-20"]], [[]]], " Return a int[] with exactly two elements {x,y}, where x is the smallest possible number of deer that still have two antlers, and y is the largest possible number of those deer.\n": [[["advmod", "-RSB--5", "Return-1"], ["det", "-LSB--4", "a-2"], ["compound", "-LSB--4", "int-3"], ["nsubj", "-RSB--5", "-LSB--4"], ["root", "ROOT-0", "-RSB--5"], ["case", "elements-9", "with-6"], ["advmod", "elements-9", "exactly-7"], ["nummod", "elements-9", "two-8"], ["nmod:with", "-RSB--5", "elements-9"], ["nsubj", "have-27", "elements-9"], ["dep", "elements-9", "x-11"], ["appos", "x-11", "y-13"], ["advmod", "number-22", "where-16"], ["nsubj", "number-22", "x-17"], ["cop", "number-22", "is-18"], ["det", "number-22", "the-19"], ["amod", "number-22", "smallest-20"], ["amod", "number-22", "possible-21"], ["acl:relcl", "elements-9", "number-22"], ["case", "deer-24", "of-23"], ["nmod:of", "number-22", "deer-24"], ["nsubj", "have-27", "deer-24"], ["ref", "elements-9", "that-25"], ["ref", "deer-24", "that-25"], ["advmod", "have-27", "still-26"], ["acl:relcl", "deer-24", "have-27"], ["nummod", "antlers-29", "two-28"], ["dobj", "have-27", "antlers-29"], ["cc", "-RSB--5", "and-31"], ["nsubj", "number-37", "y-32"], ["cop", "number-37", "is-33"], ["det", "number-37", "the-34"], ["amod", "number-37", "largest-35"], ["amod", "number-37", "possible-36"], ["conj:and", "-RSB--5", "number-37"], ["case", "deer-40", "of-38"], ["det", "deer-40", "those-39"], ["nmod:of", "number-37", "deer-40"]], [[]]], " possibilities = range(input_int0,input_int1+1)\n": [[["compound", "range-3", "possibilities-1"], ["compound", "range-3", "=-2"], ["root", "ROOT-0", "range-3"], ["dep", "range-3", "input_int0-5"], ["nummod", "+1-8", "input_int1-7"], ["appos", "input_int0-5", "+1-8"]], [[]]], "You are to return the minimum among the Hamming distances of all pairs of the given input_array.": [[["nsubj", "are-2", "You-1"], ["nsubj", "return-4", "You-1"], ["root", "ROOT-0", "are-2"], ["aux", "return-4", "to-3"], ["xcomp", "are-2", "return-4"], ["det", "minimum-6", "the-5"], ["dobj", "return-4", "minimum-6"], ["det", "distances-10", "the-8"], ["amod", "distances-10", "Hamming-9"], ["prep_among", "return-4", "distances-10"], ["det", "pairs-13", "all-12"], ["prep_of", "distances-10", "pairs-13"], ["det", "input_array-17", "the-15"], ["amod", "input_array-17", "given-16"], ["prep_of", "pairs-13", "input_array-17"]], [[]]], " Nick has exactly four banknotes with values b1, b2, b3 and b4 (some of the values may be equal).\n": [[["nsubj", "has-2", "Nick-1"], ["root", "ROOT-0", "has-2"], ["advmod", "banknotes-5", "exactly-3"], ["nummod", "banknotes-5", "four-4"], ["dobj", "has-2", "banknotes-5"], ["case", "values-7", "with-6"], ["nmod:with", "banknotes-5", "values-7"], ["nummod", "values-7", "b1-8"], ["nummod", "values-7", "b2-10"], ["nummod", "values-7", "b3-12"], ["cc", "values-7", "and-13"], ["nmod:with", "banknotes-5", "b4-14"], ["conj:and", "values-7", "b4-14"], ["nsubj", "equal-22", "some-16"], ["case", "values-19", "of-17"], ["det", "values-19", "the-18"], ["nmod:of", "some-16", "values-19"], ["aux", "equal-22", "may-20"], ["cop", "equal-22", "be-21"], ["dep", "values-7", "equal-22"]], [[]]], " (I.e., you are not allowed to put two bricks of the same color immediately on one another.)\n": [[["advmod", "allowed-7", "I.e.-2"], ["nsubjpass", "allowed-7", "you-4"], ["nsubj", "put-9", "you-4"], ["auxpass", "allowed-7", "are-5"], ["neg", "allowed-7", "not-6"], ["root", "ROOT-0", "allowed-7"], ["mark", "put-9", "to-8"], ["xcomp", "allowed-7", "put-9"], ["nummod", "bricks-11", "two-10"], ["dobj", "put-9", "bricks-11"], ["case", "color-15", "of-12"], ["det", "color-15", "the-13"], ["amod", "color-15", "same-14"], ["nmod:of", "bricks-11", "color-15"], ["advmod", "one-18", "immediately-16"], ["case", "one-18", "on-17"], ["nmod:on", "put-9", "one-18"], ["dep", "one-18", "another-19"]], [[]]], " An element of height is called a peak if its value is strictly greater than each of the values of adjacent elements.\n": [[["det", "element-2", "An-1"], ["nsubjpass", "called-6", "element-2"], ["case", "height-4", "of-3"], ["nmod:of", "element-2", "height-4"], ["auxpass", "called-6", "is-5"], ["root", "ROOT-0", "called-6"], ["det", "peak-8", "a-7"], ["dobj", "called-6", "peak-8"], ["mark", "greater-14", "if-9"], ["nmod:poss", "value-11", "its-10"], ["nsubj", "greater-14", "value-11"], ["cop", "greater-14", "is-12"], ["advmod", "greater-14", "strictly-13"], ["advcl", "called-6", "greater-14"], ["case", "each-16", "than-15"], ["nmod:than", "greater-14", "each-16"], ["case", "values-19", "of-17"], ["det", "values-19", "the-18"], ["nmod:of", "each-16", "values-19"], ["case", "elements-22", "of-20"], ["amod", "elements-22", "adjacent-21"], ["nmod:of", "values-19", "elements-22"]], [[]]], "Compute and return the number of beautiful ribbons in Alice's tree.": [[["root", "ROOT-0", "Compute-1"], ["conj_and", "Compute-1", "return-3"], ["det", "number-5", "the-4"], ["dobj", "return-3", "number-5"], ["amod", "ribbons-8", "beautiful-7"], ["prep_of", "number-5", "ribbons-8"], ["poss", "tree-12", "Alice-10"], ["prep_in", "return-3", "tree-12"]], [[]]], " At first, you want to give him the whole bar, but then you remembered that your friend only likes a chocolate bar without repeated input_array.\n": [[["case", "first-2", "At-1"], ["nmod:at", "want-5", "first-2"], ["nsubj", "want-5", "you-4"], ["nsubj", "give-7", "you-4"], ["root", "ROOT-0", "want-5"], ["mark", "give-7", "to-6"], ["xcomp", "want-5", "give-7"], ["iobj", "give-7", "him-8"], ["det", "bar-11", "the-9"], ["amod", "bar-11", "whole-10"], ["dobj", "give-7", "bar-11"], ["cc", "want-5", "but-13"], ["advmod", "remembered-16", "then-14"], ["nsubj", "remembered-16", "you-15"], ["conj:but", "want-5", "remembered-16"], ["mark", "likes-21", "that-17"], ["nmod:poss", "friend-19", "your-18"], ["nsubj", "likes-21", "friend-19"], ["advmod", "likes-21", "only-20"], ["ccomp", "remembered-16", "likes-21"], ["det", "bar-24", "a-22"], ["compound", "bar-24", "chocolate-23"], ["dobj", "likes-21", "bar-24"], ["case", "input_array-27", "without-25"], ["amod", "input_array-27", "repeated-26"], ["nmod:without", "likes-21", "input_array-27"]], [[]]], "The distance between input_array1 and input_array2 is defined as the sum of the differences between each letter in input_array1 and the letter in input_array2 at the same position.": [[["det", "distance-2", "The-1"], ["nsubjpass", "defined-8", "distance-2"], ["prep_between", "distance-2", "input_array1-4"], ["prep_between", "distance-2", "input_array2-6"], ["conj_and", "input_array1-4", "input_array2-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["det", "sum-11", "the-10"], ["prep_as", "defined-8", "sum-11"], ["det", "differences-14", "the-13"], ["prep_of", "sum-11", "differences-14"], ["det", "letter-17", "each-16"], ["prep_between", "differences-14", "letter-17"], ["prep_in", "letter-17", "input_array1-19"], ["det", "letter-22", "the-21"], ["prep_between", "differences-14", "letter-22"], ["conj_and", "letter-17", "letter-22"], ["prep_in", "letter-22", "input_array2-24"], ["det", "position-28", "the-26"], ["amod", "position-28", "same-27"], ["prep_at", "defined-8", "position-28"]], [[]]], " John and Brus are building towers using toy bricks.\n": [[["nsubj", "building-5", "John-1"], ["cc", "John-1", "and-2"], ["conj:and", "John-1", "Brus-3"], ["nsubj", "building-5", "Brus-3"], ["aux", "building-5", "are-4"], ["root", "ROOT-0", "building-5"], ["dobj", "building-5", "towers-6"], ["advcl", "building-5", "using-7"], ["compound", "bricks-9", "toy-8"], ["dobj", "using-7", "bricks-9"]], [[]]], " Cucumber Boy's mother gave him input_int1 yen.\n": [[["compound", "Boy-2", "Cucumber-1"], ["nmod:poss", "mother-4", "Boy-2"], ["case", "Boy-2", "'s-3"], ["nsubj", "gave-5", "mother-4"], ["root", "ROOT-0", "gave-5"], ["iobj", "gave-5", "him-6"], ["amod", "yen-8", "input_int1-7"], ["dobj", "gave-5", "yen-8"]], [[]]], " The result is \"baba\" and it is not a palindrome.\n": [[["det", "result-2", "The-1"], ["nsubj", "baba-5", "result-2"], ["cop", "baba-5", "is-3"], ["root", "ROOT-0", "baba-5"], ["cc", "baba-5", "and-7"], ["nsubj", "palindrome-12", "it-8"], ["cop", "palindrome-12", "is-9"], ["neg", "palindrome-12", "not-10"], ["det", "palindrome-12", "a-11"], ["conj:and", "baba-5", "palindrome-12"]], [[]]], " The number of balls Gogo moved depends on S.\n": [[["det", "number-2", "The-1"], ["nsubj", "depends-7", "number-2"], ["case", "Gogo-5", "of-3"], ["compound", "Gogo-5", "balls-4"], ["nmod:of", "number-2", "Gogo-5"], ["acl", "Gogo-5", "moved-6"], ["root", "ROOT-0", "depends-7"], ["case", "S.-9", "on-8"], ["nmod:on", "depends-7", "S.-9"]], [[]]], " He possesses a time machine and will use it to advance time in one of the cellars, maturing all the wine inside.\n": [[["nsubj", "possesses-2", "He-1"], ["nsubj", "use-8", "He-1"], ["root", "ROOT-0", "possesses-2"], ["det", "machine-5", "a-3"], ["compound", "machine-5", "time-4"], ["dobj", "possesses-2", "machine-5"], ["cc", "possesses-2", "and-6"], ["aux", "use-8", "will-7"], ["conj:and", "possesses-2", "use-8"], ["dobj", "use-8", "it-9"], ["nsubj", "advance-11", "it-9"], ["mark", "advance-11", "to-10"], ["xcomp", "use-8", "advance-11"], ["dobj", "advance-11", "time-12"], ["case", "one-14", "in-13"], ["nmod:in", "advance-11", "one-14"], ["case", "cellars-17", "of-15"], ["det", "cellars-17", "the-16"], ["nmod:of", "one-14", "cellars-17"], ["advcl", "advance-11", "maturing-19"], ["det:predet", "wine-22", "all-20"], ["det", "wine-22", "the-21"], ["dobj", "maturing-19", "wine-22"], ["advmod", "maturing-19", "inside-23"]], [[]]], " Given a string input_array0, let f(input_array0) denote the infinite string obtained by concatenating infinitely many copies of input_array0. For example, if input_array0 = \"abc\" then f(input_array0) = \"abcabcabcabc...\".\n": [[["case", "input_array0-4", "Given-1"], ["det", "input_array0-4", "a-2"], ["compound", "input_array0-4", "string-3"], ["nmod:given", "let-6", "input_array0-4"], ["root", "ROOT-0", "let-6"], ["nsubj", "denote-11", "f-7"], ["appos", "f-7", "input_array0-9"], ["ccomp", "let-6", "denote-11"], ["det", "string-14", "the-12"], ["amod", "string-14", "infinite-13"], ["dobj", "denote-11", "string-14"], ["acl", "string-14", "obtained-15"], ["mark", "concatenating-17", "by-16"], ["advcl", "obtained-15", "concatenating-17"], ["amod", "copies-20", "infinitely-18"], ["amod", "copies-20", "many-19"], ["dobj", "concatenating-17", "copies-20"], ["case", "input_array0-22", "of-21"], ["nmod:of", "copies-20", "input_array0-22"]], [["case", "example-2", "For-1"], ["nmod:for", "=-6", "example-2"], ["amod", "input_array0-5", "if-4"], ["nsubj", "=-6", "input_array0-5"], ["root", "ROOT-0", "=-6"], ["xcomp", "=-6", "abc-8"], ["advmod", "=-6", "then-10"], ["dep", "=-15", "f-11"], ["nsubj", "=-15", "input_array0-13"], ["advcl", "then-10", "=-15"], ["xcomp", "=-15", "abcabcabcabc-17"]], [[]]], " 4  =  3 + 1 + 0   :  'D' in element 1 position 0\n": [[["nummod", "=-2", "4-1"], ["root", "ROOT-0", "=-2"], ["nummod", "'D-9", "3-3"], ["compound", "1-5", "+-4"], ["nummod", "'D-9", "1-5"], ["amod", "'D-9", "+-6"], ["amod", "'D-9", "0-7"], ["dep", "=-2", "'D-9"], ["case", "position-14", "in-11"], ["compound", "position-14", "element-12"], ["nummod", "position-14", "1-13"], ["nmod:in", "'D-9", "position-14"], ["nummod", "position-14", "0-15"]], [[]]], " The sequence containing only these digits is 0, 1, 4, 9, 10, 11, 14...\n": [[["det", "sequence-2", "The-1"], ["nsubj", "containing-3", "sequence-2"], ["root", "ROOT-0", "containing-3"], ["advmod", "digits-6", "only-4"], ["det", "digits-6", "these-5"], ["dobj", "containing-3", "digits-6"], ["dep", "0-8", "is-7"], ["nmod", "digits-6", "0-8"], ["nummod", "0-8", "1-10"], ["nummod", "0-8", "4-12"], ["nummod", "0-8", "9-14"], ["nummod", "0-8", "10-16"], ["nummod", "0-8", "11-18"], ["nummod", "0-8", "14-20"]], [[]]], " (Different integers represent different colors.)\n": [[["amod", "integers-3", "Different-2"], ["nsubj", "represent-4", "integers-3"], ["root", "ROOT-0", "represent-4"], ["amod", "colors-6", "different-5"], ["dobj", "represent-4", "colors-6"]], [[]]], " The message consisted of one or more copies of the same lowercase letter.\n": [[["det", "message-2", "The-1"], ["nsubj", "consisted-3", "message-2"], ["root", "ROOT-0", "consisted-3"], ["case", "copies-8", "of-4"], ["nummod", "copies-8", "one-5"], ["cc", "one-5", "or-6"], ["conj:or", "one-5", "more-7"], ["nummod", "copies-8", "more-7"], ["nmod:of", "consisted-3", "copies-8"], ["case", "letter-13", "of-9"], ["det", "letter-13", "the-10"], ["amod", "letter-13", "same-11"], ["compound", "letter-13", "lowercase-12"], ["nmod:of", "copies-8", "letter-13"]], [[]]], " He just chooses some input_int2 unique cucumbers he likes.\n": [[["nsubj", "chooses-3", "He-1"], ["advmod", "chooses-3", "just-2"], ["root", "ROOT-0", "chooses-3"], ["det", "cucumbers-7", "some-4"], ["amod", "cucumbers-7", "input_int2-5"], ["amod", "cucumbers-7", "unique-6"], ["dobj", "chooses-3", "cucumbers-7"], ["nsubj", "likes-9", "he-8"], ["acl:relcl", "cucumbers-7", "likes-9"]], [[]]], " In a chess tournament, each pair of distinct players played a single match against each other.\n": [[["case", "tournament-4", "In-1"], ["det", "tournament-4", "a-2"], ["compound", "tournament-4", "chess-3"], ["nmod:in", "played-11", "tournament-4"], ["det", "pair-7", "each-6"], ["nsubj", "played-11", "pair-7"], ["case", "players-10", "of-8"], ["amod", "players-10", "distinct-9"], ["nmod:of", "pair-7", "players-10"], ["root", "ROOT-0", "played-11"], ["det", "match-14", "a-12"], ["amod", "match-14", "single-13"], ["dobj", "played-11", "match-14"], ["case", "other-17", "against-15"], ["det", "other-17", "each-16"], ["nmod:against", "played-11", "other-17"]], [[]]], " The average word length is the sum of all the words' lengths divided by the total number of words.\n": [[["det", "length-4", "The-1"], ["amod", "length-4", "average-2"], ["compound", "length-4", "word-3"], ["nsubj", "sum-7", "length-4"], ["cop", "sum-7", "is-5"], ["det", "sum-7", "the-6"], ["root", "ROOT-0", "sum-7"], ["case", "lengths-13", "of-8"], ["dep", "lengths-13", "all-9"], ["det", "words-11", "the-10"], ["nmod:poss", "lengths-13", "words-11"], ["case", "words-11", "'-12"], ["nmod:of", "sum-7", "lengths-13"], ["acl", "sum-7", "divided-14"], ["case", "number-18", "by-15"], ["det", "number-18", "the-16"], ["amod", "number-18", "total-17"], ["nmod:by", "divided-14", "number-18"], ["case", "words-20", "of-19"], ["nmod:of", "number-18", "words-20"]], [[]]], " 2 =   2 + 0 + 0   :  'C' in element 0 position 0\n": [[["nummod", "0-7", "2-1"], ["nummod", "0-7", "=-2"], ["nummod", "0-7", "2-3"], ["nummod", "0-7", "+-4"], ["nummod", "0-7", "0-5"], ["compound", "0-7", "+-6"], ["root", "ROOT-0", "0-7"], ["dep", "0-7", "C-10"], ["case", "position-15", "in-12"], ["compound", "position-15", "element-13"], ["nummod", "position-15", "0-14"], ["nmod:in", "C-10", "position-15"], ["nummod", "position-15", "0-16"]], [[]]], " The longest consecutive rating increase streak is a very important statistic in any competition.\n": [[["det", "streak-6", "The-1"], ["amod", "streak-6", "longest-2"], ["amod", "streak-6", "consecutive-3"], ["compound", "streak-6", "rating-4"], ["compound", "streak-6", "increase-5"], ["nsubj", "statistic-11", "streak-6"], ["cop", "statistic-11", "is-7"], ["det", "statistic-11", "a-8"], ["advmod", "important-10", "very-9"], ["amod", "statistic-11", "important-10"], ["root", "ROOT-0", "statistic-11"], ["case", "competition-14", "in-12"], ["det", "competition-14", "any-13"], ["nmod:in", "statistic-11", "competition-14"]], [[]]], "Compute and return the number of diverse departments in Shiny's company.": [[["root", "ROOT-0", "Compute-1"], ["conj_and", "Compute-1", "return-3"], ["det", "number-5", "the-4"], ["dobj", "return-3", "number-5"], ["amod", "departments-8", "diverse-7"], ["prep_of", "number-5", "departments-8"], ["poss", "company-12", "Shiny-10"], ["prep_in", "return-3", "company-12"]], [[]]], " Return the total number of such integers.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "total-3"], ["dep", "Return-1", "number-4"], ["case", "integers-7", "of-5"], ["amod", "integers-7", "such-6"], ["nmod:of", "number-4", "integers-7"]], [[]]], " Compute and return the total number of hit points you'll lose during the fight.\n": [[["dep", "lose-12", "Compute-1"], ["cc", "Compute-1", "and-2"], ["conj:and", "Compute-1", "return-3"], ["dep", "lose-12", "return-3"], ["det", "number-6", "the-4"], ["amod", "number-6", "total-5"], ["dobj", "return-3", "number-6"], ["case", "points-9", "of-7"], ["compound", "points-9", "hit-8"], ["nmod:of", "number-6", "points-9"], ["nsubj", "lose-12", "you-10"], ["aux", "lose-12", "'ll-11"], ["root", "ROOT-0", "lose-12"], ["case", "fight-15", "during-13"], ["det", "fight-15", "the-14"], ["nmod:during", "lose-12", "fight-15"]], [[]]], " This String contains the digits of a (possibly large) positive integer.\n": [[["det", "String-2", "This-1"], ["nsubj", "contains-3", "String-2"], ["root", "ROOT-0", "contains-3"], ["det", "digits-5", "the-4"], ["dobj", "contains-3", "digits-5"], ["case", "integer-13", "of-6"], ["det", "integer-13", "a-7"], ["advmod", "large-10", "possibly-9"], ["dep", "integer-13", "large-10"], ["amod", "integer-13", "positive-12"], ["nmod:of", "digits-5", "integer-13"]], [[]]], " Compute and return the number of peaks in the given mountain range.\n": [[["root", "ROOT-0", "Compute-1"], ["cc", "Compute-1", "and-2"], ["conj:and", "Compute-1", "return-3"], ["det", "number-5", "the-4"], ["dobj", "return-3", "number-5"], ["case", "peaks-7", "of-6"], ["nmod:of", "number-5", "peaks-7"], ["case", "range-12", "in-8"], ["det", "range-12", "the-9"], ["amod", "range-12", "given-10"], ["compound", "range-12", "mountain-11"], ["nmod:in", "peaks-7", "range-12"]], [[]]], "Compute and return the total amount of power you gained.": [[["dep", "gained-10", "Compute-1"], ["conj_and", "Compute-1", "return-3"], ["dep", "gained-10", "return-3"], ["det", "amount-6", "the-4"], ["amod", "amount-6", "total-5"], ["dobj", "return-3", "amount-6"], ["prep_of", "amount-6", "power-8"], ["nsubj", "gained-10", "you-9"], ["root", "ROOT-0", "gained-10"]], [[]]], "A transition from color (R, G, B) to color (R', G', B') is called good if all components differ by at most input_int7 units (formally, |R - R'| <= input_int7 , |G - G'| <= input_int7 , |B - B'| <= input_int7 ) and at least one component differs by at least input_int6 units (formally, at least one of the conditions |R - R'| >= input_int6 , |G - G'| >= input_int6 , |B - B'| >= input_int6 holds).": [[["det", "transition-2", "A-1"], ["nsubjpass", "called-25", "transition-2"], ["prep_from", "transition-2", "color-4"], ["appos", "color-4", "R-6"], ["dep", "R-6", "G-8"], ["dep", "R-6", "B-10"], ["prep_to", "color-4", "color-13"], ["dep", "color-13", "R-15"], ["appos", "color-13", "G-18"], ["nsubjpass", "called-25", "B-21"], ["auxpass", "called-25", "is-24"], ["dep", "differs-74", "called-25"], ["acomp", "called-25", "good-26"], ["mark", "differ-30", "if-27"], ["det", "components-29", "all-28"], ["nsubj", "differ-30", "components-29"], ["advcl", "called-25", "differ-30"], ["prep", "differ-30", "by-31"], ["pcomp", "by-31", "at-32"], ["advmod", "input_int7-34", "most-33"], ["amod", "units-35", "input_int7-34"], ["pobj", "at-32", "units-35"], ["dep", "R-40", "formally-37"], ["amod", "R-40", "|-39"], ["dep", "units-35", "R-40"], ["poss", "|-44", "R-42"], ["dobj", "differ-30", "|-44"], ["vmod", "|-44", "<-45"], ["dep", "input_int7-47", "=-46"], ["ccomp", "<-45", "input_int7-47"], ["nn", "G-50", "|-49"], ["dep", "<-45", "G-50"], ["poss", "input_int7-57", "G-52"], ["nn", "input_int7-57", "|-54"], ["nn", "input_int7-57", "<-55"], ["nn", "input_int7-57", "=-56"], ["dep", "|-44", "input_int7-57"], ["nn", "B-60", "|-59"], ["appos", "|-44", "B-60"], ["poss", "|-64", "B-62"], ["dep", "B-60", "|-64"], ["vmod", "|-64", "<-65"], ["dep", "input_int7-67", "=-66"], ["ccomp", "<-65", "input_int7-67"], ["dobj", "differ-30", "at-70"], ["advmod", "|-44", "at-70"], ["conj_and", "|-44", "at-70"], ["pobj", "at-70", "least-71"], ["num", "component-73", "one-72"], ["nsubj", "differs-74", "component-73"], ["root", "ROOT-0", "differs-74"], ["quantmod", "input_int6-78", "at-76"], ["mwe", "at-76", "least-77"], ["pobj", "at-76", "least-77"], ["num", "units-79", "input_int6-78"], ["prep_by", "differs-74", "units-79"], ["dep", "one-85", "formally-81"], ["quantmod", "one-85", "at-83"], ["mwe", "at-83", "least-84"], ["pobj", "at-83", "least-84"], ["dep", "units-79", "one-85"], ["det", "R-90", "the-87"], ["nn", "R-90", "conditions-88"], ["nn", "R-90", "|-89"], ["prep_of", "one-85", "R-90"], ["poss", "input_int6-97", "R-92"], ["nn", "input_int6-97", "|-94"], ["nn", "input_int6-97", ">-95"], ["nn", "input_int6-97", "=-96"], ["dep", "R-90", "input_int6-97"], ["nn", "G-100", "|-99"], ["appos", "input_int6-97", "G-100"], ["poss", ">-105", "G-102"], ["amod", ">-105", "|-104"], ["dep", "one-85", ">-105"], ["dep", "input_int6-107", "=-106"], ["dep", ">-105", "input_int6-107"], ["nn", "B-110", "|-109"], ["dep", "one-85", "B-110"], ["nn", ">-115", "B-112"], ["nn", ">-115", "|-114"], ["dep", "B-110", ">-115"], ["dep", "holds-118", "=-116"], ["amod", "holds-118", "input_int6-117"], ["rcmod", ">-115", "holds-118"]], [[]]], "The new String must again describe a valid positive integer, i.e., it must not have any leading zeros.": [[["det", "String-3", "The-1"], ["amod", "String-3", "new-2"], ["nsubj", "describe-6", "String-3"], ["aux", "describe-6", "must-4"], ["advmod", "describe-6", "again-5"], ["ccomp", "have-17", "describe-6"], ["det", "integer-10", "a-7"], ["amod", "integer-10", "valid-8"], ["amod", "integer-10", "positive-9"], ["dobj", "describe-6", "integer-10"], ["advmod", "describe-6", "i.e.-12"], ["nsubj", "have-17", "it-14"], ["aux", "have-17", "must-15"], ["neg", "have-17", "not-16"], ["root", "ROOT-0", "have-17"], ["det", "zeros-20", "any-18"], ["amod", "zeros-20", "leading-19"], ["dobj", "have-17", "zeros-20"]], [[]]], " On the other hand, all fairies that have not been defeated yet will attack you all the time.\n": [[["case", "hand-4", "On-1"], ["det", "hand-4", "the-2"], ["amod", "hand-4", "other-3"], ["nmod:on", "attack-15", "hand-4"], ["det", "fairies-7", "all-6"], ["nsubjpass", "defeated-12", "fairies-7"], ["nsubj", "attack-15", "fairies-7"], ["ref", "fairies-7", "that-8"], ["aux", "defeated-12", "have-9"], ["neg", "defeated-12", "not-10"], ["auxpass", "defeated-12", "been-11"], ["acl:relcl", "fairies-7", "defeated-12"], ["advmod", "defeated-12", "yet-13"], ["aux", "attack-15", "will-14"], ["root", "ROOT-0", "attack-15"], ["iobj", "attack-15", "you-16"], ["det:predet", "time-19", "all-17"], ["det", "time-19", "the-18"], ["dobj", "attack-15", "time-19"]], [[]]], " You want to change input_int into a Fibonacci number.\n": [[["nsubj", "want-2", "You-1"], ["nsubj", "change-4", "You-1"], ["root", "ROOT-0", "want-2"], ["mark", "change-4", "to-3"], ["xcomp", "want-2", "change-4"], ["dobj", "change-4", "input_int-5"], ["case", "number-9", "into-6"], ["det", "number-9", "a-7"], ["compound", "number-9", "Fibonacci-8"], ["nmod:into", "change-4", "number-9"]], [[]]], " Alien Fred wants to destroy the Earth, but he forgot the password that activates the planet destroyer.\n": [[["compound", "Fred-2", "Alien-1"], ["nsubj", "wants-3", "Fred-2"], ["nsubj", "destroy-5", "Fred-2"], ["root", "ROOT-0", "wants-3"], ["mark", "destroy-5", "to-4"], ["xcomp", "wants-3", "destroy-5"], ["det", "Earth-7", "the-6"], ["dobj", "destroy-5", "Earth-7"], ["cc", "wants-3", "but-9"], ["nsubj", "forgot-11", "he-10"], ["conj:but", "wants-3", "forgot-11"], ["det", "password-13", "the-12"], ["dobj", "forgot-11", "password-13"], ["nsubj", "activates-15", "password-13"], ["ref", "password-13", "that-14"], ["acl:relcl", "password-13", "activates-15"], ["det", "destroyer-18", "the-16"], ["compound", "destroyer-18", "planet-17"], ["dobj", "activates-15", "destroyer-18"]], [[]]], " Gogo owns N wine cellars, numbered 0 through N-1.\n": [[["nsubj", "owns-2", "Gogo-1"], ["root", "ROOT-0", "owns-2"], ["compound", "cellars-5", "N-3"], ["compound", "cellars-5", "wine-4"], ["dobj", "owns-2", "cellars-5"], ["acl", "cellars-5", "numbered-7"], ["dobj", "numbered-7", "0-8"], ["case", "N-1-10", "through-9"], ["nmod:through", "numbered-7", "N-1-10"]], [[]]], " John has a input_array of integers.\n": [[["nsubj", "has-2", "John-1"], ["root", "ROOT-0", "has-2"], ["det", "input_array-4", "a-3"], ["dobj", "has-2", "input_array-4"], ["case", "integers-6", "of-5"], ["nmod:of", "input_array-4", "integers-6"]], [[]]], "An element of height is called a peak if its value is strictly greater than each of the values of adjacent elements.": [[["det", "element-2", "An-1"], ["nsubjpass", "called-6", "element-2"], ["prep_of", "element-2", "height-4"], ["auxpass", "called-6", "is-5"], ["root", "ROOT-0", "called-6"], ["det", "peak-8", "a-7"], ["dobj", "called-6", "peak-8"], ["mark", "greater-14", "if-9"], ["poss", "value-11", "its-10"], ["nsubj", "greater-14", "value-11"], ["cop", "greater-14", "is-12"], ["advmod", "greater-14", "strictly-13"], ["advcl", "called-6", "greater-14"], ["prep_than", "greater-14", "each-16"], ["det", "values-19", "the-18"], ["prep_of", "each-16", "values-19"], ["amod", "elements-22", "adjacent-21"], ["prep_of", "values-19", "elements-22"]], [[]]], " Choose a character c and add it to the end of input_array1.\n": [[["root", "ROOT-0", "Choose-1"], ["det", "c-4", "a-2"], ["compound", "c-4", "character-3"], ["dobj", "Choose-1", "c-4"], ["cc", "Choose-1", "and-5"], ["conj:and", "Choose-1", "add-6"], ["dobj", "add-6", "it-7"], ["case", "end-10", "to-8"], ["det", "end-10", "the-9"], ["nmod:to", "add-6", "end-10"], ["case", "input_array1-12", "of-11"], ["nmod:of", "end-10", "input_array1-12"]], [[]]], " The cost of palindromization in dollars is equal to the value added or subtracted.\n": [[["det", "cost-2", "The-1"], ["nsubj", "equal-8", "cost-2"], ["case", "palindromization-4", "of-3"], ["nmod:of", "cost-2", "palindromization-4"], ["case", "dollars-6", "in-5"], ["nmod:in", "palindromization-4", "dollars-6"], ["cop", "equal-8", "is-7"], ["root", "ROOT-0", "equal-8"], ["case", "value-11", "to-9"], ["det", "value-11", "the-10"], ["nmod:to", "equal-8", "value-11"], ["acl", "value-11", "added-12"], ["cc", "added-12", "or-13"], ["acl", "value-11", "subtracted-14"], ["conj:or", "added-12", "subtracted-14"]], [[]]], " You can apply an arbitrary number of operations to input_array1, where each operation is one of the following:\n": [[["nsubj", "apply-3", "You-1"], ["aux", "apply-3", "can-2"], ["root", "ROOT-0", "apply-3"], ["det", "number-6", "an-4"], ["amod", "number-6", "arbitrary-5"], ["dobj", "apply-3", "number-6"], ["case", "operations-8", "of-7"], ["nmod:of", "number-6", "operations-8"], ["case", "input_array1-10", "to-9"], ["nmod:to", "apply-3", "input_array1-10"], ["advmod", "one-16", "where-12"], ["det", "operation-14", "each-13"], ["nsubj", "one-16", "operation-14"], ["cop", "one-16", "is-15"], ["acl:relcl", "input_array1-10", "one-16"], ["case", "following-19", "of-17"], ["det", "following-19", "the-18"], ["nmod:of", "one-16", "following-19"]], [[]]], " Unfortunately Arthur cannot palindromize numbers for free.\n": [[["advmod", "palindromize-5", "Unfortunately-1"], ["nsubj", "palindromize-5", "Arthur-2"], ["aux", "palindromize-5", "can-3"], ["neg", "palindromize-5", "not-4"], ["root", "ROOT-0", "palindromize-5"], ["dobj", "palindromize-5", "numbers-6"], ["case", "free-8", "for-7"], ["advcl:for", "palindromize-5", "free-8"]], [[]]], "The department of employee x is formed by employee x and all the employees such that x is their boss.": [[["det", "department-2", "The-1"], ["nsubjpass", "formed-7", "department-2"], ["nn", "x-5", "employee-4"], ["prep_of", "department-2", "x-5"], ["auxpass", "formed-7", "is-6"], ["root", "ROOT-0", "formed-7"], ["nn", "x-10", "employee-9"], ["agent", "formed-7", "x-10"], ["predet", "employees-14", "all-12"], ["det", "employees-14", "the-13"], ["agent", "formed-7", "employees-14"], ["conj_and", "x-10", "employees-14"], ["prep", "formed-7", "such-15"], ["mark", "boss-20", "that-16"], ["nsubj", "boss-20", "x-17"], ["cop", "boss-20", "is-18"], ["poss", "boss-20", "their-19"], ["ccomp", "formed-7", "boss-20"]], [[]]], " Given a int[] input_array, for each non-empty subset of input_array, compute the average of its elements, then return the average of those averages.\n": [[["case", "input_array-6", "Given-1"], ["det", "input_array-6", "a-2"], ["amod", "input_array-6", "int-3"], ["compound", "input_array-6", "-LSB--4"], ["compound", "input_array-6", "-RSB--5"], ["nmod:given", "compute-15", "input_array-6"], ["case", "subset-11", "for-8"], ["det", "subset-11", "each-9"], ["amod", "subset-11", "non-empty-10"], ["nmod:for", "input_array-6", "subset-11"], ["case", "input_array-13", "of-12"], ["nmod:of", "subset-11", "input_array-13"], ["root", "ROOT-0", "compute-15"], ["det", "average-17", "the-16"], ["dobj", "compute-15", "average-17"], ["case", "elements-20", "of-18"], ["nmod:poss", "elements-20", "its-19"], ["nmod:of", "average-17", "elements-20"], ["advmod", "return-23", "then-22"], ["dep", "compute-15", "return-23"], ["det", "average-25", "the-24"], ["dobj", "return-23", "average-25"], ["case", "averages-28", "of-26"], ["det", "averages-28", "those-27"], ["nmod:of", "average-25", "averages-28"]], [[]]], " You are taking your car on a long trip and have only a limited amount of input_int.\n": [[["nsubj", "taking-3", "You-1"], ["nsubj", "have-11", "You-1"], ["aux", "taking-3", "are-2"], ["root", "ROOT-0", "taking-3"], ["nmod:poss", "car-5", "your-4"], ["dobj", "taking-3", "car-5"], ["case", "trip-9", "on-6"], ["det", "trip-9", "a-7"], ["amod", "trip-9", "long-8"], ["nmod:on", "taking-3", "trip-9"], ["cc", "taking-3", "and-10"], ["conj:and", "taking-3", "have-11"], ["advmod", "amount-15", "only-12"], ["det", "amount-15", "a-13"], ["amod", "amount-15", "limited-14"], ["dobj", "have-11", "amount-15"], ["case", "input_int-17", "of-16"], ["nmod:of", "amount-15", "input_int-17"]], [[]]], " input_array TriFibonacci sequence begins by defining the first three elements input_array[0], input_array[1] and input_array[2].\n": [[["advmod", "begins-4", "input_array-1"], ["compound", "sequence-3", "TriFibonacci-2"], ["nsubj", "begins-4", "sequence-3"], ["root", "ROOT-0", "begins-4"], ["mark", "defining-6", "by-5"], ["advcl", "begins-4", "defining-6"], ["det", "elements-10", "the-7"], ["amod", "elements-10", "first-8"], ["nummod", "elements-10", "three-9"], ["dobj", "defining-6", "elements-10"], ["advmod", "-LSB--12", "input_array-11"], ["amod", "elements-10", "-LSB--12"], ["nummod", "-RSB--14", "0-13"], ["dep", "-LSB--12", "-RSB--14"], ["advmod", "-LSB--17", "input_array-16"], ["amod", "elements-10", "-LSB--17"], ["conj:and", "-LSB--12", "-LSB--17"], ["nummod", "-RSB--19", "1-18"], ["dep", "-LSB--17", "-RSB--19"], ["cc", "-LSB--12", "and-20"], ["advmod", "-LSB--22", "input_array-21"], ["amod", "elements-10", "-LSB--22"], ["conj:and", "-LSB--12", "-LSB--22"], ["nummod", "-RSB--24", "2-23"], ["dep", "-LSB--12", "-RSB--24"]], [[]]], "Given input_int return the minimum amount of money Arthur needs.": [[["prep", "needs-10", "Given-1"], ["amod", "return-3", "input_int-2"], ["pobj", "Given-1", "return-3"], ["det", "amount-6", "the-4"], ["amod", "amount-6", "minimum-5"], ["nsubj", "needs-10", "amount-6"], ["nn", "Arthur-9", "money-8"], ["prep_of", "amount-6", "Arthur-9"], ["root", "ROOT-0", "needs-10"]], [[]]], " Return this maximum length.\n": [[["root", "ROOT-0", "Return-1"], ["det", "length-4", "this-2"], ["amod", "length-4", "maximum-3"], ["dep", "Return-1", "length-4"]], [[]]], " There are N employees in her company.\n": [[["expl", "are-2", "There-1"], ["root", "ROOT-0", "are-2"], ["compound", "employees-4", "N-3"], ["nsubj", "are-2", "employees-4"], ["case", "company-7", "in-5"], ["nmod:poss", "company-7", "her-6"], ["nmod:in", "employees-4", "company-7"]], [[]]], " Arthur is going to perform the coloring in the following way: In the first step, he will color the top side of the frisbee using the color ( input_int3 , input_int4 , input_int5 ).\n": [[["nsubj", "going-3", "Arthur-1"], ["nsubj", "perform-5", "Arthur-1"], ["aux", "going-3", "is-2"], ["root", "ROOT-0", "going-3"], ["mark", "perform-5", "to-4"], ["xcomp", "going-3", "perform-5"], ["det", "coloring-7", "the-6"], ["dobj", "perform-5", "coloring-7"], ["case", "way-11", "in-8"], ["det", "way-11", "the-9"], ["amod", "way-11", "following-10"], ["nmod:in", "coloring-7", "way-11"], ["case", "step-16", "In-13"], ["det", "step-16", "the-14"], ["amod", "step-16", "first-15"], ["nmod:in", "color-20", "step-16"], ["nsubj", "color-20", "he-18"], ["aux", "color-20", "will-19"], ["parataxis", "going-3", "color-20"], ["det", "side-23", "the-21"], ["amod", "side-23", "top-22"], ["dobj", "color-20", "side-23"], ["case", "frisbee-26", "of-24"], ["det", "frisbee-26", "the-25"], ["nmod:of", "side-23", "frisbee-26"], ["acl", "frisbee-26", "using-27"], ["det", "color-29", "the-28"], ["dobj", "using-27", "color-29"], ["dep", "color-29", "input_int3-31"], ["appos", "input_int3-31", "input_int4-33"], ["appos", "input_int3-31", "input_int5-35"]], [[]]], " Words can be separated by spaces, digits, and punctuation marks.\n": [[["nsubjpass", "separated-4", "Words-1"], ["aux", "separated-4", "can-2"], ["auxpass", "separated-4", "be-3"], ["root", "ROOT-0", "separated-4"], ["case", "digits-8", "by-5"], ["compound", "digits-8", "spaces-6"], ["nmod:by", "separated-4", "digits-8"], ["cc", "digits-8", "and-10"], ["compound", "marks-12", "punctuation-11"], ["nmod:by", "separated-4", "marks-12"], ["conj:and", "digits-8", "marks-12"]], [[]]], " Return the integer X between input_int0 and input_int1, inclusive, such that the absolute difference between the digit sum of X and the digit sum of input_int2 is as small as possible. If there are multiple possible values for X, return the smallest among them.\n": [[["nsubj", "small-31", "Return-1"], ["det", "X-4", "the-2"], ["compound", "X-4", "integer-3"], ["dep", "Return-1", "X-4"], ["case", "input_int0-6", "between-5"], ["nmod:between", "X-4", "input_int0-6"], ["cc", "input_int0-6", "and-7"], ["nmod:between", "X-4", "input_int1-8"], ["conj:and", "input_int0-6", "input_int1-8"], ["dep", "Return-1", "inclusive-10"], ["conj:and", "X-4", "inclusive-10"], ["dep", "difference-16", "such-12"], ["case", "difference-16", "that-13"], ["det", "difference-16", "the-14"], ["amod", "difference-16", "absolute-15"], ["dep", "Return-1", "difference-16"], ["conj:and", "X-4", "difference-16"], ["case", "sum-20", "between-17"], ["det", "sum-20", "the-18"], ["amod", "sum-20", "digit-19"], ["nmod:between", "difference-16", "sum-20"], ["case", "X-22", "of-21"], ["nmod:of", "sum-20", "X-22"], ["cc", "X-4", "and-23"], ["det", "sum-26", "the-24"], ["amod", "sum-26", "digit-25"], ["dep", "Return-1", "sum-26"], ["conj:and", "X-4", "sum-26"], ["case", "input_int2-28", "of-27"], ["nmod:of", "sum-26", "input_int2-28"], ["cop", "small-31", "is-29"], ["advmod", "small-31", "as-30"], ["root", "ROOT-0", "small-31"], ["case", "possible-33", "as-32"], ["advcl:as", "small-31", "possible-33"]], [["mark", "are-3", "If-1"], ["expl", "are-3", "there-2"], ["advcl", "return-10", "are-3"], ["amod", "values-6", "multiple-4"], ["amod", "values-6", "possible-5"], ["nsubj", "are-3", "values-6"], ["case", "X-8", "for-7"], ["nmod:for", "values-6", "X-8"], ["root", "ROOT-0", "return-10"], ["det", "smallest-12", "the-11"], ["dobj", "return-10", "smallest-12"], ["case", "them-14", "among-13"], ["nmod:among", "smallest-12", "them-14"]], [[]]], " Additionally, each star has some color.\n": [[["advmod", "has-5", "Additionally-1"], ["det", "star-4", "each-3"], ["nsubj", "has-5", "star-4"], ["root", "ROOT-0", "has-5"], ["det", "color-7", "some-6"], ["dobj", "has-5", "color-7"]], [[]]], " Return the number of different towers that John and Brus can build.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["case", "towers-6", "of-4"], ["amod", "towers-6", "different-5"], ["nmod:of", "number-3", "towers-6"], ["mark", "build-12", "that-7"], ["nsubj", "build-12", "John-8"], ["cc", "John-8", "and-9"], ["conj:and", "John-8", "Brus-10"], ["nsubj", "build-12", "Brus-10"], ["aux", "build-12", "can-11"], ["ccomp", "Return-1", "build-12"]], [[]]], " Return the least sum of two positive integers a and b such that input_int2 is a divisor of a* input_int0 +b* input_int1 .\n": [[["root", "ROOT-0", "Return-1"], ["det", "sum-4", "the-2"], ["amod", "sum-4", "least-3"], ["dobj", "Return-1", "sum-4"], ["case", "integers-8", "of-5"], ["nummod", "integers-8", "two-6"], ["amod", "integers-8", "positive-7"], ["nmod:of", "sum-4", "integers-8"], ["dep", "sum-4", "a-9"], ["cc", "Return-1", "and-10"], ["dep", "divisor-17", "b-11"], ["det:predet", "input_int2-14", "such-12"], ["det", "input_int2-14", "that-13"], ["nsubj", "divisor-17", "input_int2-14"], ["cop", "divisor-17", "is-15"], ["det", "divisor-17", "a-16"], ["conj:and", "Return-1", "divisor-17"], ["case", "input_int1-25", "of-18"], ["det", "input_int1-25", "a-19"], ["dep", "+-22", "*-20"], ["nummod", "+-22", "input_int0-21"], ["dep", "b-23", "+-22"], ["dep", "input_int1-25", "b-23"], ["amod", "input_int1-25", "*-24"], ["nmod:of", "divisor-17", "input_int1-25"]], [[]]], " According to Alice, a ribbon that connects two stars with different colors is beautiful, while a ribbon that connects two same-colored stars is not.\n": [[["case", "Alice-3", "According-1"], ["mwe", "According-1", "to-2"], ["nmod:according_to", "beautiful-15", "Alice-3"], ["det", "ribbon-6", "a-5"], ["nsubj", "connects-8", "ribbon-6"], ["nsubj", "beautiful-15", "ribbon-6"], ["ref", "ribbon-6", "that-7"], ["acl:relcl", "ribbon-6", "connects-8"], ["nummod", "stars-10", "two-9"], ["dobj", "connects-8", "stars-10"], ["case", "colors-13", "with-11"], ["amod", "colors-13", "different-12"], ["nmod:with", "stars-10", "colors-13"], ["cop", "beautiful-15", "is-14"], ["root", "ROOT-0", "beautiful-15"], ["mark", "is-25", "while-17"], ["det", "ribbon-19", "a-18"], ["nsubj", "connects-21", "ribbon-19"], ["nsubj", "is-25", "ribbon-19"], ["ref", "ribbon-19", "that-20"], ["acl:relcl", "ribbon-19", "connects-21"], ["nummod", "stars-24", "two-22"], ["amod", "stars-24", "same-colored-23"], ["dobj", "connects-21", "stars-24"], ["advcl", "beautiful-15", "is-25"], ["neg", "is-25", "not-26"]], [[]]], "Whenever you do so, you will gain power equal to the sum of all elements in the chosen subsequence.": [[["advmod", "do-3", "Whenever-1"], ["nsubj", "do-3", "you-2"], ["advcl", "gain-8", "do-3"], ["advmod", "do-3", "so-4"], ["nsubj", "gain-8", "you-6"], ["aux", "gain-8", "will-7"], ["root", "ROOT-0", "gain-8"], ["nsubj", "equal-10", "power-9"], ["xcomp", "gain-8", "equal-10"], ["det", "sum-13", "the-12"], ["prep_to", "equal-10", "sum-13"], ["det", "elements-16", "all-15"], ["prep_of", "sum-13", "elements-16"], ["det", "subsequence-20", "the-18"], ["amod", "subsequence-20", "chosen-19"], ["prep_in", "elements-16", "subsequence-20"]], [[]]], "It is a well-known fact that cosmic amoebas cannot lie on top of matter, so every cell of the input_array covered by the amoeba must only contain antimatter.": [[["nsubj", "fact-5", "It-1"], ["cop", "fact-5", "is-2"], ["det", "fact-5", "a-3"], ["amod", "fact-5", "well-known-4"], ["root", "ROOT-0", "fact-5"], ["mark", "lie-11", "that-6"], ["amod", "amoebas-8", "cosmic-7"], ["nsubj", "lie-11", "amoebas-8"], ["aux", "lie-11", "can-9"], ["neg", "lie-11", "not-10"], ["ccomp", "fact-5", "lie-11"], ["prep_on_top_of", "lie-11", "matter-15"], ["dep", "fact-5", "so-17"], ["det", "cell-19", "every-18"], ["nsubj", "contain-29", "cell-19"], ["det", "input_array-22", "the-21"], ["prep_of", "cell-19", "input_array-22"], ["vmod", "input_array-22", "covered-23"], ["det", "amoeba-26", "the-25"], ["agent", "covered-23", "amoeba-26"], ["aux", "contain-29", "must-27"], ["advmod", "contain-29", "only-28"], ["parataxis", "fact-5", "contain-29"], ["dobj", "contain-29", "antimatter-30"]], [[]]], "Given an int input_int find all positive integers less than input_int whose digits are all different.": [[["prep", "find-5", "Given-1"], ["det", "input_int-4", "an-2"], ["nn", "input_int-4", "int-3"], ["pobj", "Given-1", "input_int-4"], ["root", "ROOT-0", "find-5"], ["det", "integers-8", "all-6"], ["amod", "integers-8", "positive-7"], ["dobj", "find-5", "integers-8"], ["advmod", "than-10", "less-9"], ["advmod", "find-5", "than-10"], ["nsubj", "find-5", "input_int-11"], ["poss", "digits-13", "whose-12"], ["nsubj", "different-16", "digits-13"], ["cop", "different-16", "are-14"], ["advmod", "different-16", "all-15"], ["ccomp", "input_int-11", "different-16"]], [[]]], " input_int1 prime number is an integer greater than 1 that has no positive divisors other than 1 and itself.\n": [[["amod", "number-3", "input_int1-1"], ["amod", "number-3", "prime-2"], ["nsubj", "integer-6", "number-3"], ["cop", "integer-6", "is-4"], ["det", "integer-6", "an-5"], ["root", "ROOT-0", "integer-6"], ["nsubj", "has-11", "integer-6"], ["advmod", "1-9", "greater-7"], ["advmod", "1-9", "than-8"], ["nummod", "integer-6", "1-9"], ["ref", "integer-6", "that-10"], ["acl:relcl", "integer-6", "has-11"], ["neg", "divisors-14", "no-12"], ["amod", "divisors-14", "positive-13"], ["dobj", "has-11", "divisors-14"], ["dep", "1-17", "other-15"], ["case", "1-17", "than-16"], ["nmod:than", "divisors-14", "1-17"], ["cc", "1-17", "and-18"], ["nmod:than", "divisors-14", "itself-19"], ["conj:and", "1-17", "itself-19"]], [[]]], " Different cucumbers may have different costs.\n": [[["amod", "cucumbers-2", "Different-1"], ["nsubj", "have-4", "cucumbers-2"], ["aux", "have-4", "may-3"], ["root", "ROOT-0", "have-4"], ["amod", "costs-6", "different-5"], ["dobj", "have-4", "costs-6"]], [[]]], " (Note that we require that a < b.\n": [[["root", "ROOT-0", "Note-2"], ["advmod", "Note-2", "that-3"], ["dobj", "Note-2", "we-4"], ["nsubj", "Note-2", "require-5"], ["mark", "b.-9", "that-6"], ["det", "<-8", "a-7"], ["nsubj", "b.-9", "<-8"], ["dep", "require-5", "b.-9"]], [[]]], " It is guaranteed that at least one such String will always exist.\n": [[["nsubjpass", "guaranteed-3", "It-1"], ["auxpass", "guaranteed-3", "is-2"], ["root", "ROOT-0", "guaranteed-3"], ["mark", "exist-12", "that-4"], ["case", "least-6", "at-5"], ["nmod:npmod", "one-7", "least-6"], ["nummod", "String-9", "one-7"], ["amod", "String-9", "such-8"], ["nsubj", "exist-12", "String-9"], ["aux", "exist-12", "will-10"], ["advmod", "exist-12", "always-11"], ["ccomp", "guaranteed-3", "exist-12"]], [[]]], " Fox Ciel thinks that the number 41312432 is interesting.\n": [[["compound", "Ciel-2", "Fox-1"], ["nsubj", "thinks-3", "Ciel-2"], ["root", "ROOT-0", "thinks-3"], ["mark", "interesting-9", "that-4"], ["det", "41312432-7", "the-5"], ["compound", "41312432-7", "number-6"], ["nsubj", "interesting-9", "41312432-7"], ["cop", "interesting-9", "is-8"], ["ccomp", "thinks-3", "interesting-9"]], [[]]], " After she raises the barn, Applejack will build a wall that will divide the barn into two separate parts: one containing the first k sections and the other containing the last N-k sections, for some integer k. Each part must contain at least one section.\n": [[["mark", "raises-3", "After-1"], ["nsubj", "raises-3", "she-2"], ["advcl", "build-9", "raises-3"], ["det", "barn-5", "the-4"], ["dobj", "raises-3", "barn-5"], ["nsubj", "build-9", "Applejack-7"], ["aux", "build-9", "will-8"], ["root", "ROOT-0", "build-9"], ["det", "wall-11", "a-10"], ["dobj", "build-9", "wall-11"], ["nsubj", "divide-14", "wall-11"], ["ref", "wall-11", "that-12"], ["aux", "divide-14", "will-13"], ["acl:relcl", "wall-11", "divide-14"], ["det", "barn-16", "the-15"], ["dobj", "divide-14", "barn-16"], ["case", "parts-20", "into-17"], ["nummod", "parts-20", "two-18"], ["amod", "parts-20", "separate-19"], ["nmod:into", "divide-14", "parts-20"], ["dobj", "build-9", "one-22"], ["conj:and", "wall-11", "one-22"], ["nsubj", "divide-14", "one-22"], ["acl", "one-22", "containing-23"], ["det", "sections-27", "the-24"], ["amod", "sections-27", "first-25"], ["compound", "sections-27", "k-26"], ["dobj", "containing-23", "sections-27"], ["cc", "wall-11", "and-28"], ["det", "other-30", "the-29"], ["dobj", "build-9", "other-30"], ["conj:and", "wall-11", "other-30"], ["nsubj", "divide-14", "other-30"], ["acl", "other-30", "containing-31"], ["det", "sections-35", "the-32"], ["amod", "sections-35", "last-33"], ["nummod", "sections-35", "N-k-34"], ["dobj", "containing-31", "sections-35"], ["case", "k.-40", "for-37"], ["det", "k.-40", "some-38"], ["compound", "k.-40", "integer-39"], ["nmod:for", "sections-35", "k.-40"], ["det", "part-42", "Each-41"], ["nsubj", "contain-44", "part-42"], ["aux", "contain-44", "must-43"], ["acl:relcl", "k.-40", "contain-44"], ["case", "least-46", "at-45"], ["nmod:npmod", "one-47", "least-46"], ["nummod", "section-48", "one-47"], ["dobj", "contain-44", "section-48"]], [[]]], " For each i and j, the character input_array[i][j] represents the level candidate i has in skill j.\n": [[["case", "i-3", "For-1"], ["det", "i-3", "each-2"], ["nmod:for", "represents-16", "i-3"], ["cc", "i-3", "and-4"], ["conj:and", "i-3", "j-5"], ["nmod:for", "represents-16", "j-5"], ["det", "input_array-9", "the-7"], ["compound", "input_array-9", "character-8"], ["nsubj", "represents-16", "input_array-9"], ["compound", "-RSB--15", "-LSB--10"], ["compound", "-RSB--15", "i-11"], ["compound", "-RSB--15", "-RSB--12"], ["compound", "-RSB--15", "-LSB--13"], ["compound", "-RSB--15", "j-14"], ["dep", "input_array-9", "-RSB--15"], ["root", "ROOT-0", "represents-16"], ["det", "candidate-19", "the-17"], ["compound", "candidate-19", "level-18"], ["dobj", "represents-16", "candidate-19"], ["nsubj", "j.-24", "i-20"], ["aux", "j.-24", "has-21"], ["case", "j.-24", "in-22"], ["compound", "j.-24", "skill-23"], ["acl:relcl", "candidate-19", "j.-24"]], [[]]], "Return this maximum length.": [[["root", "ROOT-0", "Return-1"], ["det", "length-4", "this-2"], ["amod", "length-4", "maximum-3"], ["dep", "Return-1", "length-4"]], [[]]], " More precisely, return a String that could have been the original message.\n": [[["advmod", "precisely-2", "More-1"], ["advmod", "return-4", "precisely-2"], ["root", "ROOT-0", "return-4"], ["det", "String-6", "a-5"], ["dobj", "return-4", "String-6"], ["nsubj", "message-13", "String-6"], ["ref", "String-6", "that-7"], ["aux", "message-13", "could-8"], ["aux", "message-13", "have-9"], ["cop", "message-13", "been-10"], ["det", "message-13", "the-11"], ["amod", "message-13", "original-12"], ["acl:relcl", "String-6", "message-13"]], [[]]], " The department of employee x is formed by employee x and all the employees such that x is their boss.\n": [[["det", "department-2", "The-1"], ["nsubjpass", "formed-7", "department-2"], ["case", "x-5", "of-3"], ["compound", "x-5", "employee-4"], ["nmod:of", "department-2", "x-5"], ["auxpass", "formed-7", "is-6"], ["root", "ROOT-0", "formed-7"], ["case", "x-10", "by-8"], ["compound", "x-10", "employee-9"], ["nmod:by", "formed-7", "x-10"], ["cc", "x-10", "and-11"], ["det:predet", "employees-14", "all-12"], ["det", "employees-14", "the-13"], ["nmod:by", "formed-7", "employees-14"], ["conj:and", "x-10", "employees-14"], ["advcl", "formed-7", "such-15"], ["mark", "boss-20", "that-16"], ["nsubj", "boss-20", "x-17"], ["cop", "boss-20", "is-18"], ["nmod:poss", "boss-20", "their-19"], ["ccomp", "formed-7", "boss-20"]], [[]]], "Therefore, you want to remove zero or more squares from the beginning of the bar, and then zero or more squares from the end of the bar, in such way that the remaining bar will contain no repeated input_array.": [[["advmod", "want-4", "Therefore-1"], ["nsubj", "want-4", "you-3"], ["nsubj", "remove-6", "you-3"], ["nsubj", "zero-20", "you-3"], ["root", "ROOT-0", "want-4"], ["aux", "remove-6", "to-5"], ["xcomp", "want-4", "remove-6"], ["nn", "squares-10", "zero-7"], ["conj_or", "zero-7", "more-9"], ["nn", "squares-10", "more-9"], ["dobj", "remove-6", "squares-10"], ["det", "beginning-13", "the-12"], ["prep_from", "remove-6", "beginning-13"], ["det", "bar-16", "the-15"], ["prep_of", "beginning-13", "bar-16"], ["advmod", "zero-20", "then-19"], ["xcomp", "want-4", "zero-20"], ["conj_and", "remove-6", "zero-20"], ["cc", "more-22", "or-21"], ["num", "squares-23", "more-22"], ["dobj", "zero-20", "squares-23"], ["det", "end-26", "the-25"], ["prep_from", "zero-20", "end-26"], ["det", "bar-29", "the-28"], ["prep_of", "end-26", "bar-29"], ["amod", "way-33", "such-32"], ["prep_in", "zero-20", "way-33"], ["mark", "contain-39", "that-34"], ["det", "bar-37", "the-35"], ["amod", "bar-37", "remaining-36"], ["nsubj", "contain-39", "bar-37"], ["aux", "contain-39", "will-38"], ["ccomp", "remove-6", "contain-39"], ["neg", "input_array-42", "no-40"], ["amod", "input_array-42", "repeated-41"], ["dobj", "contain-39", "input_array-42"]], [[]]], "The cost of palindromization in dollars is equal to the value added or subtracted.": [[["det", "cost-2", "The-1"], ["nsubj", "equal-8", "cost-2"], ["prep_of", "cost-2", "palindromization-4"], ["prep_in", "palindromization-4", "dollars-6"], ["cop", "equal-8", "is-7"], ["root", "ROOT-0", "equal-8"], ["det", "value-11", "the-10"], ["prep_to", "equal-8", "value-11"], ["vmod", "value-11", "added-12"], ["vmod", "value-11", "subtracted-14"], ["conj_or", "added-12", "subtracted-14"]], [[]]], " Each employee only does one type of work.\n": [[["det", "employee-2", "Each-1"], ["nsubj", "does-4", "employee-2"], ["advmod", "does-4", "only-3"], ["root", "ROOT-0", "does-4"], ["nummod", "type-6", "one-5"], ["dobj", "does-4", "type-6"], ["case", "work-8", "of-7"], ["nmod:of", "type-6", "work-8"]], [[]]], " Time to eat a lot of mandarins with your friends.\n": [[["nsubj", "eat-3", "Time-1"], ["mark", "eat-3", "to-2"], ["root", "ROOT-0", "eat-3"], ["det", "lot-5", "a-4"], ["dobj", "eat-3", "lot-5"], ["case", "mandarins-7", "of-6"], ["nmod:of", "lot-5", "mandarins-7"], ["case", "friends-10", "with-8"], ["nmod:poss", "friends-10", "your-9"], ["nmod:with", "eat-3", "friends-10"]], [[]]], " Check whether f( input_array0 ) equals f( input_array1 ).\n": [[["root", "ROOT-0", "Check-1"], ["mark", "equals-7", "whether-2"], ["nsubj", "equals-7", "f-3"], ["appos", "f-3", "input_array0-5"], ["ccomp", "Check-1", "equals-7"], ["dobj", "equals-7", "f-8"], ["appos", "f-8", "input_array1-10"]], [[]]], " Each employee of the company has their own department.\n": [[["det", "employee-2", "Each-1"], ["nsubj", "has-6", "employee-2"], ["case", "company-5", "of-3"], ["det", "company-5", "the-4"], ["nmod:of", "employee-2", "company-5"], ["root", "ROOT-0", "has-6"], ["nmod:poss", "department-9", "their-7"], ["amod", "department-9", "own-8"], ["dobj", "has-6", "department-9"]], [[]]], "Your method should return a double, equal to the maximum distance that the car can travel (in kilometers) with the given amount of input_int, and travelling at a constant velocity equal to one of the elements of input_array1.": [[["poss", "method-2", "Your-1"], ["nsubj", "return-4", "method-2"], ["aux", "return-4", "should-3"], ["root", "ROOT-0", "return-4"], ["det", "distance-12", "a-5"], ["amod", "distance-12", "double-6"], ["amod", "distance-12", "equal-8"], ["det", "maximum-11", "the-10"], ["prep_to", "equal-8", "maximum-11"], ["dobj", "return-4", "distance-12"], ["mark", "travel-17", "that-13"], ["det", "car-15", "the-14"], ["nsubj", "travel-17", "car-15"], ["aux", "travel-17", "can-16"], ["dep", "distance-12", "travel-17"], ["dep", "travel-17", "in-19"], ["pobj", "in-19", "kilometers-20"], ["det", "amount-25", "the-23"], ["amod", "amount-25", "given-24"], ["prep_with", "travel-17", "amount-25"], ["prep_of", "distance-12", "input_int-27"], ["dobj", "return-4", "travelling-30"], ["conj_and", "distance-12", "travelling-30"], ["det", "velocity-34", "a-32"], ["amod", "velocity-34", "constant-33"], ["prep_at", "travelling-30", "velocity-34"], ["amod", "velocity-34", "equal-35"], ["prep_to", "equal-35", "one-37"], ["det", "elements-40", "the-39"], ["prep_of", "travelling-30", "elements-40"], ["prep_of", "travelling-30", "input_array1-42"]], [[]]], " Therefore, you want to remove zero or more squares from the beginning of the bar, and then zero or more squares from the end of the bar, in such way that the remaining bar will contain no repeated input_array.\n": [[["advmod", "want-4", "Therefore-1"], ["nsubj", "want-4", "you-3"], ["nsubj", "remove-6", "you-3"], ["nsubj", "zero-20", "you-3"], ["root", "ROOT-0", "want-4"], ["mark", "remove-6", "to-5"], ["xcomp", "want-4", "remove-6"], ["compound", "squares-10", "zero-7"], ["cc", "zero-7", "or-8"], ["conj:or", "zero-7", "more-9"], ["compound", "squares-10", "more-9"], ["dobj", "remove-6", "squares-10"], ["case", "beginning-13", "from-11"], ["det", "beginning-13", "the-12"], ["nmod:from", "remove-6", "beginning-13"], ["case", "bar-16", "of-14"], ["det", "bar-16", "the-15"], ["nmod:of", "beginning-13", "bar-16"], ["cc", "remove-6", "and-18"], ["advmod", "zero-20", "then-19"], ["xcomp", "want-4", "zero-20"], ["conj:and", "remove-6", "zero-20"], ["cc", "more-22", "or-21"], ["nummod", "squares-23", "more-22"], ["dobj", "zero-20", "squares-23"], ["case", "end-26", "from-24"], ["det", "end-26", "the-25"], ["nmod:from", "zero-20", "end-26"], ["case", "bar-29", "of-27"], ["det", "bar-29", "the-28"], ["nmod:of", "end-26", "bar-29"], ["case", "way-33", "in-31"], ["amod", "way-33", "such-32"], ["nmod:in", "zero-20", "way-33"], ["mark", "contain-39", "that-34"], ["det", "bar-37", "the-35"], ["amod", "bar-37", "remaining-36"], ["nsubj", "contain-39", "bar-37"], ["aux", "contain-39", "will-38"], ["ccomp", "remove-6", "contain-39"], ["neg", "input_array-42", "no-40"], ["amod", "input_array-42", "repeated-41"], ["dobj", "contain-39", "input_array-42"]], [[]]], " You will be given a String[] input.\n": [[["nsubjpass", "given-4", "You-1"], ["aux", "given-4", "will-2"], ["auxpass", "given-4", "be-3"], ["root", "ROOT-0", "given-4"], ["det", "input-9", "a-5"], ["compound", "input-9", "String-6"], ["compound", "input-9", "-LSB--7"], ["compound", "input-9", "-RSB--8"], ["dobj", "given-4", "input-9"]], [[]]], " Return the smallest number of steps needed to change input_int into a Fibonacci number.\n": [[["advmod", "needed-7", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "smallest-3"], ["nsubj", "needed-7", "number-4"], ["nsubj", "change-9", "number-4"], ["case", "steps-6", "of-5"], ["nmod:of", "number-4", "steps-6"], ["root", "ROOT-0", "needed-7"], ["mark", "change-9", "to-8"], ["xcomp", "needed-7", "change-9"], ["dobj", "change-9", "input_int-10"], ["case", "number-14", "into-11"], ["det", "number-14", "a-12"], ["compound", "number-14", "Fibonacci-13"], ["nmod:into", "change-9", "number-14"]], [[]]], " You have several input_array with mandarins.\n": [[["nsubj", "have-2", "You-1"], ["root", "ROOT-0", "have-2"], ["amod", "input_array-4", "several-3"], ["dobj", "have-2", "input_array-4"], ["case", "mandarins-6", "with-5"], ["nmod:with", "have-2", "mandarins-6"]], [[]]], " This chocolate bar consists of N squares, numbered 0 through N-1.\n": [[["det", "bar-3", "This-1"], ["compound", "bar-3", "chocolate-2"], ["nsubj", "consists-4", "bar-3"], ["root", "ROOT-0", "consists-4"], ["case", "squares-7", "of-5"], ["compound", "squares-7", "N-6"], ["nmod:of", "consists-4", "squares-7"], ["dep", "consists-4", "numbered-9"], ["dobj", "numbered-9", "0-10"], ["case", "N-1-12", "through-11"], ["nmod:through", "numbered-9", "N-1-12"]], [[]]], " 2 =   0 + 0 + 2   :  'A' in element 0 position 2\n": [[["root", "ROOT-0", "2-1"], ["dep", "0-5", "=-2"], ["nummod", "0-5", "0-3"], ["amod", "0-5", "+-4"], ["acl:relcl", "2-1", "0-5"], ["compound", "2-7", "+-6"], ["dep", "2-1", "2-7"], ["dep", "2-7", "A-10"], ["case", "position-15", "in-12"], ["compound", "position-15", "element-13"], ["nummod", "position-15", "0-14"], ["nmod:in", "A-10", "position-15"], ["nummod", "position-15", "2-16"]], [[]]], " Given a range of integers from input_int0 to input_int1 (inclusive), determine how many numbers within that range are evenly divisible by input_int2.\n": [[["case", "range-3", "Given-1"], ["det", "range-3", "a-2"], ["nmod:given", "determine-14", "range-3"], ["case", "integers-5", "of-4"], ["nmod:of", "range-3", "integers-5"], ["case", "input_int1-9", "from-6"], ["nummod", "input_int1-9", "input_int0-7"], ["dep", "input_int1-9", "to-8"], ["nmod:from", "integers-5", "input_int1-9"], ["appos", "input_int1-9", "inclusive-11"], ["root", "ROOT-0", "determine-14"], ["advmod", "many-16", "how-15"], ["dep", "divisible-23", "many-16"], ["nsubj", "divisible-23", "numbers-17"], ["case", "range-20", "within-18"], ["det", "range-20", "that-19"], ["nmod:within", "numbers-17", "range-20"], ["cop", "divisible-23", "are-21"], ["advmod", "divisible-23", "evenly-22"], ["ccomp", "determine-14", "divisible-23"], ["case", "input_int2-25", "by-24"], ["nmod:by", "divisible-23", "input_int2-25"]], [[]]], " So, the answer for this example is 2.\n": [[["advmod", "2-9", "So-1"], ["det", "answer-4", "the-3"], ["nsubj", "2-9", "answer-4"], ["case", "example-7", "for-5"], ["det", "example-7", "this-6"], ["nmod:for", "answer-4", "example-7"], ["cop", "2-9", "is-8"], ["root", "ROOT-0", "2-9"]], [[]]], " Brus and Gogo are now trying to calculate how many deer have not lost any antlers yet.\n": [[["nsubj", "trying-6", "Brus-1"], ["nsubj", "calculate-8", "Brus-1"], ["cc", "Brus-1", "and-2"], ["conj:and", "Brus-1", "Gogo-3"], ["nsubj", "trying-6", "Gogo-3"], ["nsubj", "calculate-8", "Gogo-3"], ["aux", "trying-6", "are-4"], ["advmod", "trying-6", "now-5"], ["root", "ROOT-0", "trying-6"], ["mark", "calculate-8", "to-7"], ["xcomp", "trying-6", "calculate-8"], ["advmod", "many-10", "how-9"], ["dep", "lost-14", "many-10"], ["nsubj", "lost-14", "deer-11"], ["aux", "lost-14", "have-12"], ["neg", "lost-14", "not-13"], ["ccomp", "calculate-8", "lost-14"], ["det", "antlers-16", "any-15"], ["dobj", "lost-14", "antlers-16"], ["advmod", "lost-14", "yet-17"]], [[]]], "Return the integer X between input_int0 and input_int1, inclusive, such that the absolute difference between the digit sum of X and the digit sum of input_int2 is as small as possible. If there are multiple possible values for X, return the smallest among them.": [[["nsubj", "small-31", "Return-1"], ["det", "X-4", "the-2"], ["nn", "X-4", "integer-3"], ["dep", "Return-1", "X-4"], ["prep_between", "X-4", "input_int0-6"], ["prep_between", "X-4", "input_int1-8"], ["conj_and", "input_int0-6", "input_int1-8"], ["dep", "Return-1", "inclusive-10"], ["conj_and", "X-4", "inclusive-10"], ["dep", "X-4", "such-12"], ["dep", "Return-1", "that-13"], ["conj_and", "X-4", "that-13"], ["det", "difference-16", "the-14"], ["amod", "difference-16", "absolute-15"], ["prep_that", "X-4", "difference-16"], ["det", "sum-20", "the-18"], ["amod", "sum-20", "digit-19"], ["prep_between", "difference-16", "sum-20"], ["prep_of", "sum-20", "X-22"], ["det", "sum-26", "the-24"], ["amod", "sum-26", "digit-25"], ["dep", "Return-1", "sum-26"], ["conj_and", "X-4", "sum-26"], ["prep_of", "sum-26", "input_int2-28"], ["cop", "small-31", "is-29"], ["advmod", "small-31", "as-30"], ["root", "ROOT-0", "small-31"], ["prep_as", "small-31", "possible-33"]], [["mark", "are-3", "If-1"], ["expl", "are-3", "there-2"], ["advcl", "return-10", "are-3"], ["amod", "values-6", "multiple-4"], ["amod", "values-6", "possible-5"], ["nsubj", "are-3", "values-6"], ["prep_for", "values-6", "X-8"], ["root", "ROOT-0", "return-10"], ["det", "smallest-12", "the-11"], ["dobj", "return-10", "smallest-12"], ["prep_among", "smallest-12", "them-14"]], [[]]], "In other words, in each move Gogo takes a single ball from one bin and places it into another bin.": [[["amod", "words-3", "other-2"], ["prep_in", "takes-9", "words-3"], ["det", "move-7", "each-6"], ["prep_in", "takes-9", "move-7"], ["nsubj", "takes-9", "Gogo-8"], ["nsubj", "places-17", "Gogo-8"], ["root", "ROOT-0", "takes-9"], ["det", "ball-12", "a-10"], ["amod", "ball-12", "single-11"], ["dobj", "takes-9", "ball-12"], ["num", "bin-15", "one-14"], ["prep_from", "takes-9", "bin-15"], ["conj_and", "takes-9", "places-17"], ["dobj", "places-17", "it-18"], ["det", "bin-21", "another-20"], ["prep_into", "places-17", "bin-21"]], [[]]], "Return the smallest difference that can be achieved.": [[["root", "ROOT-0", "Return-1"], ["det", "difference-4", "the-2"], ["amod", "difference-4", "smallest-3"], ["dobj", "Return-1", "difference-4"], ["nsubjpass", "achieved-8", "difference-4"], ["aux", "achieved-8", "can-6"], ["auxpass", "achieved-8", "be-7"], ["rcmod", "difference-4", "achieved-8"]], [[]]], " Compute and return the number of diverse departments in Shiny's company.\n": [[["root", "ROOT-0", "Compute-1"], ["cc", "Compute-1", "and-2"], ["conj:and", "Compute-1", "return-3"], ["det", "number-5", "the-4"], ["dobj", "return-3", "number-5"], ["case", "departments-8", "of-6"], ["amod", "departments-8", "diverse-7"], ["nmod:of", "number-5", "departments-8"], ["case", "company-12", "in-9"], ["nmod:poss", "company-12", "Shiny-10"], ["case", "Shiny-10", "'s-11"], ["nmod:in", "return-3", "company-12"]], [[]]], " mapping = lambda possibility: abs(mapping1(possibility)-mapping1(input_int2))\n": [[["compound", "possibility-4", "mapping-1"], ["nummod", "possibility-4", "=-2"], ["compound", "possibility-4", "lambda-3"], ["root", "ROOT-0", "possibility-4"], ["dep", "possibility-4", "abs-6"], ["amod", "possibility-10", "mapping1-8"], ["dep", "abs-6", "possibility-10"], ["amod", "input_int2-15", "mapping1-13"], ["dep", "possibility-10", "input_int2-15"]], [[]]], " Some of the sections will be empty, others will contain a single cow each.\n": [[["nsubj", "empty-7", "Some-1"], ["case", "sections-4", "of-2"], ["det", "sections-4", "the-3"], ["nmod:of", "Some-1", "sections-4"], ["aux", "empty-7", "will-5"], ["cop", "empty-7", "be-6"], ["ccomp", "contain-11", "empty-7"], ["nsubj", "contain-11", "others-9"], ["aux", "contain-11", "will-10"], ["root", "ROOT-0", "contain-11"], ["det", "cow-14", "a-12"], ["amod", "cow-14", "single-13"], ["dobj", "contain-11", "cow-14"], ["dep", "cow-14", "each-15"]], [[]]], "Little Elephant wants to obtain a row in which all balls have the same color.": [[["nn", "Elephant-2", "Little-1"], ["nsubj", "wants-3", "Elephant-2"], ["nsubj", "obtain-5", "Elephant-2"], ["root", "ROOT-0", "wants-3"], ["aux", "obtain-5", "to-4"], ["xcomp", "wants-3", "obtain-5"], ["det", "row-7", "a-6"], ["dobj", "obtain-5", "row-7"], ["prep_in", "have-12", "row-7"], ["det", "balls-11", "all-10"], ["nsubj", "have-12", "balls-11"], ["rcmod", "row-7", "have-12"], ["det", "color-15", "the-13"], ["amod", "color-15", "same-14"], ["dobj", "have-12", "color-15"]], [[]]], " Return the number of different ways that Romeo can place the cosmic amoeba on the input_array.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["case", "ways-6", "of-4"], ["amod", "ways-6", "different-5"], ["nmod:of", "number-3", "ways-6"], ["mark", "place-10", "that-7"], ["nsubj", "place-10", "Romeo-8"], ["aux", "place-10", "can-9"], ["ccomp", "Return-1", "place-10"], ["det", "amoeba-13", "the-11"], ["amod", "amoeba-13", "cosmic-12"], ["dobj", "place-10", "amoeba-13"], ["case", "input_array-16", "on-14"], ["det", "input_array-16", "the-15"], ["nmod:on", "place-10", "input_array-16"]], [[]]], " There are N stars and N-1 ribbons on the tree.\n": [[["expl", "N-3", "There-1"], ["aux", "N-3", "are-2"], ["root", "ROOT-0", "N-3"], ["dobj", "N-3", "stars-4"], ["cc", "stars-4", "and-5"], ["compound", "ribbons-7", "N-1-6"], ["dobj", "N-3", "ribbons-7"], ["conj:and", "stars-4", "ribbons-7"], ["case", "tree-10", "on-8"], ["det", "tree-10", "the-9"], ["nmod:on", "N-3", "tree-10"]], [[]]], " Ciel thinks that skill input_int is the most important skill a maid should have.\n": [[["nsubj", "thinks-2", "Ciel-1"], ["root", "ROOT-0", "thinks-2"], ["mark", "skill-10", "that-3"], ["compound", "input_int-5", "skill-4"], ["nsubj", "skill-10", "input_int-5"], ["cop", "skill-10", "is-6"], ["det", "skill-10", "the-7"], ["advmod", "important-9", "most-8"], ["amod", "skill-10", "important-9"], ["ccomp", "thinks-2", "skill-10"], ["det", "maid-12", "a-11"], ["nsubj", "have-14", "maid-12"], ["aux", "have-14", "should-13"], ["acl:relcl", "skill-10", "have-14"]], [[]]], " Formally, for each i between 1 and N-1, inclusive, input_array1[i] will be between 0 and i-1, inclusive.\n": [[["advmod", "0-20", "Formally-1"], ["case", "i-5", "for-3"], ["det", "i-5", "each-4"], ["nmod:for", "0-20", "i-5"], ["case", "1-7", "between-6"], ["nmod:between", "i-5", "1-7"], ["cc", "i-5", "and-8"], ["conj:and", "i-5", "N-1-9"], ["nmod:for", "0-20", "N-1-9"], ["appos", "N-1-9", "inclusive-11"], ["amod", "-RSB--16", "input_array1-13"], ["compound", "-RSB--16", "-LSB--14"], ["compound", "-RSB--16", "i-15"], ["nsubj", "0-20", "-RSB--16"], ["aux", "0-20", "will-17"], ["cop", "0-20", "be-18"], ["case", "0-20", "between-19"], ["root", "ROOT-0", "0-20"], ["cc", "0-20", "and-21"], ["conj:and", "0-20", "i-1-22"], ["advmod", "0-20", "inclusive-24"]], [[]]], " You are given two int[]s, input_array0 and input_array1 .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["nummod", "-LSB--6", "two-4"], ["compound", "-LSB--6", "int-5"], ["dobj", "given-3", "-LSB--6"], ["amod", "-LSB--6", "-RSB--7"], ["dep", "-RSB--7", "s-8"], ["nummod", "s-8", "input_array0-10"], ["cc", "s-8", "and-11"], ["dep", "-RSB--7", "input_array1-12"], ["conj:and", "s-8", "input_array1-12"]], [[]]], "Return a int[] with exactly two elements {x,y}, where x is the smallest possible number of deer that still have two antlers, and y is the largest possible number of those deer.": [[["advmod", "-RSB--5", "Return-1"], ["det", "-LSB--4", "a-2"], ["nn", "-LSB--4", "int-3"], ["nsubj", "-RSB--5", "-LSB--4"], ["root", "ROOT-0", "-RSB--5"], ["advmod", "elements-9", "exactly-7"], ["num", "elements-9", "two-8"], ["prep_with", "-RSB--5", "elements-9"], ["dep", "elements-9", "x-11"], ["appos", "x-11", "y-13"], ["advmod", "number-22", "where-16"], ["nsubj", "number-22", "x-17"], ["cop", "number-22", "is-18"], ["det", "number-22", "the-19"], ["amod", "number-22", "smallest-20"], ["amod", "number-22", "possible-21"], ["rcmod", "elements-9", "number-22"], ["prep_of", "number-22", "deer-24"], ["nsubj", "have-27", "deer-24"], ["advmod", "have-27", "still-26"], ["rcmod", "deer-24", "have-27"], ["num", "antlers-29", "two-28"], ["dobj", "have-27", "antlers-29"], ["nsubj", "number-37", "y-32"], ["cop", "number-37", "is-33"], ["det", "number-37", "the-34"], ["amod", "number-37", "largest-35"], ["amod", "number-37", "possible-36"], ["conj_and", "-RSB--5", "number-37"], ["det", "deer-40", "those-39"], ["prep_of", "number-37", "deer-40"]], [[]]], " More precisely, he wanted to reach a state with input_array[0] balls in bin 0, input_array[1] balls in bin 1, and so on, such that the following two conditions are met:\n": [[["advmod", "precisely-2", "More-1"], ["advmod", "wanted-5", "precisely-2"], ["nsubj", "wanted-5", "he-4"], ["nsubj", "reach-7", "he-4"], ["root", "ROOT-0", "wanted-5"], ["mark", "reach-7", "to-6"], ["xcomp", "wanted-5", "reach-7"], ["det", "state-9", "a-8"], ["dobj", "reach-7", "state-9"], ["mark", "-LSB--12", "with-10"], ["advmod", "-LSB--12", "input_array-11"], ["advcl", "reach-7", "-LSB--12"], ["nummod", "balls-15", "0-13"], ["amod", "balls-15", "-RSB--14"], ["nsubj", "such-33", "balls-15"], ["case", "bin-17", "in-16"], ["nmod:in", "balls-15", "bin-17"], ["nummod", "bin-17", "0-18"], ["advmod", "balls-24", "input_array-20"], ["compound", "1-22", "-LSB--21"], ["nummod", "balls-24", "1-22"], ["amod", "balls-24", "-RSB--23"], ["appos", "balls-15", "balls-24"], ["case", "bin-26", "in-25"], ["nmod:in", "balls-24", "bin-26"], ["nummod", "bin-26", "1-27"], ["cc", "balls-15", "and-29"], ["advmod", "on-31", "so-30"], ["conj:and", "balls-15", "on-31"], ["nsubj", "such-33", "on-31"], ["xcomp", "-LSB--12", "such-33"], ["mark", "met-40", "that-34"], ["det", "conditions-38", "the-35"], ["amod", "conditions-38", "following-36"], ["nummod", "conditions-38", "two-37"], ["nsubjpass", "met-40", "conditions-38"], ["auxpass", "met-40", "are-39"], ["ccomp", "-LSB--12", "met-40"]], [[]]], " Return \"Possible\" (quotes for clarity) if input_array1 can be obtained from input_array0 by erasing exactly one character.\n": [[["compound", "Possible-3", "Return-1"], ["root", "ROOT-0", "Possible-3"], ["dep", "Possible-3", "quotes-6"], ["case", "clarity-8", "for-7"], ["nmod:for", "quotes-6", "clarity-8"], ["mark", "obtained-14", "if-10"], ["nsubjpass", "obtained-14", "input_array1-11"], ["aux", "obtained-14", "can-12"], ["auxpass", "obtained-14", "be-13"], ["dep", "Possible-3", "obtained-14"], ["case", "input_array0-16", "from-15"], ["nmod:from", "obtained-14", "input_array0-16"], ["mark", "erasing-18", "by-17"], ["advcl", "obtained-14", "erasing-18"], ["advmod", "character-21", "exactly-19"], ["nummod", "character-21", "one-20"], ["dobj", "erasing-18", "character-21"]], [[]]], " The amoeba is a rectangle of size 1xK.\n": [[["det", "amoeba-2", "The-1"], ["nsubj", "rectangle-5", "amoeba-2"], ["cop", "rectangle-5", "is-3"], ["det", "rectangle-5", "a-4"], ["root", "ROOT-0", "rectangle-5"], ["case", "1xK-8", "of-6"], ["compound", "1xK-8", "size-7"], ["nmod:of", "rectangle-5", "1xK-8"]], [[]]], " You are to calculate this statistic for a certain player.\n": [[["nsubj", "are-2", "You-1"], ["nsubj", "calculate-4", "You-1"], ["root", "ROOT-0", "are-2"], ["mark", "calculate-4", "to-3"], ["xcomp", "are-2", "calculate-4"], ["det", "statistic-6", "this-5"], ["dobj", "calculate-4", "statistic-6"], ["case", "player-10", "for-7"], ["det", "player-10", "a-8"], ["amod", "player-10", "certain-9"], ["nmod:for", "statistic-6", "player-10"]], [[]]], " Currently, Ash has R red marbles, G green marbles, and B blue marbles.\n": [[["advmod", "has-4", "Currently-1"], ["nsubj", "has-4", "Ash-3"], ["root", "ROOT-0", "has-4"], ["compound", "marbles-7", "R-5"], ["amod", "marbles-7", "red-6"], ["dobj", "has-4", "marbles-7"], ["compound", "marbles-11", "G-9"], ["amod", "marbles-11", "green-10"], ["dobj", "has-4", "marbles-11"], ["conj:and", "marbles-7", "marbles-11"], ["cc", "marbles-7", "and-13"], ["compound", "marbles-16", "B-14"], ["amod", "marbles-16", "blue-15"], ["dobj", "has-4", "marbles-16"], ["conj:and", "marbles-7", "marbles-16"]], [[]]], " A palindromic string is a string that reads the same both forwards and backwards.\n": [[["det", "string-3", "A-1"], ["amod", "string-3", "palindromic-2"], ["nsubj", "string-6", "string-3"], ["cop", "string-6", "is-4"], ["det", "string-6", "a-5"], ["root", "ROOT-0", "string-6"], ["nsubj", "reads-8", "string-6"], ["ref", "string-6", "that-7"], ["acl:relcl", "string-6", "reads-8"], ["det", "same-10", "the-9"], ["dobj", "reads-8", "same-10"], ["cc:preconj", "forwards-12", "both-11"], ["advmod", "reads-8", "forwards-12"], ["cc", "forwards-12", "and-13"], ["advmod", "reads-8", "backwards-14"], ["conj:and", "forwards-12", "backwards-14"]], [[]]], " If the two infinite strings are equal, return \"Equal\".\n": [[["mark", "equal-7", "If-1"], ["det", "strings-5", "the-2"], ["nummod", "strings-5", "two-3"], ["amod", "strings-5", "infinite-4"], ["nsubj", "equal-7", "strings-5"], ["cop", "equal-7", "are-6"], ["advcl", "Equal-11", "equal-7"], ["nsubj", "Equal-11", "return-9"], ["root", "ROOT-0", "Equal-11"]], [[]]], " If there are multiple possible values for X, return the smallest among them.\n": [[["mark", "are-3", "If-1"], ["expl", "are-3", "there-2"], ["advcl", "return-10", "are-3"], ["amod", "values-6", "multiple-4"], ["amod", "values-6", "possible-5"], ["nsubj", "are-3", "values-6"], ["case", "X-8", "for-7"], ["nmod:for", "values-6", "X-8"], ["root", "ROOT-0", "return-10"], ["det", "smallest-12", "the-11"], ["dobj", "return-10", "smallest-12"], ["case", "them-14", "among-13"], ["nmod:among", "smallest-12", "them-14"]], [[]]], " You are facing N fairies, numbered 0 through N-1.\n": [[["nsubj", "facing-3", "You-1"], ["aux", "facing-3", "are-2"], ["root", "ROOT-0", "facing-3"], ["compound", "fairies-5", "N-4"], ["dobj", "facing-3", "fairies-5"], ["acl", "fairies-5", "numbered-7"], ["dobj", "numbered-7", "0-8"], ["case", "N-1-10", "through-9"], ["nmod:through", "numbered-7", "N-1-10"]], [[]]], " Initially, each deer had exactly two antlers, but since then some deer may have lost one or both antlers.\n": [[["advmod", "had-5", "Initially-1"], ["det", "deer-4", "each-3"], ["nsubj", "had-5", "deer-4"], ["root", "ROOT-0", "had-5"], ["advmod", "antlers-8", "exactly-6"], ["nummod", "antlers-8", "two-7"], ["dobj", "had-5", "antlers-8"], ["cc", "had-5", "but-10"], ["case", "then-12", "since-11"], ["nmod:since", "lost-17", "then-12"], ["det", "deer-14", "some-13"], ["nsubj", "lost-17", "deer-14"], ["aux", "lost-17", "may-15"], ["aux", "lost-17", "have-16"], ["conj:but", "had-5", "lost-17"], ["dobj", "lost-17", "one-18"], ["cc", "one-18", "or-19"], ["det", "antlers-21", "both-20"], ["dobj", "lost-17", "antlers-21"], ["conj:or", "one-18", "antlers-21"]], [[]]], "Return the number of different passwords Fred needs to try.": [[["det", "number-3", "the-2"], ["prep_return", "needs-8", "number-3"], ["amod", "passwords-6", "different-5"], ["prep_of", "number-3", "passwords-6"], ["nsubj", "needs-8", "Fred-7"], ["nsubj", "try-10", "Fred-7"], ["root", "ROOT-0", "needs-8"], ["aux", "try-10", "to-9"], ["xcomp", "needs-8", "try-10"]], [[]]], " Two ways are considered different if and only if there is a input_array cell that is covered in one but not the other.\n": [[["nummod", "ways-2", "Two-1"], ["nsubjpass", "considered-4", "ways-2"], ["auxpass", "considered-4", "are-3"], ["root", "ROOT-0", "considered-4"], ["xcomp", "considered-4", "different-5"], ["dep", "different-5", "if-6"], ["cc", "different-5", "and-7"], ["xcomp", "considered-4", "only-8"], ["conj:and", "different-5", "only-8"], ["mark", "is-11", "if-9"], ["expl", "is-11", "there-10"], ["advcl", "considered-4", "is-11"], ["det", "cell-14", "a-12"], ["amod", "cell-14", "input_array-13"], ["nsubj", "is-11", "cell-14"], ["nsubjpass", "covered-17", "cell-14"], ["ref", "cell-14", "that-15"], ["auxpass", "covered-17", "is-16"], ["acl:relcl", "cell-14", "covered-17"], ["case", "one-19", "in-18"], ["nmod:in", "covered-17", "one-19"], ["cc", "not-21", "but-20"], ["cc", "cell-14", "not-21"], ["det", "other-23", "the-22"], ["nsubj", "is-11", "other-23"], ["conj:negcc", "cell-14", "other-23"], ["nsubjpass", "covered-17", "other-23"]], [[]]], " The number N is considered far from primes if there are no prime numbers between N-10 and N+10, inclusive, i.e., all numbers N-10, N-9,  ..., N-1, N, N+1, ..., N+9, N+10 are not prime.\n": [[["det", "number-2", "The-1"], ["advmod", "are-47", "number-2"], ["nsubjpass", "considered-5", "N-3"], ["auxpass", "considered-5", "is-4"], ["acl:relcl", "number-2", "considered-5"], ["advmod", "considered-5", "far-6"], ["case", "primes-8", "from-7"], ["nmod:from", "far-6", "primes-8"], ["mark", "are-11", "if-9"], ["expl", "are-11", "there-10"], ["advcl", "considered-5", "are-11"], ["neg", "numbers-14", "no-12"], ["amod", "numbers-14", "prime-13"], ["nsubj", "are-11", "numbers-14"], ["case", "N-10-16", "between-15"], ["nmod:between", "numbers-14", "N-10-16"], ["cc", "N-10-16", "and-17"], ["nmod:between", "numbers-14", "N-18"], ["conj:and", "N-10-16", "N-18"], ["nummod", "N-18", "+10-19"], ["nummod", "N-18", "inclusive-21"], ["appos", "N-10-16", "i.e.-23"], ["det", "N-10-27", "all-25"], ["compound", "N-10-27", "numbers-26"], ["appos", "N-10-16", "N-10-27"], ["appos", "N-10-27", "N-9-29"], ["appos", "numbers-14", "N-1-33"], ["compound", "N-37", "N-35"], ["appos", "N-1-33", "N-37"], ["nummod", "N-37", "+1-38"], ["dep", "number-2", "N-42"], ["dep", "N-42", "+9-43"], ["nsubj", "are-47", "N-45"], ["nummod", "N-45", "+10-46"], ["root", "ROOT-0", "are-47"], ["neg", "are-47", "not-48"], ["xcomp", "are-47", "prime-49"]], [[]]], " (lowest percentage of '1' characters in that element of the input)\n": [[["amod", "percentage-3", "lowest-2"], ["nmod:poss", "characters-8", "percentage-3"], ["case", "1-6", "of-4"], ["nmod:of", "percentage-3", "1-6"], ["case", "percentage-3", "'-7"], ["root", "ROOT-0", "characters-8"], ["case", "element-11", "in-9"], ["det", "element-11", "that-10"], ["nmod:in", "characters-8", "element-11"], ["case", "input-14", "of-12"], ["det", "input-14", "the-13"], ["nmod:of", "element-11", "input-14"]], [[]]], " Now she is curious if there is a way to insert string input_array1 into string input_array0 so that the resulting string is a palindrome.\n": [[["advmod", "curious-4", "Now-1"], ["nsubj", "curious-4", "she-2"], ["cop", "curious-4", "is-3"], ["root", "ROOT-0", "curious-4"], ["mark", "is-7", "if-5"], ["expl", "is-7", "there-6"], ["advcl", "curious-4", "is-7"], ["det", "way-9", "a-8"], ["nsubj", "is-7", "way-9"], ["mark", "insert-11", "to-10"], ["acl", "way-9", "insert-11"], ["compound", "input_array1-13", "string-12"], ["dobj", "insert-11", "input_array1-13"], ["case", "input_array0-16", "into-14"], ["compound", "input_array0-16", "string-15"], ["nmod:into", "insert-11", "input_array0-16"], ["mark", "palindrome-24", "so-17"], ["mwe", "so-17", "that-18"], ["det", "string-21", "the-19"], ["amod", "string-21", "resulting-20"], ["nsubj", "palindrome-24", "string-21"], ["cop", "palindrome-24", "is-22"], ["det", "palindrome-24", "a-23"], ["advcl", "insert-11", "palindrome-24"]], [[]]], " The elements of the Fibonacci sequence are called Fibonacci numbers.\n": [[["det", "elements-2", "The-1"], ["nsubjpass", "called-8", "elements-2"], ["case", "sequence-6", "of-3"], ["det", "sequence-6", "the-4"], ["compound", "sequence-6", "Fibonacci-5"], ["nmod:of", "elements-2", "sequence-6"], ["auxpass", "called-8", "are-7"], ["root", "ROOT-0", "called-8"], ["compound", "numbers-10", "Fibonacci-9"], ["dobj", "called-8", "numbers-10"]], [[]]], " The String input_array will not have any leading zeros.\n": [[["det", "input_array-3", "The-1"], ["compound", "input_array-3", "String-2"], ["nsubj", "have-6", "input_array-3"], ["aux", "have-6", "will-4"], ["neg", "have-6", "not-5"], ["root", "ROOT-0", "have-6"], ["det", "zeros-9", "any-7"], ["amod", "zeros-9", "leading-8"], ["dobj", "have-6", "zeros-9"]], [[]]], " The ambiguity number of the tournament is defined as the number of distinct triples of players (a, b, c) such that player a defeated b, player b defeated player c, and player c defeated player a.\n": [[["det", "number-3", "The-1"], ["amod", "number-3", "ambiguity-2"], ["nsubjpass", "defined-8", "number-3"], ["case", "tournament-6", "of-4"], ["det", "tournament-6", "the-5"], ["nmod:of", "number-3", "tournament-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["mark", "defeated-28", "as-9"], ["det", "number-11", "the-10"], ["nsubj", "defeated-28", "number-11"], ["case", "triples-14", "of-12"], ["amod", "triples-14", "distinct-13"], ["nmod:of", "number-11", "triples-14"], ["case", "players-16", "of-15"], ["nmod:of", "number-11", "players-16"], ["dep", "number-11", "a-18"], ["appos", "a-18", "b-20"], ["appos", "a-18", "c-22"], ["det:predet", "player-26", "such-24"], ["det", "player-26", "that-25"], ["dep", "number-11", "player-26"], ["dep", "number-11", "a-27"], ["advcl", "defined-8", "defeated-28"], ["dep", "player-31", "b-29"], ["dobj", "defeated-28", "player-31"], ["nsubj", "defeated-33", "b-32"], ["acl:relcl", "player-31", "defeated-33"], ["dobj", "defeated-33", "player-34"], ["dep", "defeated-33", "c-35"], ["cc", "player-31", "and-37"], ["compound", "c-39", "player-38"], ["dobj", "defeated-28", "c-39"], ["conj:and", "player-31", "c-39"], ["acl", "c-39", "defeated-40"], ["compound", "a.-42", "player-41"], ["dobj", "defeated-40", "a.-42"]], [[]]], " In other words, return the number of choices for the integer k such that all the conditions above are satisfied.\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "return-5", "words-3"], ["root", "ROOT-0", "return-5"], ["det", "number-7", "the-6"], ["nsubj", "such-14", "number-7"], ["case", "choices-9", "of-8"], ["nmod:of", "number-7", "choices-9"], ["case", "k-13", "for-10"], ["det", "k-13", "the-11"], ["compound", "k-13", "integer-12"], ["nmod:for", "choices-9", "k-13"], ["xcomp", "return-5", "such-14"], ["mark", "satisfied-21", "that-15"], ["det:predet", "conditions-18", "all-16"], ["det", "conditions-18", "the-17"], ["nsubj", "satisfied-21", "conditions-18"], ["advmod", "satisfied-21", "above-19"], ["cop", "satisfied-21", "are-20"], ["ccomp", "return-5", "satisfied-21"]], [[]]], " 5  =  3 + 1 + 1   :  'D' in element 1 position 1\n": [[["root", "ROOT-0", "5-1"], ["dep", "1-5", "=-2"], ["nummod", "1-5", "3-3"], ["amod", "1-5", "+-4"], ["acl:relcl", "5-1", "1-5"], ["compound", "1-7", "+-6"], ["dep", "5-1", "1-7"], ["dep", "1-7", "'D-9"], ["case", "'D-9", "'-10"], ["case", "position-14", "in-11"], ["compound", "position-14", "element-12"], ["nummod", "position-14", "1-13"], ["nmod:in", "'D-9", "position-14"], ["nummod", "position-14", "1-15"]], [[]]], "Given two ints, input_int0 and input_int1, find the least common multiple of all the numbers between input_int0 and input_int1, inclusive.": [[["prep", "find-9", "Given-1"], ["num", "ints-3", "two-2"], ["pobj", "Given-1", "ints-3"], ["pobj", "Given-1", "input_int0-5"], ["conj_and", "ints-3", "input_int0-5"], ["pobj", "Given-1", "input_int1-7"], ["conj_and", "ints-3", "input_int1-7"], ["root", "ROOT-0", "find-9"], ["det", "multiple-13", "the-10"], ["dep", "common-12", "least-11"], ["amod", "multiple-13", "common-12"], ["dobj", "find-9", "multiple-13"], ["predet", "numbers-17", "all-15"], ["det", "numbers-17", "the-16"], ["prep_of", "multiple-13", "numbers-17"], ["prep_between", "numbers-17", "input_int0-19"], ["prep_between", "numbers-17", "input_int1-21"], ["conj_and", "input_int0-19", "input_int1-21"], ["dep", "find-9", "inclusive-23"]], [[]]], " Compute and return the number of beautiful ribbons in Alice's tree.\n": [[["root", "ROOT-0", "Compute-1"], ["cc", "Compute-1", "and-2"], ["conj:and", "Compute-1", "return-3"], ["det", "number-5", "the-4"], ["dobj", "return-3", "number-5"], ["case", "ribbons-8", "of-6"], ["amod", "ribbons-8", "beautiful-7"], ["nmod:of", "number-5", "ribbons-8"], ["case", "tree-12", "in-9"], ["nmod:poss", "tree-12", "Alice-10"], ["case", "Alice-10", "'s-11"], ["nmod:in", "return-3", "tree-12"]], [[]]], " Then, if the remaining baskets do not all contain the same number of input_array, we remove excess input_array from the baskets until they do.\n": [[["advmod", "remove-18", "Then-1"], ["mark", "contain-10", "if-3"], ["det", "baskets-6", "the-4"], ["amod", "baskets-6", "remaining-5"], ["nsubj", "contain-10", "baskets-6"], ["aux", "contain-10", "do-7"], ["neg", "contain-10", "not-8"], ["advmod", "contain-10", "all-9"], ["parataxis", "remove-18", "contain-10"], ["det", "number-13", "the-11"], ["amod", "number-13", "same-12"], ["dobj", "contain-10", "number-13"], ["case", "input_array-15", "of-14"], ["nmod:of", "number-13", "input_array-15"], ["nsubj", "remove-18", "we-17"], ["root", "ROOT-0", "remove-18"], ["amod", "input_array-20", "excess-19"], ["dobj", "remove-18", "input_array-20"], ["case", "baskets-23", "from-21"], ["det", "baskets-23", "the-22"], ["nmod:from", "remove-18", "baskets-23"], ["mark", "do-26", "until-24"], ["nsubj", "do-26", "they-25"], ["advcl", "remove-18", "do-26"]], [[]]], " At any moment, you may choose a nonempty contiguous subsequence of input_array .\n": [[["case", "moment-3", "At-1"], ["det", "moment-3", "any-2"], ["nmod:at", "choose-7", "moment-3"], ["nsubj", "choose-7", "you-5"], ["aux", "choose-7", "may-6"], ["root", "ROOT-0", "choose-7"], ["det", "subsequence-11", "a-8"], ["advmod", "contiguous-10", "nonempty-9"], ["amod", "subsequence-11", "contiguous-10"], ["dobj", "choose-7", "subsequence-11"], ["case", "input_array-13", "of-12"], ["nmod:of", "subsequence-11", "input_array-13"]], [[]]], " Return the minimum possible distance between input_array1 and input_array2 after you perform that change.\n": [[["root", "ROOT-0", "Return-1"], ["det", "distance-5", "the-2"], ["amod", "distance-5", "minimum-3"], ["amod", "distance-5", "possible-4"], ["dobj", "Return-1", "distance-5"], ["case", "input_array1-7", "between-6"], ["nmod:between", "distance-5", "input_array1-7"], ["cc", "input_array1-7", "and-8"], ["nmod:between", "distance-5", "input_array2-9"], ["conj:and", "input_array1-7", "input_array2-9"], ["mark", "perform-12", "after-10"], ["nsubj", "perform-12", "you-11"], ["advcl", "Return-1", "perform-12"], ["det", "change-14", "that-13"], ["dobj", "perform-12", "change-14"]], [[]]], " The Hamming distance between two input_array is defined as the number of positions in their binary representations at which they differ (leading zeros are used if necessary to make the binary representations have the same length) -\n": [[["det", "distance-3", "The-1"], ["compound", "distance-3", "Hamming-2"], ["nsubjpass", "defined-8", "distance-3"], ["case", "two-5", "between-4"], ["nmod:between", "distance-3", "two-5"], ["advmod", "defined-8", "input_array-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["case", "number-11", "as-9"], ["det", "number-11", "the-10"], ["nmod:as", "defined-8", "number-11"], ["nmod:at", "differ-21", "number-11"], ["case", "positions-13", "of-12"], ["nmod:of", "number-11", "positions-13"], ["case", "representations-17", "in-14"], ["nmod:poss", "representations-17", "their-15"], ["amod", "representations-17", "binary-16"], ["nmod:in", "positions-13", "representations-17"], ["case", "which-19", "at-18"], ["ref", "number-11", "which-19"], ["nsubj", "differ-21", "they-20"], ["acl:relcl", "number-11", "differ-21"], ["amod", "zeros-24", "leading-23"], ["nsubjpass", "used-26", "zeros-24"], ["auxpass", "used-26", "are-25"], ["parataxis", "differ-21", "used-26"], ["mark", "have-34", "if-27"], ["amod", "representations-33", "necessary-28"], ["mark", "make-30", "to-29"], ["xcomp", "necessary-28", "make-30"], ["det", "binary-32", "the-31"], ["dobj", "make-30", "binary-32"], ["nsubj", "have-34", "representations-33"], ["advcl", "used-26", "have-34"], ["det", "length-37", "the-35"], ["amod", "length-37", "same-36"], ["dobj", "have-34", "length-37"]], [[]]], " The Fibonacci sequence is defined as follows:\n": [[["det", "sequence-3", "The-1"], ["compound", "sequence-3", "Fibonacci-2"], ["nsubjpass", "defined-5", "sequence-3"], ["auxpass", "defined-5", "is-4"], ["root", "ROOT-0", "defined-5"], ["mark", "follows-7", "as-6"], ["advcl", "defined-5", "follows-7"]], [[]]], " One way of changing S to input_array in 5 moves: first Gogo will move 3 balls from bin 1 to bin 2, and then he will move 2 balls from bin 0 to bin 2.\n": [[["nummod", "way-2", "One-1"], ["root", "ROOT-0", "way-2"], ["mark", "changing-4", "of-3"], ["acl", "way-2", "changing-4"], ["dobj", "changing-4", "S-5"], ["nsubj", "input_array-7", "S-5"], ["mark", "input_array-7", "to-6"], ["xcomp", "changing-4", "input_array-7"], ["case", "moves-10", "in-8"], ["nummod", "moves-10", "5-9"], ["nmod:in", "input_array-7", "moves-10"], ["amod", "Gogo-13", "first-12"], ["nsubj", "move-15", "Gogo-13"], ["aux", "move-15", "will-14"], ["parataxis", "way-2", "move-15"], ["nummod", "balls-17", "3-16"], ["dobj", "move-15", "balls-17"], ["case", "bin-19", "from-18"], ["nmod:from", "move-15", "bin-19"], ["nummod", "bin-19", "1-20"], ["case", "bin-22", "to-21"], ["nmod:to", "move-15", "bin-22"], ["nummod", "bin-22", "2-23"], ["cc", "move-15", "and-25"], ["advmod", "move-29", "then-26"], ["nsubj", "move-29", "he-27"], ["aux", "move-29", "will-28"], ["parataxis", "way-2", "move-29"], ["conj:and", "move-15", "move-29"], ["nummod", "balls-31", "2-30"], ["dobj", "move-29", "balls-31"], ["case", "bin-33", "from-32"], ["nmod:from", "move-29", "bin-33"], ["nummod", "bin-33", "0-34"], ["case", "bin-36", "to-35"], ["nmod:to", "move-29", "bin-36"], ["nummod", "bin-36", "2-37"]], [[]]], "Return the height of the tallest possible block tower Josh can build.": [[["amod", "Josh-10", "Return-1"], ["det", "height-3", "the-2"], ["dep", "Return-1", "height-3"], ["det", "block-8", "the-5"], ["amod", "block-8", "tallest-6"], ["amod", "block-8", "possible-7"], ["prep_of", "height-3", "block-8"], ["nn", "Josh-10", "tower-9"], ["nsubj", "build-12", "Josh-10"], ["aux", "build-12", "can-11"], ["root", "ROOT-0", "build-12"]], [[]]], "Return the smallest number of turns in which this can be done.": [[["root", "ROOT-0", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "smallest-3"], ["dobj", "Return-1", "number-4"], ["prep_of", "number-4", "turns-6"], ["prep_in", "done-12", "turns-6"], ["nsubjpass", "done-12", "this-9"], ["aux", "done-12", "can-10"], ["auxpass", "done-12", "be-11"], ["rcmod", "turns-6", "done-12"]], [[]]], " For each i, input_array0[i] is the color of star i+1.\n": [[["case", "i-3", "For-1"], ["det", "i-3", "each-2"], ["nmod:for", "color-11", "i-3"], ["amod", "-RSB--8", "input_array0-5"], ["compound", "-RSB--8", "-LSB--6"], ["compound", "-RSB--8", "i-7"], ["nsubj", "color-11", "-RSB--8"], ["cop", "color-11", "is-9"], ["det", "color-11", "the-10"], ["root", "ROOT-0", "color-11"], ["case", "i-14", "of-12"], ["compound", "i-14", "star-13"], ["nmod:of", "color-11", "i-14"], ["nummod", "i-14", "+1-15"]], [[]]], " The labels of blocks used in the tower must increase from the bottom to the top.\n": [[["det", "labels-2", "The-1"], ["nsubj", "increase-10", "labels-2"], ["case", "blocks-4", "of-3"], ["nmod:of", "labels-2", "blocks-4"], ["acl", "blocks-4", "used-5"], ["case", "tower-8", "in-6"], ["det", "tower-8", "the-7"], ["nmod:in", "used-5", "tower-8"], ["aux", "increase-10", "must-9"], ["root", "ROOT-0", "increase-10"], ["case", "bottom-13", "from-11"], ["det", "bottom-13", "the-12"], ["nmod:from", "increase-10", "bottom-13"], ["case", "top-16", "to-14"], ["det", "top-16", "the-15"], ["nmod:to", "increase-10", "top-16"]], [[]]], " You will be given a int[] input_array containing the rating changes of the player in chronological order.\n": [[["nsubjpass", "given-4", "You-1"], ["aux", "given-4", "will-2"], ["auxpass", "given-4", "be-3"], ["root", "ROOT-0", "given-4"], ["det", "int-6", "a-5"], ["iobj", "given-4", "int-6"], ["compound", "-RSB--8", "-LSB--7"], ["dobj", "given-4", "-RSB--8"], ["advmod", "containing-10", "input_array-9"], ["acl", "-RSB--8", "containing-10"], ["det", "changes-13", "the-11"], ["compound", "changes-13", "rating-12"], ["dobj", "containing-10", "changes-13"], ["case", "player-16", "of-14"], ["det", "player-16", "the-15"], ["nmod:of", "changes-13", "player-16"], ["case", "order-19", "in-17"], ["amod", "order-19", "chronological-18"], ["nmod:in", "player-16", "order-19"]], [[]]], "Return the number of different sequences Brus can obtain after he makes the swap.": [[["det", "number-3", "the-2"], ["prep_return", "obtain-9", "number-3"], ["amod", "sequences-6", "different-5"], ["prep_of", "number-3", "sequences-6"], ["nsubj", "obtain-9", "Brus-7"], ["aux", "obtain-9", "can-8"], ["root", "ROOT-0", "obtain-9"], ["mark", "makes-12", "after-10"], ["nsubj", "makes-12", "he-11"], ["advcl", "obtain-9", "makes-12"], ["det", "swap-14", "the-13"], ["dobj", "makes-12", "swap-14"]], [[]]], " The result is \"abba\" and it is a palindrome.\n": [[["det", "result-2", "The-1"], ["nsubj", "abba-5", "result-2"], ["cop", "abba-5", "is-3"], ["root", "ROOT-0", "abba-5"], ["cc", "abba-5", "and-7"], ["nsubj", "palindrome-11", "it-8"], ["cop", "palindrome-11", "is-9"], ["det", "palindrome-11", "a-10"], ["conj:and", "abba-5", "palindrome-11"]], [[]]], " input_array is a permutation of S\n": [[["advmod", "is-2", "input_array-1"], ["root", "ROOT-0", "is-2"], ["det", "permutation-4", "a-3"], ["nsubj", "is-2", "permutation-4"], ["case", "S-6", "of-5"], ["nmod:of", "permutation-4", "S-6"]], [[]]], " You are given a int[] input_array .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "a-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array-8", "-LSB--6"], ["amod", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"]], [[]]], "Given ints input_int0 , input_int1 , input_int2 , input_int3 , input_int4 , input_int5 , input_int6 , and input_int7 , return the number of valid colors that make a good transition from the color ( input_int3 , input_int4 , input_int5 ).": [[["root", "ROOT-0", "Given-1"], ["nsubj", "return-20", "ints-2"], ["num", "ints-2", "input_int0-3"], ["num", "ints-2", "input_int1-5"], ["num", "ints-2", "input_int2-7"], ["num", "ints-2", "input_int3-9"], ["num", "ints-2", "input_int4-11"], ["num", "ints-2", "input_int5-13"], ["num", "ints-2", "input_int6-15"], ["conj_and", "ints-2", "input_int7-18"], ["nsubj", "return-20", "input_int7-18"], ["ccomp", "Given-1", "return-20"], ["det", "number-22", "the-21"], ["dobj", "return-20", "number-22"], ["nsubj", "make-27", "number-22"], ["amod", "colors-25", "valid-24"], ["prep_of", "number-22", "colors-25"], ["rcmod", "number-22", "make-27"], ["det", "transition-30", "a-28"], ["amod", "transition-30", "good-29"], ["dobj", "make-27", "transition-30"], ["det", "color-33", "the-32"], ["prep_from", "make-27", "color-33"], ["dep", "color-33", "input_int3-35"], ["appos", "input_int3-35", "input_int4-37"], ["appos", "input_int3-35", "input_int5-39"]], [[]]], " We assign the letters 'a' to 'z' values of 1 to 26, respectively.\n": [[["nsubj", "assign-2", "We-1"], ["root", "ROOT-0", "assign-2"], ["det", "letters-4", "the-3"], ["dobj", "assign-2", "letters-4"], ["dep", "letters-4", "a-6"], ["case", "values-12", "to-8"], ["amod", "values-12", "z-10"], ["nmod:to", "assign-2", "values-12"], ["case", "26-16", "of-13"], ["compound", "26-16", "1-14"], ["dep", "26-16", "to-15"], ["nmod:of", "values-12", "26-16"], ["advmod", "assign-2", "respectively-18"]], [[]]], " A department is called diverse if no two employees in the department do the same type of work.\n": [[["det", "department-2", "A-1"], ["nsubjpass", "called-4", "department-2"], ["auxpass", "called-4", "is-3"], ["root", "ROOT-0", "called-4"], ["xcomp", "called-4", "diverse-5"], ["mark", "do-13", "if-6"], ["neg", "employees-9", "no-7"], ["nummod", "employees-9", "two-8"], ["nsubj", "do-13", "employees-9"], ["case", "department-12", "in-10"], ["det", "department-12", "the-11"], ["nmod:in", "employees-9", "department-12"], ["advcl", "called-4", "do-13"], ["det", "type-16", "the-14"], ["amod", "type-16", "same-15"], ["dobj", "do-13", "type-16"], ["case", "work-18", "of-17"], ["nmod:of", "type-16", "work-18"]], [[]]], " After the second letter 'a'.\n": [[["case", "letter-4", "After-1"], ["det", "letter-4", "the-2"], ["amod", "letter-4", "second-3"], ["root", "ROOT-0", "letter-4"], ["dep", "letter-4", "a-6"]], [[]]], " For each stage, input_array contains an element that specifies Ciel's input_array in that stage.\n": [[["case", "stage-3", "For-1"], ["det", "stage-3", "each-2"], ["nmod:for", "contains-6", "stage-3"], ["nsubj", "contains-6", "input_array-5"], ["root", "ROOT-0", "contains-6"], ["det", "element-8", "an-7"], ["dobj", "contains-6", "element-8"], ["nsubj", "specifies-10", "element-8"], ["ref", "element-8", "that-9"], ["acl:relcl", "element-8", "specifies-10"], ["nmod:poss", "input_array-13", "Ciel-11"], ["case", "Ciel-11", "'s-12"], ["dobj", "specifies-10", "input_array-13"], ["case", "stage-16", "in-14"], ["det", "stage-16", "that-15"], ["nmod:in", "input_array-13", "stage-16"]], [[]]], " You chose each possible contiguous subsequence exactly once, each time gaining some power.\n": [[["nsubj", "chose-2", "You-1"], ["root", "ROOT-0", "chose-2"], ["det", "subsequence-6", "each-3"], ["amod", "contiguous-5", "possible-4"], ["amod", "subsequence-6", "contiguous-5"], ["dobj", "chose-2", "subsequence-6"], ["advmod", "once-8", "exactly-7"], ["advmod", "chose-2", "once-8"], ["det", "time-11", "each-10"], ["dobj", "chose-2", "time-11"], ["acl", "time-11", "gaining-12"], ["det", "power-14", "some-13"], ["dobj", "gaining-12", "power-14"]], [[]]], " There is exactly 1 digit between the two 1s, there are exactly 2 digits between the two 2s, and so on.\n": [[["expl", "is-2", "There-1"], ["ccomp", "are-12", "is-2"], ["advmod", "is-2", "exactly-3"], ["nummod", "digit-5", "1-4"], ["nsubj", "is-2", "digit-5"], ["case", "1s-9", "between-6"], ["det", "1s-9", "the-7"], ["nummod", "1s-9", "two-8"], ["nmod:between", "digit-5", "1s-9"], ["expl", "are-12", "there-11"], ["root", "ROOT-0", "are-12"], ["advmod", "and-21", "exactly-13"], ["nummod", "digits-15", "2-14"], ["nmod:npmod", "exactly-13", "digits-15"], ["case", "2s-19", "between-16"], ["det", "2s-19", "the-17"], ["nummod", "2s-19", "two-18"], ["nmod:between", "exactly-13", "2s-19"], ["advmod", "are-12", "and-21"], ["advmod", "on-23", "so-22"], ["advmod", "and-21", "on-23"]], [[]]], " In other words, whenever Josh places box x on top of box y, we have x > y.\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "have-17", "words-3"], ["advmod", "places-7", "whenever-5"], ["nsubj", "places-7", "Josh-6"], ["advcl", "have-17", "places-7"], ["compound", "x-9", "box-8"], ["dobj", "places-7", "x-9"], ["case", "top-11", "on-10"], ["nmod:on", "places-7", "top-11"], ["case", "y-14", "of-12"], ["compound", "y-14", "box-13"], ["nmod:of", "top-11", "y-14"], ["nsubj", "have-17", "we-16"], ["root", "ROOT-0", "have-17"], ["dobj", "have-17", "x-18"], ["acl", "x-18", ">-19"], ["dobj", ">-19", "y.-20"]], [[]]], " Arthur has a number input_int and he would like to palindromize it.\n": [[["nsubj", "has-2", "Arthur-1"], ["root", "ROOT-0", "has-2"], ["det", "input_int-5", "a-3"], ["compound", "input_int-5", "number-4"], ["dobj", "has-2", "input_int-5"], ["cc", "has-2", "and-6"], ["nsubj", "like-9", "he-7"], ["nsubj", "palindromize-11", "he-7"], ["aux", "like-9", "would-8"], ["conj:and", "has-2", "like-9"], ["mark", "palindromize-11", "to-10"], ["xcomp", "like-9", "palindromize-11"], ["dobj", "palindromize-11", "it-12"]], [[]]], " You are also given a description of the ribbons: two int[]s input_array1 and input_array2 with N-1 elements each.\n": [[["nsubjpass", "given-4", "You-1"], ["auxpass", "given-4", "are-2"], ["advmod", "given-4", "also-3"], ["root", "ROOT-0", "given-4"], ["det", "description-6", "a-5"], ["dobj", "given-4", "description-6"], ["case", "ribbons-9", "of-7"], ["det", "ribbons-9", "the-8"], ["nmod:of", "description-6", "ribbons-9"], ["nummod", "-RSB--14", "two-11"], ["compound", "-RSB--14", "int-12"], ["compound", "-RSB--14", "-LSB--13"], ["nsubj", "input_array1-16", "-RSB--14"], ["cop", "input_array1-16", "s-15"], ["parataxis", "given-4", "input_array1-16"], ["cc", "input_array1-16", "and-17"], ["parataxis", "given-4", "input_array2-18"], ["conj:and", "input_array1-16", "input_array2-18"], ["case", "elements-21", "with-19"], ["compound", "elements-21", "N-1-20"], ["nmod:with", "input_array1-16", "elements-21"], ["dep", "elements-21", "each-22"]], [[]]], " You are given a String[] input_array, each element of which corresponds to a state.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "input_array-8", "a-4"], ["compound", "input_array-8", "String-5"], ["compound", "input_array-8", "-LSB--6"], ["compound", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"], ["nmod:of", "element-11", "input_array-8"], ["det", "element-11", "each-10"], ["nsubj", "corresponds-14", "element-11"], ["case", "which-13", "of-12"], ["ref", "input_array-8", "which-13"], ["acl:relcl", "input_array-8", "corresponds-14"], ["case", "state-17", "to-15"], ["det", "state-17", "a-16"], ["nmod:to", "corresponds-14", "state-17"]], [[]]], " Note that if input_array1[z]=y and input_array1[y]=x, employee z does not belong into the department of employee x.\n": [[["root", "ROOT-0", "Note-1"], ["mark", "belong-22", "that-2"], ["mark", "x-16", "if-3"], ["amod", "z-6", "input_array1-4"], ["amod", "z-6", "-LSB--5"], ["nsubj", "x-16", "z-6"], ["acl", "z-6", "-RSB--7"], ["dep", "-RSB--14", "=-8"], ["compound", "-RSB--14", "y-9"], ["cc", "y-9", "and-10"], ["conj:and", "y-9", "input_array1-11"], ["compound", "-RSB--14", "input_array1-11"], ["amod", "-RSB--14", "-LSB--12"], ["compound", "-RSB--14", "y-13"], ["ccomp", "-RSB--7", "-RSB--14"], ["dep", "x-16", "=-15"], ["advcl", "belong-22", "x-16"], ["compound", "z-19", "employee-18"], ["nsubj", "belong-22", "z-19"], ["aux", "belong-22", "does-20"], ["neg", "belong-22", "not-21"], ["ccomp", "Note-1", "belong-22"], ["case", "department-25", "into-23"], ["det", "department-25", "the-24"], ["nmod:into", "belong-22", "department-25"], ["case", "x.-28", "of-26"], ["compound", "x.-28", "employee-27"], ["nmod:of", "department-25", "x.-28"]], [[]]], " You are given the Strings input_array0 and input_array1 .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["dep", "input_array0-6", "the-4"], ["amod", "input_array0-6", "Strings-5"], ["dobj", "given-3", "input_array0-6"], ["cc", "input_array0-6", "and-7"], ["dobj", "given-3", "input_array1-8"], ["conj:and", "input_array0-6", "input_array1-8"]], [[]]], " \"DDD\"}\n": [[["root", "ROOT-0", "DDD-2"], ["dobj", "DDD-2", "-RCB--4"]], [[]]], "Given a range of integers from 0 to 1 (inclusive), determine how many numbers within that range are evenly divisible by input_int2.": [[["prep", "determine-14", "Given-1"], ["det", "range-3", "a-2"], ["pobj", "Given-1", "range-3"], ["prep_of", "range-3", "integers-5"], ["number", "1-9", "0-7"], ["dep", "1-9", "to-8"], ["prep_from", "integers-5", "1-9"], ["appos", "1-9", "inclusive-11"], ["root", "ROOT-0", "determine-14"], ["advmod", "many-16", "how-15"], ["dep", "divisible-23", "many-16"], ["nsubj", "divisible-23", "numbers-17"], ["det", "range-20", "that-19"], ["prep_within", "numbers-17", "range-20"], ["cop", "divisible-23", "are-21"], ["advmod", "divisible-23", "evenly-22"], ["ccomp", "determine-14", "divisible-23"], ["prep_by", "divisible-23", "input_int2-25"]], [[]]], " Return \"Interesting\" if that integer is interesting, otherwise return \"Not interesting\".\n": [[["root", "ROOT-0", "Return-1"], ["dobj", "Return-1", "Interesting-3"], ["mark", "interesting-9", "if-5"], ["det", "integer-7", "that-6"], ["nsubj", "interesting-9", "integer-7"], ["cop", "interesting-9", "is-8"], ["advcl", "Return-1", "interesting-9"], ["advmod", "return-12", "otherwise-11"], ["dep", "Return-1", "return-12"], ["neg", "interesting-15", "Not-14"], ["dobj", "return-12", "interesting-15"]], [[]]], "Return the minimum possible distance between input_array1 and input_array2 after you perform that change.": [[["root", "ROOT-0", "Return-1"], ["det", "distance-5", "the-2"], ["amod", "distance-5", "minimum-3"], ["amod", "distance-5", "possible-4"], ["dobj", "Return-1", "distance-5"], ["prep_between", "distance-5", "input_array1-7"], ["prep_between", "distance-5", "input_array2-9"], ["conj_and", "input_array1-7", "input_array2-9"], ["mark", "perform-12", "after-10"], ["nsubj", "perform-12", "you-11"], ["advcl", "Return-1", "perform-12"], ["det", "change-14", "that-13"], ["dobj", "perform-12", "change-14"]], [[]]], " Thus, the Fibonacci sequence starts as follows: 0, 1, 1, 2, 3, 5, 8, 13, ...\n": [[["advmod", "starts-6", "Thus-1"], ["det", "sequence-5", "the-3"], ["compound", "sequence-5", "Fibonacci-4"], ["nsubj", "starts-6", "sequence-5"], ["root", "ROOT-0", "starts-6"], ["mark", "follows-8", "as-7"], ["advcl", "starts-6", "follows-8"], ["dobj", "follows-8", "0-10"], ["amod", "0-10", "1-12"], ["amod", "0-10", "1-14"], ["amod", "0-10", "2-16"], ["amod", "0-10", "3-18"], ["amod", "0-10", "5-20"], ["appos", "0-10", "8-22"], ["amod", "8-22", "13-24"]], [[]]], " if possible else -1\n": [[["root", "ROOT-0", "if-1"], ["amod", "-1-4", "possible-2"], ["amod", "-1-4", "else-3"], ["dep", "if-1", "-1-4"]], [[]]], " You are given a int[] input_array containing the current number of balls in each of the bins.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "a-4"], ["iobj", "given-3", "int-5"], ["compound", "-RSB--7", "-LSB--6"], ["dobj", "given-3", "-RSB--7"], ["advmod", "containing-9", "input_array-8"], ["acl", "-RSB--7", "containing-9"], ["det", "number-12", "the-10"], ["amod", "number-12", "current-11"], ["dobj", "containing-9", "number-12"], ["case", "balls-14", "of-13"], ["nmod:of", "number-12", "balls-14"], ["case", "each-16", "in-15"], ["nmod:in", "balls-14", "each-16"], ["case", "bins-19", "of-17"], ["det", "bins-19", "the-18"], ["nmod:of", "each-16", "bins-19"]], [[]]], " In each step, you can either increment or decrement the number you currently have.\n": [[["case", "step-3", "In-1"], ["det", "step-3", "each-2"], ["nmod:in", "increment-8", "step-3"], ["nsubj", "increment-8", "you-5"], ["nsubj", "decrement-10", "you-5"], ["aux", "increment-8", "can-6"], ["advmod", "increment-8", "either-7"], ["root", "ROOT-0", "increment-8"], ["cc", "increment-8", "or-9"], ["conj:or", "increment-8", "decrement-10"], ["det", "number-12", "the-11"], ["dobj", "increment-8", "number-12"], ["nsubj", "have-15", "you-13"], ["advmod", "have-15", "currently-14"], ["acl:relcl", "number-12", "have-15"]], [[]]], " Your damage per second is 1.\n": [[["nmod:poss", "damage-2", "Your-1"], ["nsubj", "1-6", "damage-2"], ["case", "second-4", "per-3"], ["nmod:per", "damage-2", "second-4"], ["cop", "1-6", "is-5"], ["root", "ROOT-0", "1-6"]], [[]]], "The ambiguity number of the tournament is defined as the number of distinct triples of players (a, b, c) such that player a defeated b, player b defeated player c, and player c defeated player a.": [[["det", "number-3", "The-1"], ["amod", "number-3", "ambiguity-2"], ["nsubjpass", "defined-8", "number-3"], ["det", "tournament-6", "the-5"], ["prep_of", "number-3", "tournament-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["mark", "defeated-28", "as-9"], ["det", "number-11", "the-10"], ["nsubj", "defeated-28", "number-11"], ["amod", "triples-14", "distinct-13"], ["prep_of", "number-11", "triples-14"], ["prep_of", "number-11", "players-16"], ["dep", "number-11", "a-18"], ["appos", "a-18", "b-20"], ["appos", "a-18", "c-22"], ["predet", "player-26", "such-24"], ["det", "player-26", "that-25"], ["dep", "number-11", "player-26"], ["dep", "number-11", "a-27"], ["advcl", "defined-8", "defeated-28"], ["dep", "player-31", "b-29"], ["dobj", "defeated-28", "player-31"], ["nsubj", "defeated-33", "b-32"], ["rcmod", "player-31", "defeated-33"], ["dobj", "defeated-33", "player-34"], ["dep", "defeated-33", "c-35"], ["nn", "c-39", "player-38"], ["dobj", "defeated-28", "c-39"], ["conj_and", "player-31", "c-39"], ["vmod", "c-39", "defeated-40"], ["nn", "a.-42", "player-41"], ["dobj", "defeated-40", "a.-42"]], [[]]], " (Different integers represent different types of work.)\n": [[["amod", "integers-3", "Different-2"], ["nsubj", "represent-4", "integers-3"], ["root", "ROOT-0", "represent-4"], ["amod", "types-6", "different-5"], ["dobj", "represent-4", "types-6"], ["case", "work-8", "of-7"], ["nmod:of", "types-6", "work-8"]], [[]]], " Brus is going to choose two different positions in John's input_array and swap the elements at those positions.\n": [[["nsubj", "going-3", "Brus-1"], ["nsubj", "choose-5", "Brus-1"], ["nsubj", "swap-14", "Brus-1"], ["aux", "going-3", "is-2"], ["root", "ROOT-0", "going-3"], ["mark", "choose-5", "to-4"], ["xcomp", "going-3", "choose-5"], ["nummod", "positions-8", "two-6"], ["amod", "positions-8", "different-7"], ["dobj", "choose-5", "positions-8"], ["case", "input_array-12", "in-9"], ["nmod:poss", "input_array-12", "John-10"], ["case", "John-10", "'s-11"], ["nmod:in", "positions-8", "input_array-12"], ["cc", "choose-5", "and-13"], ["xcomp", "going-3", "swap-14"], ["conj:and", "choose-5", "swap-14"], ["det", "elements-16", "the-15"], ["dobj", "swap-14", "elements-16"], ["case", "positions-19", "at-17"], ["det", "positions-19", "those-18"], ["nmod:at", "swap-14", "positions-19"]], [[]]], " Return \"POSSIBLE\" if it is possible or \"IMPOSSIBLE\" if it is not (all quotes for clarity).\n": [[["advmod", "POSSIBLE-3", "Return-1"], ["root", "ROOT-0", "POSSIBLE-3"], ["mark", "possible-8", "if-5"], ["nsubj", "possible-8", "it-6"], ["nsubj", "IMPOSSIBLE-11", "it-6"], ["cop", "possible-8", "is-7"], ["dep", "POSSIBLE-3", "possible-8"], ["cc", "possible-8", "or-9"], ["dep", "POSSIBLE-3", "IMPOSSIBLE-11"], ["conj:or", "possible-8", "IMPOSSIBLE-11"], ["mark", "is-15", "if-13"], ["nsubj", "is-15", "it-14"], ["advcl", "possible-8", "is-15"], ["neg", "is-15", "not-16"], ["nsubj", "quotes-19", "all-18"], ["parataxis", "possible-8", "quotes-19"], ["case", "clarity-21", "for-20"], ["nmod:for", "quotes-19", "clarity-21"]], [[]]], " Alice had two positive integers, a and b.\n": [[["nsubj", "had-2", "Alice-1"], ["root", "ROOT-0", "had-2"], ["nummod", "integers-5", "two-3"], ["amod", "integers-5", "positive-4"], ["dobj", "had-2", "integers-5"], ["appos", "integers-5", "a-7"], ["cc", "a-7", "and-8"], ["appos", "integers-5", "b.-9"], ["conj:and", "a-7", "b.-9"]], [[]]], " We define the value of the string input_array as follows.\n": [[["nsubj", "define-2", "We-1"], ["root", "ROOT-0", "define-2"], ["det", "value-4", "the-3"], ["dobj", "define-2", "value-4"], ["case", "input_array-8", "of-5"], ["det", "input_array-8", "the-6"], ["compound", "input_array-8", "string-7"], ["nmod:of", "value-4", "input_array-8"], ["mark", "follows-10", "as-9"], ["advcl", "define-2", "follows-10"]], [[]]], " Elsh wants that the resulting sequence is as long as possible.\n": [[["nsubj", "wants-2", "Elsh-1"], ["root", "ROOT-0", "wants-2"], ["mark", "possible-11", "that-3"], ["det", "sequence-6", "the-4"], ["amod", "sequence-6", "resulting-5"], ["nsubj", "possible-11", "sequence-6"], ["cop", "possible-11", "is-7"], ["advmod", "long-9", "as-8"], ["advmod", "possible-11", "long-9"], ["advmod", "possible-11", "as-10"], ["ccomp", "wants-2", "possible-11"]], [[]]], " You are given a String[] input_array containing Fox Ciel's current results:\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "-RSB--7", "a-4"], ["compound", "-RSB--7", "String-5"], ["compound", "-RSB--7", "-LSB--6"], ["dobj", "given-3", "-RSB--7"], ["advmod", "containing-9", "input_array-8"], ["acl", "-RSB--7", "containing-9"], ["compound", "Ciel-11", "Fox-10"], ["nmod:poss", "results-14", "Ciel-11"], ["case", "Ciel-11", "'s-12"], ["amod", "results-14", "current-13"], ["dobj", "containing-9", "results-14"]], [[]]], "In other words, return the number of choices for the integer k such that all the conditions above are satisfied.": [[["amod", "words-3", "other-2"], ["prep_in", "return-5", "words-3"], ["root", "ROOT-0", "return-5"], ["det", "number-7", "the-6"], ["nsubj", "such-14", "number-7"], ["prep_of", "number-7", "choices-9"], ["det", "k-13", "the-11"], ["nn", "k-13", "integer-12"], ["prep_for", "choices-9", "k-13"], ["xcomp", "return-5", "such-14"], ["mark", "satisfied-21", "that-15"], ["predet", "conditions-18", "all-16"], ["det", "conditions-18", "the-17"], ["nsubj", "satisfied-21", "conditions-18"], ["advmod", "satisfied-21", "above-19"], ["cop", "satisfied-21", "are-20"], ["ccomp", "return-5", "satisfied-21"]], [[]]], " input_array is sorted in ascending order\n": [[["nsubjpass", "sorted-3", "input_array-1"], ["auxpass", "sorted-3", "is-2"], ["root", "ROOT-0", "sorted-3"], ["mark", "ascending-5", "in-4"], ["advcl", "sorted-3", "ascending-5"], ["dobj", "ascending-5", "order-6"]], [[]]], " You want to share this delicious chocolate bar with your best friend.\n": [[["nsubj", "want-2", "You-1"], ["nsubj", "share-4", "You-1"], ["root", "ROOT-0", "want-2"], ["mark", "share-4", "to-3"], ["xcomp", "want-2", "share-4"], ["det", "bar-8", "this-5"], ["amod", "bar-8", "delicious-6"], ["compound", "bar-8", "chocolate-7"], ["dobj", "share-4", "bar-8"], ["case", "friend-12", "with-9"], ["nmod:poss", "friend-12", "your-10"], ["amod", "friend-12", "best-11"], ["nmod:with", "share-4", "friend-12"]], [[]]], " This string describes the desired layout of the barn: the character 'c' represents a section with a cow, and the character '.'\n": [[["det", "string-2", "This-1"], ["nsubj", "describes-3", "string-2"], ["root", "ROOT-0", "describes-3"], ["det", "layout-6", "the-4"], ["amod", "layout-6", "desired-5"], ["nsubj", "represents-16", "layout-6"], ["case", "barn-9", "of-7"], ["det", "barn-9", "the-8"], ["nmod:of", "layout-6", "barn-9"], ["det", "c-14", "the-11"], ["compound", "c-14", "character-12"], ["nsubj", "represents-16", "c-14"], ["ccomp", "describes-3", "represents-16"], ["det", "section-18", "a-17"], ["dobj", "represents-16", "section-18"], ["case", "cow-21", "with-19"], ["det", "cow-21", "a-20"], ["nmod:with", "represents-16", "cow-21"], ["cc", "cow-21", "and-23"], ["det", "character-25", "the-24"], ["nmod:with", "represents-16", "character-25"], ["conj:and", "cow-21", "character-25"]], [[]]], " If the total input_array of the chosen cucumbers is not greater than input_int1 yen, he can buy them, otherwise he cannot.\n": [[["mark", "greater-11", "If-1"], ["det", "input_array-4", "the-2"], ["amod", "input_array-4", "total-3"], ["nsubj", "greater-11", "input_array-4"], ["case", "cucumbers-8", "of-5"], ["det", "cucumbers-8", "the-6"], ["amod", "cucumbers-8", "chosen-7"], ["nmod:of", "input_array-4", "cucumbers-8"], ["cop", "greater-11", "is-9"], ["neg", "greater-11", "not-10"], ["advcl", "buy-18", "greater-11"], ["case", "yen-14", "than-12"], ["amod", "yen-14", "input_int1-13"], ["nmod:than", "greater-11", "yen-14"], ["nsubj", "buy-18", "he-16"], ["aux", "buy-18", "can-17"], ["root", "ROOT-0", "buy-18"], ["dobj", "buy-18", "them-19"], ["advmod", "can-23", "otherwise-21"], ["nsubj", "can-23", "he-22"], ["parataxis", "buy-18", "can-23"], ["neg", "can-23", "not-24"]], [[]]], " Nick likes to play the lottery.\n": [[["nsubj", "likes-2", "Nick-1"], ["nsubj", "play-4", "Nick-1"], ["root", "ROOT-0", "likes-2"], ["mark", "play-4", "to-3"], ["xcomp", "likes-2", "play-4"], ["det", "lottery-6", "the-5"], ["dobj", "play-4", "lottery-6"]], [[]]], " Little Elephant from the Zoo of Lviv likes balls.\n": [[["compound", "Elephant-2", "Little-1"], ["nsubj", "likes-8", "Elephant-2"], ["case", "Zoo-5", "from-3"], ["det", "Zoo-5", "the-4"], ["nmod:from", "Elephant-2", "Zoo-5"], ["case", "Lviv-7", "of-6"], ["nmod:of", "Zoo-5", "Lviv-7"], ["root", "ROOT-0", "likes-8"], ["dobj", "likes-8", "balls-9"]], [[]]], " The heights of all blocks are positive integers.\n": [[["det", "heights-2", "The-1"], ["nsubj", "integers-8", "heights-2"], ["case", "blocks-5", "of-3"], ["det", "blocks-5", "all-4"], ["nmod:of", "heights-2", "blocks-5"], ["cop", "integers-8", "are-6"], ["amod", "integers-8", "positive-7"], ["root", "ROOT-0", "integers-8"]], [[]]], "You must change exactly input_int characters in input_array1 into other types letters.": [[["nsubj", "change-3", "You-1"], ["aux", "change-3", "must-2"], ["root", "ROOT-0", "change-3"], ["advmod", "characters-6", "exactly-4"], ["amod", "characters-6", "input_int-5"], ["dobj", "change-3", "characters-6"], ["prep_in", "characters-6", "input_array1-8"], ["amod", "letters-12", "other-10"], ["nn", "letters-12", "types-11"], ["prep_into", "change-3", "letters-12"]], [[]]], " That is, you are able to reduce an opponent's hit points by 1 each second.\n": [[["discourse", "able-6", "That-1"], ["mwe", "That-1", "is-2"], ["nsubj", "able-6", "you-4"], ["nsubj", "reduce-8", "you-4"], ["cop", "able-6", "are-5"], ["root", "ROOT-0", "able-6"], ["mark", "reduce-8", "to-7"], ["xcomp", "able-6", "reduce-8"], ["det", "opponent-10", "an-9"], ["nmod:poss", "points-13", "opponent-10"], ["case", "opponent-10", "'s-11"], ["compound", "points-13", "hit-12"], ["iobj", "reduce-8", "points-13"], ["case", "1-15", "by-14"], ["nmod:by", "points-13", "1-15"], ["det", "second-17", "each-16"], ["dobj", "reduce-8", "second-17"]], [[]]], " After he got home, he decided to rearrange the balls in his bins into sorted order.\n": [[["mark", "got-3", "After-1"], ["nsubj", "got-3", "he-2"], ["advcl", "decided-7", "got-3"], ["dobj", "got-3", "home-4"], ["nsubj", "decided-7", "he-6"], ["nsubj", "rearrange-9", "he-6"], ["root", "ROOT-0", "decided-7"], ["mark", "rearrange-9", "to-8"], ["xcomp", "decided-7", "rearrange-9"], ["det", "balls-11", "the-10"], ["dobj", "rearrange-9", "balls-11"], ["case", "bins-14", "in-12"], ["nmod:poss", "bins-14", "his-13"], ["nmod:in", "balls-11", "bins-14"], ["case", "order-17", "into-15"], ["amod", "order-17", "sorted-16"], ["nmod:into", "rearrange-9", "order-17"]], [[]]], "Given a string input_array0, let f(input_array0) denote the infinite string obtained by concatenating infinitely many copies of input_array0. For example, if input_array0 = \"abc\" then f(input_array0) = \"abcabcabcabc...\".": [[["prep", "let-6", "Given-1"], ["det", "input_array0-4", "a-2"], ["nn", "input_array0-4", "string-3"], ["pobj", "Given-1", "input_array0-4"], ["root", "ROOT-0", "let-6"], ["nsubj", "denote-11", "f-7"], ["appos", "f-7", "input_array0-9"], ["ccomp", "let-6", "denote-11"], ["det", "string-14", "the-12"], ["amod", "string-14", "infinite-13"], ["dobj", "denote-11", "string-14"], ["vmod", "string-14", "obtained-15"], ["agent", "obtained-15", "concatenating-17"], ["amod", "copies-20", "infinitely-18"], ["amod", "copies-20", "many-19"], ["dobj", "concatenating-17", "copies-20"], ["prep_of", "copies-20", "input_array0-22"]], [["prep_for", "=-6", "example-2"], ["amod", "input_array0-5", "if-4"], ["nsubj", "=-6", "input_array0-5"], ["root", "ROOT-0", "=-6"], ["acomp", "=-6", "abc-8"], ["advmod", "=-6", "then-10"], ["dep", "=-15", "f-11"], ["nsubj", "=-15", "input_array0-13"], ["dep", "then-10", "=-15"], ["acomp", "=-15", "abcabcabcabc-17"]], [[]]], " Your method must return \"YES\" (quotes for clarity) if Cucumber Boy can buy any set of input_int2 unique cucumbers, and \"NO\" if there is some set of input_int2 cucumbers that is too expensive for him.\n": [[["nmod:poss", "method-2", "Your-1"], ["nsubj", "return-4", "method-2"], ["aux", "return-4", "must-3"], ["root", "ROOT-0", "return-4"], ["dobj", "return-4", "YES-6"], ["dep", "YES-6", "quotes-9"], ["case", "clarity-11", "for-10"], ["nmod:for", "quotes-9", "clarity-11"], ["mark", "buy-17", "if-13"], ["compound", "Boy-15", "Cucumber-14"], ["nsubj", "buy-17", "Boy-15"], ["aux", "buy-17", "can-16"], ["advcl", "return-4", "buy-17"], ["det", "set-19", "any-18"], ["dobj", "buy-17", "set-19"], ["case", "cucumbers-23", "of-20"], ["amod", "cucumbers-23", "input_int2-21"], ["amod", "cucumbers-23", "unique-22"], ["nmod:of", "set-19", "cucumbers-23"], ["cc", "buy-17", "and-25"], ["advcl", "return-4", "NO-27"], ["conj:and", "buy-17", "NO-27"], ["mark", "is-31", "if-29"], ["expl", "is-31", "there-30"], ["advcl", "return-4", "is-31"], ["det", "set-33", "some-32"], ["nsubj", "is-31", "set-33"], ["nsubj", "expensive-40", "set-33"], ["case", "cucumbers-36", "of-34"], ["amod", "cucumbers-36", "input_int2-35"], ["nmod:of", "set-33", "cucumbers-36"], ["ref", "set-33", "that-37"], ["cop", "expensive-40", "is-38"], ["advmod", "expensive-40", "too-39"], ["acl:relcl", "set-33", "expensive-40"], ["case", "him-42", "for-41"], ["nmod:for", "expensive-40", "him-42"]], [[]]], " It is possible that one of the bins contained zero balls.\n": [[["nsubj", "possible-3", "It-1"], ["cop", "possible-3", "is-2"], ["root", "ROOT-0", "possible-3"], ["mark", "contained-9", "that-4"], ["nsubj", "contained-9", "one-5"], ["case", "bins-8", "of-6"], ["det", "bins-8", "the-7"], ["nmod:of", "one-5", "bins-8"], ["ccomp", "possible-3", "contained-9"], ["nummod", "balls-11", "zero-10"], ["dobj", "contained-9", "balls-11"]], [[]]], " input_array1 specifies a number of input_array1 in kilometers per hour.\n": [[["nsubj", "specifies-2", "input_array1-1"], ["root", "ROOT-0", "specifies-2"], ["det", "number-4", "a-3"], ["dobj", "specifies-2", "number-4"], ["case", "input_array1-6", "of-5"], ["nmod:of", "number-4", "input_array1-6"], ["case", "kilometers-8", "in-7"], ["nmod:in", "input_array1-6", "kilometers-8"], ["case", "hour-10", "per-9"], ["nmod:per", "kilometers-8", "hour-10"]], [[]]], " You will be given a String[] input_array containing the binary representations of some input_array (all having the same length).\n": [[["nsubjpass", "given-4", "You-1"], ["aux", "given-4", "will-2"], ["auxpass", "given-4", "be-3"], ["root", "ROOT-0", "given-4"], ["det", "input_array-9", "a-5"], ["compound", "input_array-9", "String-6"], ["compound", "input_array-9", "-LSB--7"], ["compound", "input_array-9", "-RSB--8"], ["dobj", "given-4", "input_array-9"], ["acl", "input_array-9", "containing-10"], ["det", "representations-13", "the-11"], ["amod", "representations-13", "binary-12"], ["dobj", "containing-10", "representations-13"], ["case", "input_array-16", "of-14"], ["det", "input_array-16", "some-15"], ["nmod:of", "representations-13", "input_array-16"], ["advmod", "having-19", "all-18"], ["dep", "input_array-16", "having-19"], ["det", "length-22", "the-20"], ["amod", "length-22", "same-21"], ["dobj", "having-19", "length-22"]], [[]]], " Return the height of the tallest possible block tower Josh can build.\n": [[["amod", "Josh-10", "Return-1"], ["det", "height-3", "the-2"], ["dep", "Return-1", "height-3"], ["case", "block-8", "of-4"], ["det", "block-8", "the-5"], ["amod", "block-8", "tallest-6"], ["amod", "block-8", "possible-7"], ["nmod:of", "height-3", "block-8"], ["compound", "Josh-10", "tower-9"], ["nsubj", "build-12", "Josh-10"], ["aux", "build-12", "can-11"], ["root", "ROOT-0", "build-12"]], [[]]], " Return the smallest number of turns in which this can be done.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "smallest-3"], ["dobj", "Return-1", "number-4"], ["case", "turns-6", "of-5"], ["nmod:of", "number-4", "turns-6"], ["nmod:in", "done-12", "turns-6"], ["case", "which-8", "in-7"], ["ref", "turns-6", "which-8"], ["nsubjpass", "done-12", "this-9"], ["aux", "done-12", "can-10"], ["auxpass", "done-12", "be-11"], ["acl:relcl", "turns-6", "done-12"]], [[]]], " You are given a String x that contains the digits of a positive integer.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "String-5", "a-4"], ["iobj", "given-3", "String-5"], ["dobj", "given-3", "x-6"], ["nsubj", "contains-8", "x-6"], ["ref", "x-6", "that-7"], ["acl:relcl", "x-6", "contains-8"], ["det", "digits-10", "the-9"], ["dobj", "contains-8", "digits-10"], ["case", "integer-14", "of-11"], ["det", "integer-14", "a-12"], ["amod", "integer-14", "positive-13"], ["nmod:of", "digits-10", "integer-14"]], [[]]], "The remaining elements are calculated using the following recurrence: input_array[i] = input_array[i-1] + input_array[i-2] + input_array[i-3]": [[["det", "elements-3", "The-1"], ["amod", "elements-3", "remaining-2"], ["nsubjpass", "calculated-5", "elements-3"], ["auxpass", "calculated-5", "are-4"], ["dep", "-RSB--14", "calculated-5"], ["xcomp", "calculated-5", "using-6"], ["det", "recurrence-9", "the-7"], ["amod", "recurrence-9", "following-8"], ["dobj", "using-6", "recurrence-9"], ["advmod", "-LSB--12", "input_array-11"], ["parataxis", "using-6", "-LSB--12"], ["dobj", "-LSB--12", "i-13"], ["root", "ROOT-0", "-RSB--14"], ["dep", "-RSB--19", "=-15"], ["amod", "-RSB--19", "input_array-16"], ["amod", "-RSB--19", "-LSB--17"], ["amod", "-RSB--19", "i-1-18"], ["ccomp", "-RSB--14", "-RSB--19"], ["num", "-RSB--29", "+-20"], ["amod", "-RSB--29", "input_array-21"], ["amod", "-RSB--29", "-LSB--22"], ["amod", "-RSB--29", "i-2-23"], ["amod", "-RSB--29", "-RSB--24"], ["amod", "-RSB--29", "+-25"], ["amod", "-RSB--29", "input_array-26"], ["amod", "-RSB--29", "-LSB--27"], ["amod", "-RSB--29", "i-3-28"], ["nsubj", "-RSB--14", "-RSB--29"]], [[]]], " You are given a String input_array.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "input_array-6", "a-4"], ["compound", "input_array-6", "String-5"], ["dobj", "given-3", "input_array-6"]], [[]]], " Magical Girl Iris loves perfect squares.\n": [[["compound", "Iris-3", "Magical-1"], ["compound", "Iris-3", "Girl-2"], ["nsubj", "loves-4", "Iris-3"], ["root", "ROOT-0", "loves-4"], ["amod", "squares-6", "perfect-5"], ["dobj", "loves-4", "squares-6"]], [[]]], " There are two candidates campaigning to be president of a country.\n": [[["expl", "are-2", "There-1"], ["root", "ROOT-0", "are-2"], ["nummod", "candidates-4", "two-3"], ["nsubj", "are-2", "candidates-4"], ["acl", "candidates-4", "campaigning-5"], ["mark", "president-8", "to-6"], ["cop", "president-8", "be-7"], ["xcomp", "campaigning-5", "president-8"], ["case", "country-11", "of-9"], ["det", "country-11", "a-10"], ["nmod:of", "president-8", "country-11"]], [[]]], " Of course, Ciel does not want Jiro to win the game before she has a chance to play.\n": [[["case", "course-2", "Of-1"], ["nmod:of", "want-7", "course-2"], ["nsubj", "want-7", "Ciel-4"], ["aux", "want-7", "does-5"], ["neg", "want-7", "not-6"], ["root", "ROOT-0", "want-7"], ["dobj", "want-7", "Jiro-8"], ["nsubj", "win-10", "Jiro-8"], ["mark", "win-10", "to-9"], ["xcomp", "want-7", "win-10"], ["det", "game-12", "the-11"], ["dobj", "win-10", "game-12"], ["mark", "has-15", "before-13"], ["nsubj", "has-15", "she-14"], ["advcl", "win-10", "has-15"], ["det", "chance-17", "a-16"], ["dobj", "has-15", "chance-17"], ["mark", "play-19", "to-18"], ["acl", "chance-17", "play-19"]], [[]]], " Formally, Ciel thinks that a number X is interesting if the following property is satisfied: For each D between 0 and 9, inclusive, X either does not contain the digit D at all, or it contains exactly two digits D, and there are precisely D other digits between them.\n": [[["advmod", "thinks-4", "Formally-1"], ["nsubj", "thinks-4", "Ciel-3"], ["root", "ROOT-0", "thinks-4"], ["mark", "interesting-10", "that-5"], ["det", "X-8", "a-6"], ["compound", "X-8", "number-7"], ["nsubj", "interesting-10", "X-8"], ["cop", "interesting-10", "is-9"], ["ccomp", "thinks-4", "interesting-10"], ["mark", "satisfied-16", "if-11"], ["det", "property-14", "the-12"], ["amod", "property-14", "following-13"], ["nsubj", "satisfied-16", "property-14"], ["cop", "satisfied-16", "is-15"], ["advcl", "interesting-10", "satisfied-16"], ["case", "D-20", "For-18"], ["det", "D-20", "each-19"], ["nmod:for", "contain-32", "D-20"], ["case", "0-22", "between-21"], ["nmod:between", "D-20", "0-22"], ["cc", "0-22", "and-23"], ["nmod:between", "D-20", "9-24"], ["conj:and", "0-22", "9-24"], ["advmod", "contain-32", "inclusive-26"], ["nsubj", "contain-32", "X-28"], ["advmod", "contain-32", "either-29"], ["aux", "contain-32", "does-30"], ["neg", "contain-32", "not-31"], ["parataxis", "thinks-4", "contain-32"], ["det", "D-35", "the-33"], ["amod", "D-35", "digit-34"], ["dobj", "contain-32", "D-35"], ["case", "all-37", "at-36"], ["nmod:at", "contain-32", "all-37"], ["cc", "contain-32", "or-39"], ["nsubj", "contains-41", "it-40"], ["parataxis", "thinks-4", "contains-41"], ["conj:or", "contain-32", "contains-41"], ["advmod", "contains-41", "exactly-42"], ["nummod", "digits-44", "two-43"], ["nmod:npmod", "exactly-42", "digits-44"], ["dobj", "contains-41", "D-45"], ["cc", "contains-41", "and-47"], ["expl", "are-49", "there-48"], ["conj:or", "contain-32", "are-49"], ["conj:and", "contains-41", "are-49"], ["advmod", "are-49", "precisely-50"], ["compound", "digits-53", "D-51"], ["amod", "digits-53", "other-52"], ["nsubj", "are-49", "digits-53"], ["case", "them-55", "between-54"], ["nmod:between", "digits-53", "them-55"]], [[]]], "input_array0 palindrome is a string that is the same whether it is read from left to right or from right to left.": [[["amod", "palindrome-2", "input_array0-1"], ["nsubj", "string-5", "palindrome-2"], ["cop", "string-5", "is-3"], ["det", "string-5", "a-4"], ["root", "ROOT-0", "string-5"], ["nsubj", "same-9", "string-5"], ["cop", "same-9", "is-7"], ["det", "same-9", "the-8"], ["rcmod", "string-5", "same-9"], ["mark", "read-13", "whether-10"], ["nsubjpass", "read-13", "it-11"], ["nsubjpass", "read-13", "it-11"], ["auxpass", "read-13", "is-12"], ["ccomp", "same-9", "read-13"], ["ccomp", "same-9", "read-13"], ["conj_or", "read-13", "read-13"], ["prep_from", "read-13", "left-15"], ["prep_to", "read-13", "right-17"], ["prep_from", "read-13", "right-20"], ["prep_to", "read-13", "left-22"]], [[]]], "To be as fair as possible, you want to minimize the difference between the chosen bag with most mandarins and the chosen bag with fewest mandarins.": [[["aux", "fair-4", "To-1"], ["cop", "fair-4", "be-2"], ["advmod", "fair-4", "as-3"], ["advcl", "want-9", "fair-4"], ["prep_as", "fair-4", "possible-6"], ["nsubj", "want-9", "you-8"], ["nsubj", "minimize-11", "you-8"], ["root", "ROOT-0", "want-9"], ["aux", "minimize-11", "to-10"], ["xcomp", "want-9", "minimize-11"], ["det", "difference-13", "the-12"], ["dobj", "minimize-11", "difference-13"], ["det", "bag-17", "the-15"], ["amod", "bag-17", "chosen-16"], ["prep_between", "difference-13", "bag-17"], ["amod", "mandarins-20", "most-19"], ["prep_with", "bag-17", "mandarins-20"], ["det", "bag-24", "the-22"], ["amod", "bag-24", "chosen-23"], ["prep_between", "difference-13", "bag-24"], ["conj_and", "bag-17", "bag-24"], ["amod", "mandarins-27", "fewest-26"], ["prep_with", "bag-24", "mandarins-27"]], [[]]], " You want to choose exactly input_int input_array and distribute them among you and your friends.\n": [[["nsubj", "want-2", "You-1"], ["nsubj", "choose-4", "You-1"], ["nsubj", "distribute-9", "You-1"], ["root", "ROOT-0", "want-2"], ["mark", "choose-4", "to-3"], ["xcomp", "want-2", "choose-4"], ["advmod", "input_array-7", "exactly-5"], ["amod", "input_array-7", "input_int-6"], ["dobj", "choose-4", "input_array-7"], ["cc", "choose-4", "and-8"], ["xcomp", "want-2", "distribute-9"], ["conj:and", "choose-4", "distribute-9"], ["dobj", "distribute-9", "them-10"], ["case", "you-12", "among-11"], ["nmod:among", "distribute-9", "you-12"], ["cc", "you-12", "and-13"], ["nmod:poss", "friends-15", "your-14"], ["nmod:among", "distribute-9", "friends-15"], ["conj:and", "you-12", "friends-15"]], [[]]], " (This is explained below.)\n": [[["nsubjpass", "explained-4", "This-2"], ["auxpass", "explained-4", "is-3"], ["root", "ROOT-0", "explained-4"], ["advmod", "explained-4", "below-5"]], [[]]], " Advancing time in cellar i will gain Gogo a input_array0 of input_array0 [i].\n": [[["amod", "time-2", "Advancing-1"], ["nsubj", "gain-7", "time-2"], ["case", "i-5", "in-3"], ["compound", "i-5", "cellar-4"], ["nmod:in", "time-2", "i-5"], ["aux", "gain-7", "will-6"], ["root", "ROOT-0", "gain-7"], ["nsubj", "input_array0-10", "Gogo-8"], ["det", "input_array0-10", "a-9"], ["xcomp", "gain-7", "input_array0-10"], ["case", "-RSB--15", "of-11"], ["compound", "-RSB--15", "input_array0-12"], ["compound", "-RSB--15", "-LSB--13"], ["compound", "-RSB--15", "i-14"], ["nmod:of", "input_array0-10", "-RSB--15"]], [[]]], " For example, we already know that for S = {2, 5, 0} Gogo would move 5 balls.\n": [[["case", "example-2", "For-1"], ["nmod:for", "know-6", "example-2"], ["nsubj", "know-6", "we-4"], ["advmod", "know-6", "already-5"], ["root", "ROOT-0", "know-6"], ["nsubj", "move-20", "that-7"], ["case", "Gogo-18", "for-8"], ["compound", "Gogo-18", "S-9"], ["compound", "Gogo-18", "=-10"], ["appos", "Gogo-18", "2-12"], ["dep", "2-12", "5-14"], ["dep", "2-12", "0-16"], ["nmod:for", "that-7", "Gogo-18"], ["aux", "move-20", "would-19"], ["ccomp", "know-6", "move-20"], ["nummod", "balls-22", "5-21"], ["dobj", "move-20", "balls-22"]], [[]]], " The final hash would be 2+2+2+4+5+6 = 21.\n": [[["det", "hash-3", "The-1"], ["amod", "hash-3", "final-2"], ["nsubj", "+6-11", "hash-3"], ["aux", "+6-11", "would-4"], ["cop", "+6-11", "be-5"], ["nummod", "+6-11", "2-6"], ["nummod", "+6-11", "+2-7"], ["nummod", "+6-11", "+2-8"], ["nummod", "+6-11", "+4-9"], ["compound", "+6-11", "+5-10"], ["root", "ROOT-0", "+6-11"], ["dep", "21-13", "=-12"], ["dep", "+6-11", "21-13"]], [[]]], "More precisely, return a String that could have been the original message.": [[["advmod", "precisely-2", "More-1"], ["advmod", "return-4", "precisely-2"], ["root", "ROOT-0", "return-4"], ["det", "String-6", "a-5"], ["dobj", "return-4", "String-6"], ["nsubj", "message-13", "String-6"], ["aux", "message-13", "could-8"], ["aux", "message-13", "have-9"], ["cop", "message-13", "been-10"], ["det", "message-13", "the-11"], ["amod", "message-13", "original-12"], ["rcmod", "String-6", "message-13"]], [[]]], " Red, green, and blue balls are represented by characters 'R', 'G', and 'B', respectively.\n": [[["nsubjpass", "represented-9", "Red-1"], ["amod", "balls-7", "green-3"], ["cc", "green-3", "and-5"], ["conj:and", "green-3", "blue-6"], ["amod", "balls-7", "blue-6"], ["appos", "Red-1", "balls-7"], ["auxpass", "represented-9", "are-8"], ["root", "ROOT-0", "represented-9"], ["case", "R-13", "by-10"], ["compound", "R-13", "characters-11"], ["nmod:by", "represented-9", "R-13"], ["nmod:by", "represented-9", "G-17"], ["conj:and", "R-13", "G-17"], ["cc", "R-13", "and-20"], ["nmod:by", "represented-9", "B-22"], ["conj:and", "R-13", "B-22"], ["advmod", "represented-9", "respectively-25"]], [[]]], " One day, Elsh asks him to create a simple decoration for her desk.\n": [[["nummod", "day-2", "One-1"], ["nmod:tmod", "asks-5", "day-2"], ["nsubj", "asks-5", "Elsh-4"], ["root", "ROOT-0", "asks-5"], ["dobj", "asks-5", "him-6"], ["nsubj", "create-8", "him-6"], ["mark", "create-8", "to-7"], ["xcomp", "asks-5", "create-8"], ["det", "decoration-11", "a-9"], ["amod", "decoration-11", "simple-10"], ["dobj", "create-8", "decoration-11"], ["case", "desk-14", "for-12"], ["nmod:poss", "desk-14", "her-13"], ["nmod:for", "decoration-11", "desk-14"]], [[]]], " then each character value would be computed as follows:\n": [[["advmod", "value-4", "then-1"], ["det", "value-4", "each-2"], ["compound", "value-4", "character-3"], ["nsubjpass", "computed-7", "value-4"], ["aux", "computed-7", "would-5"], ["auxpass", "computed-7", "be-6"], ["root", "ROOT-0", "computed-7"], ["mark", "follows-9", "as-8"], ["advcl", "computed-7", "follows-9"]], [[]]], " Given an int input_int find all positive integers less than input_int whose digits are all different.\n": [[["case", "input_int-4", "Given-1"], ["det", "input_int-4", "an-2"], ["compound", "input_int-4", "int-3"], ["nmod:given", "find-5", "input_int-4"], ["root", "ROOT-0", "find-5"], ["det", "integers-8", "all-6"], ["amod", "integers-8", "positive-7"], ["dobj", "find-5", "integers-8"], ["advmod", "find-5", "less-9"], ["case", "less-9", "than-10"], ["nsubj", "find-5", "input_int-11"], ["nmod:poss", "digits-13", "whose-12"], ["nsubj", "different-16", "digits-13"], ["cop", "different-16", "are-14"], ["advmod", "different-16", "all-15"], ["ccomp", "input_int-11", "different-16"]], [[]]], " It's the season when deer shed their antlers.\n": [[["nsubj", "season-4", "It-1"], ["cop", "season-4", "'s-2"], ["det", "season-4", "the-3"], ["root", "ROOT-0", "season-4"], ["advmod", "shed-7", "when-5"], ["nsubj", "shed-7", "deer-6"], ["acl:relcl", "season-4", "shed-7"], ["nmod:poss", "antlers-9", "their-8"], ["dobj", "shed-7", "antlers-9"]], [[]]], " There are m different skills a maid should have, such as cooking, cleaning, or discreetness.\n": [[["expl", "skills-5", "There-1"], ["auxpass", "skills-5", "are-2"], ["cop", "skills-5", "m-3"], ["amod", "skills-5", "different-4"], ["root", "ROOT-0", "skills-5"], ["det", "maid-7", "a-6"], ["nsubj", "have-9", "maid-7"], ["aux", "have-9", "should-8"], ["dep", "skills-5", "have-9"], ["case", "cooking-13", "such-11"], ["mwe", "such-11", "as-12"], ["nmod:such_as", "skills-5", "cooking-13"], ["acl", "cooking-13", "cleaning-15"], ["cc", "skills-5", "or-17"], ["conj:or", "skills-5", "discreetness-18"]], [[]]], " Each element consists of the characters '1' and '2', where '1' represents some number of votes for candidate 1, and '2' represents votes for candidate 2 (in each element every character represents the same number of votes).\n": [[["det", "element-2", "Each-1"], ["nsubj", "consists-3", "element-2"], ["ccomp", "represents-32", "consists-3"], ["case", "characters-6", "of-4"], ["det", "characters-6", "the-5"], ["nmod:'", "consists-3", "characters-6"], ["case", "characters-6", "'-7"], ["nummod", "characters-6", "1-8"], ["ccomp", "consists-3", "and-10"], ["dobj", "and-10", "2-12"], ["advmod", "votes-23", "where-15"], ["nsubj", "votes-23", "'-16"], ["nmod:poss", "represents-19", "1-17"], ["case", "1-17", "'-18"], ["advmod", "votes-23", "represents-19"], ["det", "number-21", "some-20"], ["dep", "represents-19", "number-21"], ["case", "represents-19", "of-22"], ["advcl", "consists-3", "votes-23"], ["case", "candidate-25", "for-24"], ["nmod:for", "votes-23", "candidate-25"], ["nummod", "candidate-25", "1-26"], ["cc", "votes-23", "and-28"], ["dep", "2-30", "'-29"], ["advcl", "consists-3", "2-30"], ["conj:and", "votes-23", "2-30"], ["root", "ROOT-0", "represents-32"], ["dobj", "represents-32", "votes-33"], ["case", "candidate-35", "for-34"], ["nmod:for", "votes-33", "candidate-35"], ["nummod", "candidate-35", "2-36"], ["case", "element-40", "in-38"], ["det", "element-40", "each-39"], ["dep", "represents-32", "element-40"], ["det", "character-42", "every-41"], ["nsubj", "represents-43", "character-42"], ["acl:relcl", "element-40", "represents-43"], ["det", "number-46", "the-44"], ["amod", "number-46", "same-45"], ["dobj", "represents-43", "number-46"], ["case", "votes-48", "of-47"], ["nmod:of", "number-46", "votes-48"]], [[]]], " He now wonders what is the smallest possible result of Alice's original expression.\n": [[["nsubj", "wonders-3", "He-1"], ["advmod", "wonders-3", "now-2"], ["root", "ROOT-0", "wonders-3"], ["nsubj", "result-9", "what-4"], ["cop", "result-9", "is-5"], ["det", "result-9", "the-6"], ["amod", "result-9", "smallest-7"], ["amod", "result-9", "possible-8"], ["ccomp", "wonders-3", "result-9"], ["case", "expression-14", "of-10"], ["nmod:poss", "expression-14", "Alice-11"], ["case", "Alice-11", "'s-12"], ["amod", "expression-14", "original-13"], ["nmod:of", "result-9", "expression-14"]], [[]]], " Return \"Yes\" (quotes for clarity) if input_int is a semi-square number.\n": [[["compound", "Yes-3", "Return-1"], ["nsubj", "number-15", "Yes-3"], ["dep", "Yes-3", "quotes-6"], ["case", "clarity-8", "for-7"], ["nmod:for", "quotes-6", "clarity-8"], ["dep", "input_int-11", "if-10"], ["amod", "Yes-3", "input_int-11"], ["cop", "number-15", "is-12"], ["det", "number-15", "a-13"], ["amod", "number-15", "semi-square-14"], ["root", "ROOT-0", "number-15"]], [[]]], "John wants to buy exactly input_int eggs.": [[["nsubj", "wants-2", "John-1"], ["nsubj", "buy-4", "John-1"], ["root", "ROOT-0", "wants-2"], ["aux", "buy-4", "to-3"], ["xcomp", "wants-2", "buy-4"], ["advmod", "eggs-7", "exactly-5"], ["amod", "eggs-7", "input_int-6"], ["dobj", "buy-4", "eggs-7"]], [[]]], " The height of a tower is the sum of all heights of bricks that form the tower.\n": [[["det", "height-2", "The-1"], ["nsubj", "sum-8", "height-2"], ["case", "tower-5", "of-3"], ["det", "tower-5", "a-4"], ["nmod:of", "height-2", "tower-5"], ["cop", "sum-8", "is-6"], ["det", "sum-8", "the-7"], ["root", "ROOT-0", "sum-8"], ["case", "heights-11", "of-9"], ["det", "heights-11", "all-10"], ["nmod:of", "sum-8", "heights-11"], ["case", "bricks-13", "of-12"], ["nmod:of", "heights-11", "bricks-13"], ["nsubj", "form-15", "bricks-13"], ["ref", "bricks-13", "that-14"], ["acl:relcl", "bricks-13", "form-15"], ["det", "tower-17", "the-16"], ["dobj", "form-15", "tower-17"]], [[]]], " If X and Y are two Strings of equal length N, then the difference between them is defined as the number of indices i where the i-th character of X and the i-th character of Y are different.\n": [[["mark", "Strings-7", "If-1"], ["nsubj", "Strings-7", "X-2"], ["cc", "X-2", "and-3"], ["conj:and", "X-2", "Y-4"], ["nsubj", "Strings-7", "Y-4"], ["cop", "Strings-7", "are-5"], ["nummod", "Strings-7", "two-6"], ["advcl", "defined-19", "Strings-7"], ["case", "N-11", "of-8"], ["amod", "N-11", "equal-9"], ["compound", "N-11", "length-10"], ["nmod:of", "Strings-7", "N-11"], ["advmod", "difference-15", "then-13"], ["det", "difference-15", "the-14"], ["nsubjpass", "defined-19", "difference-15"], ["case", "them-17", "between-16"], ["nmod:between", "difference-15", "them-17"], ["auxpass", "defined-19", "is-18"], ["root", "ROOT-0", "defined-19"], ["case", "number-22", "as-20"], ["det", "number-22", "the-21"], ["nmod:as", "defined-19", "number-22"], ["case", "i-25", "of-23"], ["amod", "i-25", "indices-24"], ["nmod:of", "number-22", "i-25"], ["advmod", "different-39", "where-26"], ["det", "character-29", "the-27"], ["amod", "character-29", "i-th-28"], ["nsubj", "different-39", "character-29"], ["case", "X-31", "of-30"], ["nmod:of", "character-29", "X-31"], ["cc", "character-29", "and-32"], ["det", "character-35", "the-33"], ["amod", "character-35", "i-th-34"], ["conj:and", "character-29", "character-35"], ["nsubj", "different-39", "character-35"], ["case", "Y-37", "of-36"], ["nmod:of", "character-35", "Y-37"], ["cop", "different-39", "are-38"], ["advcl", "defined-19", "different-39"]], [[]]], " In the second step, he will color the bottom side of the frisbee using a color that makes a good transition from the first color.\n": [[["case", "step-4", "In-1"], ["det", "step-4", "the-2"], ["amod", "step-4", "second-3"], ["nmod:in", "color-8", "step-4"], ["nsubj", "color-8", "he-6"], ["aux", "color-8", "will-7"], ["root", "ROOT-0", "color-8"], ["det", "side-11", "the-9"], ["amod", "side-11", "bottom-10"], ["dobj", "color-8", "side-11"], ["case", "frisbee-14", "of-12"], ["det", "frisbee-14", "the-13"], ["nmod:of", "side-11", "frisbee-14"], ["acl", "frisbee-14", "using-15"], ["det", "color-17", "a-16"], ["dobj", "using-15", "color-17"], ["nsubj", "makes-19", "color-17"], ["ref", "color-17", "that-18"], ["acl:relcl", "color-17", "makes-19"], ["det", "transition-22", "a-20"], ["amod", "transition-22", "good-21"], ["dobj", "makes-19", "transition-22"], ["case", "color-26", "from-23"], ["det", "color-26", "the-24"], ["amod", "color-26", "first-25"], ["nmod:from", "makes-19", "color-26"]], [[]]], " Turning back time in cellar i will lose him input_array1 [i] in input_array0.\n": [[["csubj", "lose-8", "Turning-1"], ["compound:prt", "Turning-1", "back-2"], ["dobj", "Turning-1", "time-3"], ["case", "i-6", "in-4"], ["compound", "i-6", "cellar-5"], ["nmod:in", "time-3", "i-6"], ["aux", "lose-8", "will-7"], ["root", "ROOT-0", "lose-8"], ["nsubj", "-RSB--13", "him-9"], ["compound", "-RSB--13", "input_array1-10"], ["compound", "-RSB--13", "-LSB--11"], ["compound", "-RSB--13", "i-12"], ["xcomp", "lose-8", "-RSB--13"], ["case", "input_array0-15", "in-14"], ["nmod:in", "-RSB--13", "input_array0-15"]], [[]]], " The distance between two letters is defined as the absolute value of their difference.\n": [[["det", "distance-2", "The-1"], ["nsubjpass", "defined-7", "distance-2"], ["case", "letters-5", "between-3"], ["nummod", "letters-5", "two-4"], ["nmod:between", "distance-2", "letters-5"], ["auxpass", "defined-7", "is-6"], ["root", "ROOT-0", "defined-7"], ["case", "value-11", "as-8"], ["det", "value-11", "the-9"], ["amod", "value-11", "absolute-10"], ["nmod:as", "defined-7", "value-11"], ["case", "difference-14", "of-12"], ["nmod:poss", "difference-14", "their-13"], ["nmod:of", "value-11", "difference-14"]], [[]]], "Return this minimum possible difference.": [[["root", "ROOT-0", "Return-1"], ["det", "difference-5", "this-2"], ["amod", "difference-5", "minimum-3"], ["amod", "difference-5", "possible-4"], ["dep", "Return-1", "difference-5"]], [[]]], "Return the ambiguity number of the given tournament.": [[["root", "ROOT-0", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "ambiguity-3"], ["dobj", "Return-1", "number-4"], ["det", "tournament-8", "the-6"], ["amod", "tournament-8", "given-7"], ["prep_of", "number-4", "tournament-8"]], [[]]], " For example, the digit sum of 1234 is 1+2+3+4=10, and the digit sum of 3443 is 3+4+4+3=14.\n": [[["case", "example-2", "For-1"], ["nmod:for", "+4-13", "example-2"], ["det", "sum-6", "the-4"], ["amod", "sum-6", "digit-5"], ["nsubj", "+4-13", "sum-6"], ["case", "1234-8", "of-7"], ["nmod:of", "sum-6", "1234-8"], ["cop", "+4-13", "is-9"], ["compound", "+2-11", "1-10"], ["nummod", "+4-13", "+2-11"], ["compound", "+4-13", "+3-12"], ["root", "ROOT-0", "+4-13"], ["amod", "+4-13", "=-14"], ["dep", "=-14", "10-15"], ["cc", "+4-13", "and-17"], ["det", "sum-20", "the-18"], ["amod", "sum-20", "digit-19"], ["nsubj", "+3-27", "sum-20"], ["case", "3443-22", "of-21"], ["nmod:of", "sum-20", "3443-22"], ["cop", "+3-27", "is-23"], ["compound", "+4-25", "3-24"], ["nummod", "+3-27", "+4-25"], ["compound", "+3-27", "+4-26"], ["conj:and", "+4-13", "+3-27"], ["amod", "+3-27", "=-28"], ["dep", "=-28", "14-29"]], [[]]], "The message consisted of one or more copies of the same lowercase letter.": [[["det", "message-2", "The-1"], ["nsubj", "consisted-3", "message-2"], ["root", "ROOT-0", "consisted-3"], ["num", "copies-8", "one-5"], ["conj_or", "one-5", "more-7"], ["num", "copies-8", "more-7"], ["prep_of", "consisted-3", "copies-8"], ["det", "letter-13", "the-10"], ["amod", "letter-13", "same-11"], ["nn", "letter-13", "lowercase-12"], ["prep_of", "copies-8", "letter-13"]], [[]]], "Return the maximum input_array0 that Gogo can gain by advancing time in one cellar and turning time back in another cellar.": [[["root", "ROOT-0", "Return-1"], ["det", "input_array0-4", "the-2"], ["amod", "input_array0-4", "maximum-3"], ["dobj", "Return-1", "input_array0-4"], ["mark", "gain-8", "that-5"], ["nsubj", "gain-8", "Gogo-6"], ["aux", "gain-8", "can-7"], ["ccomp", "Return-1", "gain-8"], ["prepc_by", "gain-8", "advancing-10"], ["dobj", "advancing-10", "time-11"], ["num", "cellar-14", "one-13"], ["prep_in", "time-11", "cellar-14"], ["prepc_by", "gain-8", "turning-16"], ["conj_and", "advancing-10", "turning-16"], ["dobj", "turning-16", "time-17"], ["advmod", "turning-16", "back-18"], ["det", "cellar-21", "another-20"], ["prep_in", "turning-16", "cellar-21"]], [[]]], " In other words, he wants to pay the exact input_int of a ticket using any subset of his banknotes.\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "wants-6", "words-3"], ["nsubj", "wants-6", "he-5"], ["nsubj", "pay-8", "he-5"], ["root", "ROOT-0", "wants-6"], ["mark", "pay-8", "to-7"], ["xcomp", "wants-6", "pay-8"], ["det", "input_int-11", "the-9"], ["amod", "input_int-11", "exact-10"], ["dobj", "pay-8", "input_int-11"], ["case", "ticket-14", "of-12"], ["det", "ticket-14", "a-13"], ["nmod:of", "input_int-11", "ticket-14"], ["acl", "ticket-14", "using-15"], ["det", "subset-17", "any-16"], ["dobj", "using-15", "subset-17"], ["case", "banknotes-20", "of-18"], ["nmod:poss", "banknotes-20", "his-19"], ["nmod:of", "subset-17", "banknotes-20"]], [[]]], " Apply the operations in such a way that input_array1 and input_array2 have the same length and the difference between them is as small as possible.\n": [[["advmod", "small-23", "Apply-1"], ["det", "operations-3", "the-2"], ["nsubj", "small-23", "operations-3"], ["case", "way-7", "in-4"], ["det:predet", "way-7", "such-5"], ["det", "way-7", "a-6"], ["nmod:in", "operations-3", "way-7"], ["mark", "have-12", "that-8"], ["nsubj", "have-12", "input_array1-9"], ["cc", "input_array1-9", "and-10"], ["conj:and", "input_array1-9", "input_array2-11"], ["nsubj", "have-12", "input_array2-11"], ["dep", "way-7", "have-12"], ["det", "length-15", "the-13"], ["amod", "length-15", "same-14"], ["dobj", "have-12", "length-15"], ["cc", "length-15", "and-16"], ["det", "difference-18", "the-17"], ["dobj", "have-12", "difference-18"], ["conj:and", "length-15", "difference-18"], ["case", "them-20", "between-19"], ["nmod:between", "difference-18", "them-20"], ["cop", "small-23", "is-21"], ["advmod", "small-23", "as-22"], ["root", "ROOT-0", "small-23"], ["case", "possible-25", "as-24"], ["advcl:as", "small-23", "possible-25"]], [[]]], " When rearranging the balls, Gogo always moves them one ball at a time.\n": [[["advmod", "rearranging-2", "When-1"], ["advcl", "moves-8", "rearranging-2"], ["det", "balls-4", "the-3"], ["dobj", "rearranging-2", "balls-4"], ["nsubj", "moves-8", "Gogo-6"], ["advmod", "moves-8", "always-7"], ["root", "ROOT-0", "moves-8"], ["nsubj", "ball-11", "them-9"], ["nummod", "ball-11", "one-10"], ["xcomp", "moves-8", "ball-11"], ["case", "time-14", "at-12"], ["det", "time-14", "a-13"], ["nmod:at", "ball-11", "time-14"]], [[]]], " (In other words, the stars and ribbons are the vertices and edges of a tree.)\n": [[["case", "words-4", "In-2"], ["amod", "words-4", "other-3"], ["nmod:in", "vertices-12", "words-4"], ["det", "stars-7", "the-6"], ["nsubj", "vertices-12", "stars-7"], ["cc", "stars-7", "and-8"], ["conj:and", "stars-7", "ribbons-9"], ["nsubj", "vertices-12", "ribbons-9"], ["cop", "vertices-12", "are-10"], ["det", "vertices-12", "the-11"], ["root", "ROOT-0", "vertices-12"], ["cc", "vertices-12", "and-13"], ["conj:and", "vertices-12", "edges-14"], ["case", "tree-17", "of-15"], ["det", "tree-17", "a-16"], ["nmod:of", "vertices-12", "tree-17"]], [[]]], " After the letter 'b'.\n": [[["case", "letter-3", "After-1"], ["det", "letter-3", "the-2"], ["root", "ROOT-0", "letter-3"], ["dep", "letter-3", "b-5"]], [[]]], " In other words, you may choose a pair of distinct indices i and j, and swap the characters input_array [i] and input_array [j].\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "choose-7", "words-3"], ["nsubj", "choose-7", "you-5"], ["nsubj", "swap-18", "you-5"], ["aux", "choose-7", "may-6"], ["root", "ROOT-0", "choose-7"], ["det", "pair-9", "a-8"], ["dobj", "choose-7", "pair-9"], ["case", "i-13", "of-10"], ["amod", "i-13", "distinct-11"], ["compound", "i-13", "indices-12"], ["nmod:of", "pair-9", "i-13"], ["cc", "i-13", "and-14"], ["nmod:of", "pair-9", "j-15"], ["conj:and", "i-13", "j-15"], ["cc", "choose-7", "and-17"], ["conj:and", "choose-7", "swap-18"], ["det", "-RSB--24", "the-19"], ["compound", "-RSB--24", "characters-20"], ["compound", "-RSB--24", "input_array-21"], ["compound", "-RSB--24", "-LSB--22"], ["compound", "-RSB--24", "i-23"], ["dobj", "swap-18", "-RSB--24"], ["cc", "-RSB--24", "and-25"], ["amod", "-RSB--29", "input_array-26"], ["amod", "-RSB--29", "-LSB--27"], ["compound", "-RSB--29", "j-28"], ["dobj", "swap-18", "-RSB--29"], ["conj:and", "-RSB--24", "-RSB--29"]], [[]]], " You are given a String input_array consisting of lower case letters.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "input_array-6", "a-4"], ["compound", "input_array-6", "String-5"], ["dobj", "given-3", "input_array-6"], ["xcomp", "given-3", "consisting-7"], ["case", "letters-11", "of-8"], ["amod", "letters-11", "lower-9"], ["compound", "letters-11", "case-10"], ["nmod:of", "consisting-7", "letters-11"]], [[]]], " Little Elephant wants to obtain a row in which all balls have the same color.\n": [[["compound", "Elephant-2", "Little-1"], ["nsubj", "wants-3", "Elephant-2"], ["nsubj", "obtain-5", "Elephant-2"], ["root", "ROOT-0", "wants-3"], ["mark", "obtain-5", "to-4"], ["xcomp", "wants-3", "obtain-5"], ["det", "row-7", "a-6"], ["dobj", "obtain-5", "row-7"], ["nmod:in", "have-12", "row-7"], ["case", "which-9", "in-8"], ["ref", "row-7", "which-9"], ["det", "balls-11", "all-10"], ["nsubj", "have-12", "balls-11"], ["acl:relcl", "row-7", "have-12"], ["det", "color-15", "the-13"], ["amod", "color-15", "same-14"], ["dobj", "have-12", "color-15"]], [[]]], " You are given a String expression that contains the expression on Alice's screen.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "expression-6", "a-4"], ["compound", "expression-6", "String-5"], ["dobj", "given-3", "expression-6"], ["nsubj", "contains-8", "expression-6"], ["ref", "expression-6", "that-7"], ["acl:relcl", "expression-6", "contains-8"], ["det", "expression-10", "the-9"], ["dobj", "contains-8", "expression-10"], ["case", "screen-14", "on-11"], ["nmod:poss", "screen-14", "Alice-12"], ["case", "Alice-12", "'s-13"], ["nmod:on", "expression-10", "screen-14"]], [[]]], " Given the String input_array and the int input_int , reconstruct the original message.\n": [[["case", "input_array-4", "Given-1"], ["det", "input_array-4", "the-2"], ["compound", "input_array-4", "String-3"], ["nmod:given", "reconstruct-10", "input_array-4"], ["cc", "input_array-4", "and-5"], ["det", "input_int-8", "the-6"], ["compound", "input_int-8", "int-7"], ["conj:and", "input_array-4", "input_int-8"], ["nmod:given", "reconstruct-10", "input_int-8"], ["root", "ROOT-0", "reconstruct-10"], ["det", "message-13", "the-11"], ["amod", "message-13", "original-12"], ["dobj", "reconstruct-10", "message-13"]], [[]]], "Compute and return the smallest possible result after inserting the missing plus sign": [[["root", "ROOT-0", "Compute-1"], ["conj_and", "Compute-1", "return-3"], ["det", "result-7", "the-4"], ["amod", "result-7", "smallest-5"], ["amod", "result-7", "possible-6"], ["dobj", "return-3", "result-7"], ["prepc_after", "return-3", "inserting-9"], ["det", "sign-13", "the-10"], ["amod", "sign-13", "missing-11"], ["nn", "sign-13", "plus-12"], ["dobj", "inserting-9", "sign-13"]], [[]]], " Brus and Gogo came to the zoo today.\n": [[["nsubj", "came-4", "Brus-1"], ["cc", "Brus-1", "and-2"], ["conj:and", "Brus-1", "Gogo-3"], ["nsubj", "came-4", "Gogo-3"], ["root", "ROOT-0", "came-4"], ["case", "zoo-7", "to-5"], ["det", "zoo-7", "the-6"], ["nmod:to", "came-4", "zoo-7"], ["nmod:tmod", "came-4", "today-8"]], [[]]], "The height of the tower is simply the sum of heights of all its blocks.": [[["det", "height-2", "The-1"], ["nsubj", "sum-9", "height-2"], ["det", "tower-5", "the-4"], ["prep_of", "height-2", "tower-5"], ["cop", "sum-9", "is-6"], ["advmod", "sum-9", "simply-7"], ["det", "sum-9", "the-8"], ["root", "ROOT-0", "sum-9"], ["prep_of", "sum-9", "heights-11"], ["predet", "blocks-15", "all-13"], ["poss", "blocks-15", "its-14"], ["prep_of", "heights-11", "blocks-15"]], [[]]], " As a birthday gift she received two strings input_array0 and input_array1 .\n": [[["case", "gift-4", "As-1"], ["det", "gift-4", "a-2"], ["compound", "gift-4", "birthday-3"], ["nmod:as", "received-6", "gift-4"], ["nsubj", "received-6", "she-5"], ["root", "ROOT-0", "received-6"], ["nummod", "strings-8", "two-7"], ["dobj", "received-6", "strings-8"], ["amod", "strings-8", "input_array0-9"], ["cc", "input_array0-9", "and-10"], ["amod", "strings-8", "input_array1-11"], ["conj:and", "input_array0-9", "input_array1-11"]], [[]]], " All positions are 0-based.\n": [[["det", "positions-2", "All-1"], ["nsubj", "0-based-4", "positions-2"], ["cop", "0-based-4", "are-3"], ["root", "ROOT-0", "0-based-4"]], [[]]], "Return the number of possible insertion variants.": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dep", "Return-1", "number-3"], ["amod", "variants-7", "possible-5"], ["nn", "variants-7", "insertion-6"], ["prep_of", "number-3", "variants-7"]], [[]]], " You must change exactly input_int characters in input_array1 into other types letters.\n": [[["nsubj", "change-3", "You-1"], ["aux", "change-3", "must-2"], ["root", "ROOT-0", "change-3"], ["advmod", "characters-6", "exactly-4"], ["amod", "characters-6", "input_int-5"], ["dobj", "change-3", "characters-6"], ["case", "input_array1-8", "in-7"], ["nmod:in", "characters-6", "input_array1-8"], ["case", "letters-12", "into-9"], ["amod", "letters-12", "other-10"], ["compound", "letters-12", "types-11"], ["nmod:into", "change-3", "letters-12"]], [[]]], " In one turn Little Elephant can remove either the first ball in the row, or the last one.\n": [[["case", "turn-3", "In-1"], ["nummod", "turn-3", "one-2"], ["nmod:in", "remove-7", "turn-3"], ["compound", "Elephant-5", "Little-4"], ["nsubj", "remove-7", "Elephant-5"], ["aux", "remove-7", "can-6"], ["root", "ROOT-0", "remove-7"], ["advmod", "ball-11", "either-8"], ["det", "ball-11", "the-9"], ["amod", "ball-11", "first-10"], ["dobj", "remove-7", "ball-11"], ["case", "row-14", "in-12"], ["det", "row-14", "the-13"], ["nmod:in", "remove-7", "row-14"], ["cc", "row-14", "or-16"], ["det", "one-19", "the-17"], ["amod", "one-19", "last-18"], ["nmod:in", "remove-7", "one-19"], ["conj:or", "row-14", "one-19"]], [[]]], " For example, one possible way to palindromize number 25 is adding 8 resulting in number 33, which is palindromic.\n": [[["case", "example-2", "For-1"], ["nmod:for", "adding-12", "example-2"], ["nummod", "way-6", "one-4"], ["amod", "way-6", "possible-5"], ["nsubj", "adding-12", "way-6"], ["mark", "palindromize-8", "to-7"], ["acl", "way-6", "palindromize-8"], ["dobj", "palindromize-8", "number-9"], ["nummod", "number-9", "25-10"], ["aux", "adding-12", "is-11"], ["root", "ROOT-0", "adding-12"], ["dobj", "adding-12", "8-13"], ["acl", "8-13", "resulting-14"], ["case", "number-16", "in-15"], ["nmod:in", "resulting-14", "number-16"], ["nsubj", "palindromic-21", "number-16"], ["nummod", "number-16", "33-17"], ["ref", "number-16", "which-19"], ["cop", "palindromic-21", "is-20"], ["acl:relcl", "number-16", "palindromic-21"]], [[]]], "Your method must return \"YES\" (quotes for clarity) if Cucumber Boy can buy any set of input_int2 unique cucumbers, and \"NO\" if there is some set of input_int2 cucumbers that is too expensive for him.": [[["poss", "method-2", "Your-1"], ["nsubj", "return-4", "method-2"], ["aux", "return-4", "must-3"], ["root", "ROOT-0", "return-4"], ["dobj", "return-4", "YES-6"], ["dep", "YES-6", "quotes-9"], ["prep_for", "quotes-9", "clarity-11"], ["mark", "buy-17", "if-13"], ["nn", "Boy-15", "Cucumber-14"], ["nsubj", "buy-17", "Boy-15"], ["aux", "buy-17", "can-16"], ["advcl", "return-4", "buy-17"], ["det", "set-19", "any-18"], ["dobj", "buy-17", "set-19"], ["amod", "cucumbers-23", "input_int2-21"], ["amod", "cucumbers-23", "unique-22"], ["prep_of", "set-19", "cucumbers-23"], ["advcl", "return-4", "NO-27"], ["conj_and", "buy-17", "NO-27"], ["mark", "is-31", "if-29"], ["expl", "is-31", "there-30"], ["advcl", "return-4", "is-31"], ["det", "set-33", "some-32"], ["nsubj", "is-31", "set-33"], ["nsubj", "expensive-40", "set-33"], ["amod", "cucumbers-36", "input_int2-35"], ["prep_of", "set-33", "cucumbers-36"], ["cop", "expensive-40", "is-38"], ["advmod", "expensive-40", "too-39"], ["rcmod", "set-33", "expensive-40"], ["prep_for", "expensive-40", "him-42"]], [[]]], "Compute and return the number of peaks in the given mountain range.": [[["root", "ROOT-0", "Compute-1"], ["conj_and", "Compute-1", "return-3"], ["det", "number-5", "the-4"], ["dobj", "return-3", "number-5"], ["prep_of", "number-5", "peaks-7"], ["det", "range-12", "the-9"], ["amod", "range-12", "given-10"], ["nn", "range-12", "mountain-11"], ["prep_in", "peaks-7", "range-12"]], [[]]], "Return the number of far from primes numbers between input_int1 and input_int2, inclusive.": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["prep_far_from", "numbers-8", "primes-7"], ["prep_of", "number-3", "numbers-8"], ["prep_between", "numbers-8", "input_int1-10"], ["prep_between", "numbers-8", "input_int2-12"], ["conj_and", "input_int1-10", "input_int2-12"], ["dep", "Return-1", "inclusive-14"]], [[]]], " Your goal is to defeat all of them.\n": [[["nmod:poss", "goal-2", "Your-1"], ["nsubj", "is-3", "goal-2"], ["nsubj", "defeat-5", "goal-2"], ["root", "ROOT-0", "is-3"], ["mark", "defeat-5", "to-4"], ["xcomp", "is-3", "defeat-5"], ["dobj", "defeat-5", "all-6"], ["case", "them-8", "of-7"], ["nmod:of", "all-6", "them-8"]], [[]]], " Little Arthur has a new frisbee and he would like to color it.\n": [[["compound", "Arthur-2", "Little-1"], ["nsubj", "has-3", "Arthur-2"], ["root", "ROOT-0", "has-3"], ["det", "frisbee-6", "a-4"], ["amod", "frisbee-6", "new-5"], ["dobj", "has-3", "frisbee-6"], ["cc", "has-3", "and-7"], ["nsubj", "like-10", "he-8"], ["nsubj", "color-12", "he-8"], ["aux", "like-10", "would-9"], ["conj:and", "has-3", "like-10"], ["mark", "color-12", "to-11"], ["xcomp", "like-10", "color-12"], ["dobj", "color-12", "it-13"]], [[]]], " It is a well-known fact that cosmic amoebas cannot lie on top of matter, so every cell of the input_array covered by the amoeba must only contain antimatter.\n": [[["nsubj", "fact-5", "It-1"], ["cop", "fact-5", "is-2"], ["det", "fact-5", "a-3"], ["amod", "fact-5", "well-known-4"], ["root", "ROOT-0", "fact-5"], ["mark", "lie-11", "that-6"], ["amod", "amoebas-8", "cosmic-7"], ["nsubj", "lie-11", "amoebas-8"], ["aux", "lie-11", "can-9"], ["neg", "lie-11", "not-10"], ["ccomp", "fact-5", "lie-11"], ["case", "top-13", "on-12"], ["nmod:on", "lie-11", "top-13"], ["case", "matter-15", "of-14"], ["nmod:of", "top-13", "matter-15"], ["dep", "fact-5", "so-17"], ["det", "cell-19", "every-18"], ["nsubj", "contain-29", "cell-19"], ["case", "input_array-22", "of-20"], ["det", "input_array-22", "the-21"], ["nmod:of", "cell-19", "input_array-22"], ["acl", "input_array-22", "covered-23"], ["case", "amoeba-26", "by-24"], ["det", "amoeba-26", "the-25"], ["nmod:by", "covered-23", "amoeba-26"], ["aux", "contain-29", "must-27"], ["advmod", "contain-29", "only-28"], ["parataxis", "fact-5", "contain-29"], ["dobj", "contain-29", "antimatter-30"]], [[]]], " Romeo can place it on the input_array in any orientation as long as every cell of the input_array is either completely covered by part of the amoeba or completely uncovered, and no part of the amoeba lies outside of the input_array.\n": [[["nsubj", "place-3", "Romeo-1"], ["aux", "place-3", "can-2"], ["root", "ROOT-0", "place-3"], ["dobj", "place-3", "it-4"], ["case", "input_array-7", "on-5"], ["det", "input_array-7", "the-6"], ["nmod:on", "place-3", "input_array-7"], ["case", "orientation-10", "in-8"], ["det", "orientation-10", "any-9"], ["nmod:in", "input_array-7", "orientation-10"], ["advmod", "long-12", "as-11"], ["advmod", "place-3", "long-12"], ["mark", "covered-22", "as-13"], ["det", "cell-15", "every-14"], ["nsubjpass", "covered-22", "cell-15"], ["nsubjpass", "uncovered-30", "cell-15"], ["case", "input_array-18", "of-16"], ["det", "input_array-18", "the-17"], ["nmod:of", "cell-15", "input_array-18"], ["auxpass", "covered-22", "is-19"], ["advmod", "covered-22", "either-20"], ["advmod", "covered-22", "completely-21"], ["advcl", "long-12", "covered-22"], ["case", "part-24", "by-23"], ["nmod:by", "covered-22", "part-24"], ["case", "amoeba-27", "of-25"], ["det", "amoeba-27", "the-26"], ["nmod:of", "part-24", "amoeba-27"], ["cc", "covered-22", "or-28"], ["advmod", "uncovered-30", "completely-29"], ["advcl", "long-12", "uncovered-30"], ["conj:or", "covered-22", "uncovered-30"], ["cc", "place-3", "and-32"], ["neg", "part-34", "no-33"], ["nsubj", "lies-38", "part-34"], ["case", "amoeba-37", "of-35"], ["det", "amoeba-37", "the-36"], ["nmod:of", "part-34", "amoeba-37"], ["conj:and", "place-3", "lies-38"], ["dobj", "lies-38", "outside-39"], ["case", "input_array-42", "of-40"], ["det", "input_array-42", "the-41"], ["nmod:of", "outside-39", "input_array-42"]], [[]]], " Note that you may also leave the original number unchanged.\n": [[["root", "ROOT-0", "Note-1"], ["mark", "leave-6", "that-2"], ["nsubj", "leave-6", "you-3"], ["aux", "leave-6", "may-4"], ["advmod", "leave-6", "also-5"], ["ccomp", "Note-1", "leave-6"], ["det", "number-9", "the-7"], ["amod", "number-9", "original-8"], ["nsubj", "unchanged-10", "number-9"], ["xcomp", "leave-6", "unchanged-10"]], [[]]], " You can only attack one fairy at a time.\n": [[["nsubj", "attack-4", "You-1"], ["aux", "attack-4", "can-2"], ["advmod", "attack-4", "only-3"], ["root", "ROOT-0", "attack-4"], ["nummod", "fairy-6", "one-5"], ["dobj", "attack-4", "fairy-6"], ["case", "time-9", "at-7"], ["det", "time-9", "a-8"], ["nmod:at", "fairy-6", "time-9"]], [[]]], "Return the smallest number of steps needed to change input_int into a Fibonacci number.": [[["advmod", "needed-7", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "smallest-3"], ["nsubj", "needed-7", "number-4"], ["nsubj", "change-9", "number-4"], ["prep_of", "number-4", "steps-6"], ["root", "ROOT-0", "needed-7"], ["aux", "change-9", "to-8"], ["xcomp", "needed-7", "change-9"], ["dobj", "change-9", "input_int-10"], ["det", "number-14", "a-12"], ["nn", "number-14", "Fibonacci-13"], ["prep_into", "change-9", "number-14"]], [[]]], " You are given two Strings, input_array1 and input_array2, where the length of input_array1 is less than or equal to the length of input_array2.\n": [[["nsubjpass", "given-3", "You-1"], ["nsubj", "equal-20", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["nummod", "Strings-5", "two-4"], ["dobj", "given-3", "Strings-5"], ["dobj", "given-3", "input_array1-7"], ["conj:and", "Strings-5", "input_array1-7"], ["cc", "Strings-5", "and-8"], ["dobj", "given-3", "input_array2-9"], ["conj:and", "Strings-5", "input_array2-9"], ["advmod", "is-16", "where-11"], ["det", "length-13", "the-12"], ["nsubj", "is-16", "length-13"], ["case", "input_array1-15", "of-14"], ["nmod:of", "length-13", "input_array1-15"], ["advcl", "given-3", "is-16"], ["advmod", "is-16", "less-17"], ["case", "less-17", "than-18"], ["cc", "given-3", "or-19"], ["conj:or", "given-3", "equal-20"], ["case", "length-23", "to-21"], ["det", "length-23", "the-22"], ["nmod:to", "equal-20", "length-23"], ["case", "input_array2-25", "of-24"], ["nmod:of", "length-23", "input_array2-25"]], [[]]], " For example, val['a'] = 1 and val['e'] = 5.\n": [[["case", "example-2", "For-1"], ["nmod:for", "-LSB--5", "example-2"], ["nsubj", "-LSB--5", "val-4"], ["nsubj", "val-13", "val-4"], ["root", "ROOT-0", "-LSB--5"], ["compound", "-RSB--9", "a-7"], ["dobj", "-LSB--5", "-RSB--9"], ["dep", "1-11", "=-10"], ["dep", "-RSB--9", "1-11"], ["cc", "-LSB--5", "and-12"], ["conj:and", "-LSB--5", "val-13"], ["compound", "-RSB--18", "-LSB--14"], ["compound", "-RSB--18", "e-16"], ["nsubj", "5-20", "-RSB--18"], ["dep", "5-20", "=-19"], ["ccomp", "val-13", "5-20"]], [[]]], " Return this minimum possible difference.\n": [[["root", "ROOT-0", "Return-1"], ["det", "difference-5", "this-2"], ["amod", "difference-5", "minimum-3"], ["amod", "difference-5", "possible-4"], ["dep", "Return-1", "difference-5"]], [[]]], " These expressions evaluate to 137, 101, and 290.\n": [[["det", "expressions-2", "These-1"], ["nsubj", "evaluate-3", "expressions-2"], ["root", "ROOT-0", "evaluate-3"], ["case", "137-5", "to-4"], ["nmod:to", "evaluate-3", "137-5"], ["nmod:to", "evaluate-3", "101-7"], ["conj:and", "137-5", "101-7"], ["cc", "137-5", "and-9"], ["nmod:to", "evaluate-3", "290-10"], ["conj:and", "137-5", "290-10"]], [[]]], " We call a pair of Strings (input_array0, input_array1) \"wood\" if input_array1 is contained in input_array0 as a subsequence.\n": [[["nsubj", "call-2", "We-1"], ["root", "ROOT-0", "call-2"], ["det", "pair-4", "a-3"], ["dobj", "call-2", "pair-4"], ["case", "Strings-6", "of-5"], ["nmod:of", "pair-4", "Strings-6"], ["dep", "pair-4", "input_array0-8"], ["appos", "input_array0-8", "input_array1-10"], ["dep", "pair-4", "wood-13"], ["mark", "contained-18", "if-15"], ["nsubjpass", "contained-18", "input_array1-16"], ["auxpass", "contained-18", "is-17"], ["dep", "wood-13", "contained-18"], ["case", "input_array0-20", "in-19"], ["nmod:in", "contained-18", "input_array0-20"], ["case", "subsequence-23", "as-21"], ["det", "subsequence-23", "a-22"], ["nmod:as", "input_array0-20", "subsequence-23"]], [[]]], " Return this number.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "this-2"], ["dep", "Return-1", "number-3"]], [[]]], "F[1] = 1": [[["nsubj", "-LSB--2", "F-1"], ["root", "ROOT-0", "-LSB--2"], ["number", "-RSB--4", "1-3"], ["nsubj", "1-6", "-RSB--4"], ["dep", "1-6", "=-5"], ["ccomp", "-LSB--2", "1-6"]], [[]]], "The Hamming distance between two input_array is defined as the number of positions in their binary representations at which they differ (leading zeros are used if necessary to make the binary representations have the same length) -": [[["det", "distance-3", "The-1"], ["nn", "distance-3", "Hamming-2"], ["nsubjpass", "defined-8", "distance-3"], ["prep_between", "distance-3", "two-5"], ["advmod", "defined-8", "input_array-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["det", "number-11", "the-10"], ["prep_as", "defined-8", "number-11"], ["prep_at", "differ-21", "number-11"], ["prep_of", "number-11", "positions-13"], ["poss", "representations-17", "their-15"], ["amod", "representations-17", "binary-16"], ["prep_in", "positions-13", "representations-17"], ["nsubj", "differ-21", "they-20"], ["rcmod", "number-11", "differ-21"], ["amod", "zeros-24", "leading-23"], ["nsubjpass", "used-26", "zeros-24"], ["auxpass", "used-26", "are-25"], ["parataxis", "differ-21", "used-26"], ["mark", "have-34", "if-27"], ["amod", "representations-33", "necessary-28"], ["aux", "make-30", "to-29"], ["xcomp", "necessary-28", "make-30"], ["det", "binary-32", "the-31"], ["dobj", "make-30", "binary-32"], ["nsubj", "have-34", "representations-33"], ["advcl", "used-26", "have-34"], ["det", "length-37", "the-35"], ["amod", "length-37", "same-36"], ["dobj", "have-34", "length-37"]], [[]]], " A tower has to consist of at least one brick.\n": [[["det", "tower-2", "A-1"], ["nsubj", "has-3", "tower-2"], ["nsubj", "consist-5", "tower-2"], ["root", "ROOT-0", "has-3"], ["mark", "consist-5", "to-4"], ["xcomp", "has-3", "consist-5"], ["case", "brick-10", "of-6"], ["case", "least-8", "at-7"], ["nmod:npmod", "one-9", "least-8"], ["nummod", "brick-10", "one-9"], ["nmod:of", "consist-5", "brick-10"]], [[]]], "You are to return an int representing the 0-based index of the state where the lowest percentage of people are planning on voting for candidate 1.": [[["nsubj", "are-2", "You-1"], ["nsubj", "return-4", "You-1"], ["root", "ROOT-0", "are-2"], ["aux", "return-4", "to-3"], ["xcomp", "are-2", "return-4"], ["det", "int-6", "an-5"], ["dobj", "return-4", "int-6"], ["vmod", "int-6", "representing-7"], ["det", "index-10", "the-8"], ["amod", "index-10", "0-based-9"], ["dobj", "representing-7", "index-10"], ["det", "state-13", "the-12"], ["prep_of", "index-10", "state-13"], ["advmod", "planning-21", "where-14"], ["det", "percentage-17", "the-15"], ["amod", "percentage-17", "lowest-16"], ["nsubj", "planning-21", "percentage-17"], ["prep_of", "percentage-17", "people-19"], ["aux", "planning-21", "are-20"], ["advcl", "representing-7", "planning-21"], ["prepc_on", "planning-21", "voting-23"], ["prep_for", "voting-23", "candidate-25"], ["num", "candidate-25", "1-26"]], [[]]], " He decided to place his amoeba on a rectangular input_array.\n": [[["nsubj", "decided-2", "He-1"], ["nsubj", "place-4", "He-1"], ["root", "ROOT-0", "decided-2"], ["mark", "place-4", "to-3"], ["xcomp", "decided-2", "place-4"], ["nmod:poss", "amoeba-6", "his-5"], ["dobj", "place-4", "amoeba-6"], ["case", "input_array-10", "on-7"], ["det", "input_array-10", "a-8"], ["amod", "input_array-10", "rectangular-9"], ["nmod:on", "place-4", "input_array-10"]], [[]]], "If the total input_array of the chosen cucumbers is not greater than input_int1 yen, he can buy them, otherwise he cannot.": [[["mark", "greater-11", "If-1"], ["det", "input_array-4", "the-2"], ["amod", "input_array-4", "total-3"], ["nsubj", "greater-11", "input_array-4"], ["det", "cucumbers-8", "the-6"], ["amod", "cucumbers-8", "chosen-7"], ["prep_of", "input_array-4", "cucumbers-8"], ["cop", "greater-11", "is-9"], ["neg", "greater-11", "not-10"], ["advcl", "buy-18", "greater-11"], ["amod", "yen-14", "input_int1-13"], ["prep_than", "greater-11", "yen-14"], ["nsubj", "buy-18", "he-16"], ["aux", "buy-18", "can-17"], ["root", "ROOT-0", "buy-18"], ["dobj", "buy-18", "them-19"], ["advmod", "can-23", "otherwise-21"], ["nsubj", "can-23", "he-22"], ["parataxis", "buy-18", "can-23"], ["neg", "can-23", "not-24"]], [[]]], "input_array is a permutation of S": [[["advmod", "is-2", "input_array-1"], ["root", "ROOT-0", "is-2"], ["det", "permutation-4", "a-3"], ["nsubj", "is-2", "permutation-4"], ["prep_of", "permutation-4", "S-6"]], [[]]], " (Two towers of the same height are considered the same, even if they differ in the number and colors of bricks that form them.)\n": [[["nummod", "towers-3", "Two-2"], ["nsubjpass", "considered-9", "towers-3"], ["case", "height-7", "of-4"], ["det", "height-7", "the-5"], ["amod", "height-7", "same-6"], ["nmod:of", "towers-3", "height-7"], ["auxpass", "considered-9", "are-8"], ["root", "ROOT-0", "considered-9"], ["det", "same-11", "the-10"], ["dobj", "considered-9", "same-11"], ["advmod", "differ-16", "even-13"], ["mark", "differ-16", "if-14"], ["nsubj", "differ-16", "they-15"], ["advcl", "considered-9", "differ-16"], ["case", "number-19", "in-17"], ["det", "number-19", "the-18"], ["nmod:in", "differ-16", "number-19"], ["cc", "number-19", "and-20"], ["nmod:in", "differ-16", "colors-21"], ["conj:and", "number-19", "colors-21"], ["case", "bricks-23", "of-22"], ["nmod:of", "number-19", "bricks-23"], ["nsubj", "form-25", "bricks-23"], ["ref", "bricks-23", "that-24"], ["acl:relcl", "bricks-23", "form-25"], ["dobj", "form-25", "them-26"]], [[]]], " They have two types of bricks: red and blue ones.\n": [[["nsubj", "have-2", "They-1"], ["root", "ROOT-0", "have-2"], ["nummod", "types-4", "two-3"], ["dobj", "have-2", "types-4"], ["case", "bricks-6", "of-5"], ["nmod:of", "types-4", "bricks-6"], ["amod", "ones-11", "red-8"], ["cc", "red-8", "and-9"], ["conj:and", "red-8", "blue-10"], ["amod", "ones-11", "blue-10"], ["dep", "bricks-6", "ones-11"]], [[]]], " You are to return the minimum among the Hamming distances of all pairs of the given input_array.\n": [[["nsubj", "are-2", "You-1"], ["nsubj", "return-4", "You-1"], ["root", "ROOT-0", "are-2"], ["mark", "return-4", "to-3"], ["xcomp", "are-2", "return-4"], ["det", "minimum-6", "the-5"], ["dobj", "return-4", "minimum-6"], ["case", "distances-10", "among-7"], ["det", "distances-10", "the-8"], ["amod", "distances-10", "Hamming-9"], ["nmod:among", "return-4", "distances-10"], ["case", "pairs-13", "of-11"], ["det", "pairs-13", "all-12"], ["nmod:of", "distances-10", "pairs-13"], ["case", "input_array-17", "of-14"], ["det", "input_array-17", "the-15"], ["amod", "input_array-17", "given-16"], ["nmod:of", "pairs-13", "input_array-17"]], [[]]], " Otherwise, return \"No\".\n": [[["advmod", "return-3", "Otherwise-1"], ["root", "ROOT-0", "return-3"], ["dep", "return-3", "No-5"]], [[]]], "Brus is going to choose two different positions in John's input_array and swap the elements at those positions.": [[["nsubj", "going-3", "Brus-1"], ["nsubj", "choose-5", "Brus-1"], ["nsubj", "swap-14", "Brus-1"], ["aux", "going-3", "is-2"], ["root", "ROOT-0", "going-3"], ["aux", "choose-5", "to-4"], ["xcomp", "going-3", "choose-5"], ["num", "positions-8", "two-6"], ["amod", "positions-8", "different-7"], ["dobj", "choose-5", "positions-8"], ["poss", "input_array-12", "John-10"], ["prep_in", "positions-8", "input_array-12"], ["xcomp", "going-3", "swap-14"], ["conj_and", "choose-5", "swap-14"], ["det", "elements-16", "the-15"], ["dobj", "swap-14", "elements-16"], ["det", "positions-19", "those-18"], ["prep_at", "swap-14", "positions-19"]], [[]]], " A transition from color (R, G, B) to color (R', G', B') is called good if all components differ by at most input_int7 units (formally, |R - R'| <= input_int7 , |G - G'| <= input_int7 , |B - B'| <= input_int7 ) and at least one component differs by at least input_int6 units (formally, at least one of the conditions |R - R'| >= input_int6 , |G - G'| >= input_int6 , |B - B'| >= input_int6 holds).\n": [[["det", "transition-2", "A-1"], ["nsubjpass", "called-25", "transition-2"], ["case", "color-4", "from-3"], ["nmod:from", "transition-2", "color-4"], ["appos", "color-4", "R-6"], ["dep", "R-6", "G-8"], ["dep", "R-6", "B-10"], ["case", "color-13", "to-12"], ["nmod:to", "color-4", "color-13"], ["dep", "color-13", "R-15"], ["appos", "color-13", "G-18"], ["nsubjpass", "called-25", "B-21"], ["case", "B-21", "'-22"], ["auxpass", "called-25", "is-24"], ["dep", "differs-74", "called-25"], ["xcomp", "called-25", "good-26"], ["mark", "differ-30", "if-27"], ["det", "components-29", "all-28"], ["nsubj", "differ-30", "components-29"], ["advcl", "called-25", "differ-30"], ["case", "units-35", "by-31"], ["case", "units-35", "at-32"], ["advmod", "input_int7-34", "most-33"], ["amod", "units-35", "input_int7-34"], ["nmod:by", "differ-30", "units-35"], ["dep", "R-40", "formally-37"], ["amod", "R-40", "|-39"], ["dep", "units-35", "R-40"], ["nmod:poss", "|-44", "R-42"], ["case", "R-42", "'-43"], ["dobj", "differ-30", "|-44"], ["acl", "|-44", "<-45"], ["dep", "input_int7-47", "=-46"], ["ccomp", "<-45", "input_int7-47"], ["compound", "G-50", "|-49"], ["xcomp", "<-45", "G-50"], ["nmod:poss", "input_int7-57", "G-52"], ["case", "G-52", "'-53"], ["compound", "input_int7-57", "|-54"], ["compound", "input_int7-57", "<-55"], ["compound", "input_int7-57", "=-56"], ["dep", "|-44", "input_int7-57"], ["compound", "B-60", "|-59"], ["appos", "|-44", "B-60"], ["nmod:poss", "|-64", "B-62"], ["case", "B-62", "'-63"], ["dep", "B-60", "|-64"], ["acl", "|-64", "<-65"], ["dep", "input_int7-67", "=-66"], ["ccomp", "<-65", "input_int7-67"], ["cc", "|-44", "and-69"], ["case", "least-71", "at-70"], ["advmod", "|-44", "least-71"], ["nummod", "component-73", "one-72"], ["nsubj", "differs-74", "component-73"], ["root", "ROOT-0", "differs-74"], ["case", "units-79", "by-75"], ["case", "least-77", "at-76"], ["nmod:npmod", "input_int6-78", "least-77"], ["nummod", "units-79", "input_int6-78"], ["nmod:by", "differs-74", "units-79"], ["dep", "one-85", "formally-81"], ["case", "least-84", "at-83"], ["nmod:npmod", "one-85", "least-84"], ["dep", "units-79", "one-85"], ["case", "R-90", "of-86"], ["det", "R-90", "the-87"], ["compound", "R-90", "conditions-88"], ["compound", "R-90", "|-89"], ["nmod:of", "one-85", "R-90"], ["nmod:poss", "input_int6-97", "R-92"], ["case", "R-92", "'-93"], ["compound", "input_int6-97", "|-94"], ["compound", "input_int6-97", ">-95"], ["compound", "input_int6-97", "=-96"], ["dep", "R-90", "input_int6-97"], ["compound", "G-100", "|-99"], ["appos", "input_int6-97", "G-100"], ["nmod:poss", ">-105", "G-102"], ["case", "G-102", "'-103"], ["amod", ">-105", "|-104"], ["dep", "R-90", ">-105"], ["dep", "input_int6-107", "=-106"], ["dep", ">-105", "input_int6-107"], ["compound", "B-110", "|-109"], ["dep", "one-85", "B-110"], ["compound", ">-115", "B-112"], ["compound", ">-115", "|-114"], ["dep", "B-110", ">-115"], ["dep", "holds-118", "=-116"], ["amod", "holds-118", "input_int6-117"], ["acl:relcl", ">-115", "holds-118"]], [[]]], " For each i, buying the i-th cucumber (0-based index) costs input_array[i] yen.\n": [[["case", "i-3", "For-1"], ["det", "i-3", "each-2"], ["nmod:for", "-LSB--15", "i-3"], ["csubj", "-LSB--15", "buying-5"], ["det", "costs-13", "the-6"], ["amod", "costs-13", "i-th-7"], ["compound", "costs-13", "cucumber-8"], ["amod", "index-11", "0-based-10"], ["appos", "costs-13", "index-11"], ["dobj", "buying-5", "costs-13"], ["advmod", "-LSB--15", "input_array-14"], ["root", "ROOT-0", "-LSB--15"], ["amod", "yen-18", "i-16"], ["amod", "yen-18", "-RSB--17"], ["dobj", "-LSB--15", "yen-18"]], [[]]], " Palindromization of a number means adding or subtracting some value to obtain a palindromic number.\n": [[["nsubj", "means-5", "Palindromization-1"], ["case", "number-4", "of-2"], ["det", "number-4", "a-3"], ["nmod:of", "Palindromization-1", "number-4"], ["root", "ROOT-0", "means-5"], ["xcomp", "means-5", "adding-6"], ["cc", "adding-6", "or-7"], ["xcomp", "means-5", "subtracting-8"], ["conj:or", "adding-6", "subtracting-8"], ["det", "value-10", "some-9"], ["dobj", "adding-6", "value-10"], ["mark", "obtain-12", "to-11"], ["acl", "value-10", "obtain-12"], ["det", "number-15", "a-13"], ["amod", "number-15", "palindromic-14"], ["dobj", "obtain-12", "number-15"]], [[]]], " For example, instead of \"128+9\" the computer's screen now shows \"1289\".\n": [[["case", "example-2", "For-1"], ["nmod:for", "shows-15", "example-2"], ["case", "+9-8", "instead-4"], ["mwe", "instead-4", "of-5"], ["nummod", "+9-8", "128-7"], ["advcl:instead_of", "shows-15", "+9-8"], ["det", "computer-11", "the-10"], ["nmod:poss", "screen-13", "computer-11"], ["case", "computer-11", "'s-12"], ["nsubj", "shows-15", "screen-13"], ["advmod", "screen-13", "now-14"], ["root", "ROOT-0", "shows-15"], ["dobj", "shows-15", "1289-17"]], [[]]], "To make the sequence look interesting, each pair of adjacent marbles must have different colors.": [[["aux", "make-2", "To-1"], ["advcl", "have-14", "make-2"], ["det", "sequence-4", "the-3"], ["nsubj", "look-5", "sequence-4"], ["ccomp", "make-2", "look-5"], ["acomp", "look-5", "interesting-6"], ["det", "pair-9", "each-8"], ["nsubj", "have-14", "pair-9"], ["amod", "marbles-12", "adjacent-11"], ["prep_of", "pair-9", "marbles-12"], ["aux", "have-14", "must-13"], ["root", "ROOT-0", "have-14"], ["amod", "colors-16", "different-15"], ["dobj", "have-14", "colors-16"]], [[]]], " Hence, f(\"abc\") and f(\"bca\") are two different infinite strings: the first one starts with an 'a' while the other starts with a 'b'.\n": [[["advmod", "strings-20", "Hence-1"], ["nsubj", "strings-20", "f-3"], ["dep", "f-3", "abc-6"], ["cc", "f-3", "and-9"], ["conj:and", "f-3", "f-10"], ["nsubj", "strings-20", "f-10"], ["dep", "f-10", "bca-13"], ["cop", "strings-20", "are-16"], ["nummod", "strings-20", "two-17"], ["amod", "strings-20", "different-18"], ["compound", "strings-20", "infinite-19"], ["root", "ROOT-0", "strings-20"], ["det", "starts-25", "the-22"], ["amod", "starts-25", "first-23"], ["nummod", "starts-25", "one-24"], ["dep", "strings-20", "starts-25"], ["case", "a-29", "with-26"], ["det", "a-29", "an-27"], ["nmod:with", "starts-25", "a-29"], ["mark", "starts-34", "while-31"], ["det", "other-33", "the-32"], ["nsubj", "starts-34", "other-33"], ["acl:relcl", "starts-25", "starts-34"], ["case", "b-38", "with-35"], ["det", "b-38", "a-36"], ["nmod:with", "starts-34", "b-38"]], [[]]], " Return the number of different passwords Fred needs to try.\n": [[["case", "number-3", "Return-1"], ["det", "number-3", "the-2"], ["nmod:return", "needs-8", "number-3"], ["case", "passwords-6", "of-4"], ["amod", "passwords-6", "different-5"], ["nmod:of", "number-3", "passwords-6"], ["nsubj", "needs-8", "Fred-7"], ["nsubj", "try-10", "Fred-7"], ["root", "ROOT-0", "needs-8"], ["mark", "try-10", "to-9"], ["xcomp", "needs-8", "try-10"]], [[]]], "The returned hash is the sum of all character values in input.": [[["det", "hash-3", "The-1"], ["amod", "hash-3", "returned-2"], ["nsubj", "sum-6", "hash-3"], ["cop", "sum-6", "is-4"], ["det", "sum-6", "the-5"], ["root", "ROOT-0", "sum-6"], ["det", "values-10", "all-8"], ["nn", "values-10", "character-9"], ["prep_of", "sum-6", "values-10"], ["prep_in", "values-10", "input-12"]], [[]]], " You are given a int input_int .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "input_int-6", "a-4"], ["compound", "input_int-6", "int-5"], ["dobj", "given-3", "input_int-6"]], [[]]], " You had a non-empty string input_array0 but you lost it.\n": [[["nsubj", "had-2", "You-1"], ["root", "ROOT-0", "had-2"], ["det", "input_array0-6", "a-3"], ["amod", "input_array0-6", "non-empty-4"], ["compound", "input_array0-6", "string-5"], ["dobj", "had-2", "input_array0-6"], ["cc", "had-2", "but-7"], ["nsubj", "lost-9", "you-8"], ["conj:but", "had-2", "lost-9"], ["dobj", "lost-9", "it-10"]], [[]]], " 'A' has alphabet position 0, 'B' has alphabet position 1, ...\n": [[["nsubj", "has-4", "A-2"], ["root", "ROOT-0", "has-4"], ["compound", "position-6", "alphabet-5"], ["dobj", "has-4", "position-6"], ["nummod", "position-6", "0-7"], ["nsubj", "has-12", "B-10"], ["case", "B-10", "'-11"], ["parataxis", "has-4", "has-12"], ["compound", "position-14", "alphabet-13"], ["dobj", "has-12", "position-14"], ["nummod", "position-14", "1-15"]], [[]]], " The result is \"abba\" and it is also a palindrome.\n": [[["det", "result-2", "The-1"], ["nsubj", "abba-5", "result-2"], ["cop", "abba-5", "is-3"], ["root", "ROOT-0", "abba-5"], ["cc", "abba-5", "and-7"], ["nsubj", "palindrome-12", "it-8"], ["cop", "palindrome-12", "is-9"], ["advmod", "palindrome-12", "also-10"], ["det", "palindrome-12", "a-11"], ["conj:and", "abba-5", "palindrome-12"]], [[]]], " You are given the ints input_int0 , input_int1 , input_int2 and input_int3 .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "ints-5", "the-4"], ["iobj", "given-3", "ints-5"], ["dobj", "given-3", "input_int0-6"], ["dobj", "given-3", "input_int1-8"], ["conj:and", "input_int0-6", "input_int1-8"], ["dobj", "given-3", "input_int2-10"], ["conj:and", "input_int0-6", "input_int2-10"], ["cc", "input_int0-6", "and-11"], ["dobj", "given-3", "input_int3-12"], ["conj:and", "input_int0-6", "input_int3-12"]], [[]]], " If it's impossible to buy exactly input_int eggs, return -1.\\\n": [[["mark", "impossible-4", "If-1"], ["nsubj", "impossible-4", "it-2"], ["nsubj", "buy-6", "it-2"], ["cop", "impossible-4", "'s-3"], ["advcl", "return-11", "impossible-4"], ["mark", "buy-6", "to-5"], ["xcomp", "impossible-4", "buy-6"], ["advmod", "eggs-9", "exactly-7"], ["amod", "eggs-9", "input_int-8"], ["dobj", "buy-6", "eggs-9"], ["root", "ROOT-0", "return-11"], ["dobj", "return-11", "-1-12"]], [[]]], " You are given a int[] input_array1 with N elements.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "a-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array1-8", "-LSB--6"], ["amod", "input_array1-8", "-RSB--7"], ["dobj", "given-3", "input_array1-8"], ["case", "elements-11", "with-9"], ["compound", "elements-11", "N-10"], ["nmod:with", "input_array1-8", "elements-11"]], [[]]], " If he had S = {0, 5, 2} instead, he would also produce input_array = {0, 2, 5}, but this time he would only need 3 moves.\n": [[["mark", "had-3", "If-1"], ["nsubj", "had-3", "he-2"], ["advcl", "produce-18", "had-3"], ["compound", "=-5", "S-4"], ["dobj", "had-3", "=-5"], ["appos", "=-5", "0-7"], ["dep", "0-7", "5-9"], ["dep", "0-7", "2-11"], ["advmod", "=-5", "instead-13"], ["nsubj", "produce-18", "he-15"], ["aux", "produce-18", "would-16"], ["advmod", "produce-18", "also-17"], ["root", "ROOT-0", "produce-18"], ["amod", "=-20", "input_array-19"], ["dobj", "produce-18", "=-20"], ["appos", "=-20", "0-22"], ["dep", "0-22", "2-24"], ["dep", "0-22", "5-26"], ["cc", "produce-18", "but-29"], ["det", "time-31", "this-30"], ["nsubj", "need-35", "time-31"], ["nsubj", "need-35", "he-32"], ["aux", "need-35", "would-33"], ["advmod", "need-35", "only-34"], ["conj:but", "produce-18", "need-35"], ["nummod", "moves-37", "3-36"], ["dobj", "need-35", "moves-37"]], [[]]], " All the squares are arranged in a single row.\n": [[["det:predet", "squares-3", "All-1"], ["det", "squares-3", "the-2"], ["nsubjpass", "arranged-5", "squares-3"], ["auxpass", "arranged-5", "are-4"], ["root", "ROOT-0", "arranged-5"], ["case", "row-9", "in-6"], ["det", "row-9", "a-7"], ["amod", "row-9", "single-8"], ["nmod:in", "arranged-5", "row-9"]], [[]]], " There are n candidates for the position.\n": [[["expl", "are-2", "There-1"], ["root", "ROOT-0", "are-2"], ["compound", "candidates-4", "n-3"], ["nsubj", "are-2", "candidates-4"], ["case", "position-7", "for-5"], ["det", "position-7", "the-6"], ["nmod:for", "candidates-4", "position-7"]], [[]]], " Given input_int return the minimum amount of money Arthur needs.\n": [[["case", "return-3", "Given-1"], ["amod", "return-3", "input_int-2"], ["nmod:given", "needs-10", "return-3"], ["det", "amount-6", "the-4"], ["amod", "amount-6", "minimum-5"], ["nsubj", "needs-10", "amount-6"], ["case", "Arthur-9", "of-7"], ["compound", "Arthur-9", "money-8"], ["nmod:of", "amount-6", "Arthur-9"], ["root", "ROOT-0", "needs-10"]], [[]]], "Return the total number of such integers.": [[["root", "ROOT-0", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "total-3"], ["dep", "Return-1", "number-4"], ["amod", "integers-7", "such-6"], ["prep_of", "number-4", "integers-7"]], [[]]], " Return the number of possible insertion variants.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dep", "Return-1", "number-3"], ["case", "variants-7", "of-4"], ["amod", "variants-7", "possible-5"], ["compound", "variants-7", "insertion-6"], ["nmod:of", "number-3", "variants-7"]], [[]]], " The height of the tower is simply the sum of heights of all its blocks.\n": [[["det", "height-2", "The-1"], ["nsubj", "sum-9", "height-2"], ["case", "tower-5", "of-3"], ["det", "tower-5", "the-4"], ["nmod:of", "height-2", "tower-5"], ["cop", "sum-9", "is-6"], ["advmod", "sum-9", "simply-7"], ["det", "sum-9", "the-8"], ["root", "ROOT-0", "sum-9"], ["case", "heights-11", "of-10"], ["nmod:of", "sum-9", "heights-11"], ["case", "blocks-15", "of-12"], ["det:predet", "blocks-15", "all-13"], ["nmod:poss", "blocks-15", "its-14"], ["nmod:of", "heights-11", "blocks-15"]], [[]]], " input = {\"CBA\",\n": [[["nsubj", "=-2", "input-1"], ["root", "ROOT-0", "=-2"], ["dobj", "=-2", "CBA-5"]], [[]]], " In other words, among all sequences S that produce the given sequence input_array, find one that requires the most moves, and return that number of moves.\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "sequences-7", "words-3"], ["case", "all-6", "among-5"], ["nmod:among", "sequences-7", "all-6"], ["root", "ROOT-0", "sequences-7"], ["dobj", "sequences-7", "S-8"], ["nsubj", "produce-10", "S-8"], ["nsubj", "find-16", "S-8"], ["nsubj", "return-25", "S-8"], ["ref", "S-8", "that-9"], ["acl:relcl", "S-8", "produce-10"], ["det", "input_array-14", "the-11"], ["amod", "input_array-14", "given-12"], ["compound", "input_array-14", "sequence-13"], ["dobj", "produce-10", "input_array-14"], ["acl:relcl", "S-8", "find-16"], ["conj:and", "produce-10", "find-16"], ["dobj", "find-16", "one-17"], ["nsubj", "requires-19", "one-17"], ["ref", "one-17", "that-18"], ["acl:relcl", "one-17", "requires-19"], ["det", "moves-22", "the-20"], ["amod", "moves-22", "most-21"], ["dobj", "requires-19", "moves-22"], ["cc", "produce-10", "and-24"], ["acl:relcl", "S-8", "return-25"], ["conj:and", "produce-10", "return-25"], ["det", "number-27", "that-26"], ["dobj", "return-25", "number-27"], ["case", "moves-29", "of-28"], ["nmod:of", "number-27", "moves-29"]], [[]]], " F[1] = 1\n": [[["nsubj", "-LSB--2", "F-1"], ["root", "ROOT-0", "-LSB--2"], ["compound", "-RSB--4", "1-3"], ["nsubj", "1-6", "-RSB--4"], ["dep", "1-6", "=-5"], ["ccomp", "-LSB--2", "1-6"]], [[]]], " for each i >= 2: F[i] = F[i-1] + F[i-2]\n": [[["case", "i-3", "for-1"], ["det", "i-3", "each-2"], ["nmod:for", ">-4", "i-3"], ["root", "ROOT-0", ">-4"], ["dep", "2-6", "=-5"], ["ccomp", ">-4", "2-6"], ["compound", "-RSB--11", "F-8"], ["compound", "-RSB--11", "-LSB--9"], ["compound", "-RSB--11", "i-10"], ["dobj", ">-4", "-RSB--11"], ["dep", "-LSB--14", "=-12"], ["compound", "-LSB--14", "F-13"], ["dep", "-RSB--11", "-LSB--14"], ["amod", "-RSB--21", "i-1-15"], ["compound", "-RSB--21", "-RSB--16"], ["compound", "-RSB--21", "+-17"], ["compound", "-RSB--21", "F-18"], ["compound", "-RSB--21", "-LSB--19"], ["compound", "-RSB--21", "i-2-20"], ["nsubj", ">-4", "-RSB--21"]], [[]]], "Return the least sum of two positive integers a and b such that input_int2 is a divisor of a* input_int0 +b* input_int1 .": [[["root", "ROOT-0", "Return-1"], ["det", "sum-4", "the-2"], ["amod", "sum-4", "least-3"], ["dobj", "Return-1", "sum-4"], ["num", "integers-8", "two-6"], ["amod", "integers-8", "positive-7"], ["prep_of", "sum-4", "integers-8"], ["dep", "sum-4", "a-9"], ["dep", "divisor-17", "b-11"], ["predet", "input_int2-14", "such-12"], ["det", "input_int2-14", "that-13"], ["nsubj", "divisor-17", "input_int2-14"], ["cop", "divisor-17", "is-15"], ["det", "divisor-17", "a-16"], ["conj_and", "Return-1", "divisor-17"], ["det", "input_int1-25", "a-19"], ["dep", "+-22", "*-20"], ["num", "+-22", "input_int0-21"], ["dep", "b-23", "+-22"], ["dep", "input_int1-25", "b-23"], ["amod", "input_int1-25", "*-24"], ["prep_of", "divisor-17", "input_int1-25"]], [[]]], " Choose a character c and add it to the beginning of input_array1.\n": [[["root", "ROOT-0", "Choose-1"], ["det", "c-4", "a-2"], ["compound", "c-4", "character-3"], ["dobj", "Choose-1", "c-4"], ["cc", "Choose-1", "and-5"], ["conj:and", "Choose-1", "add-6"], ["dobj", "add-6", "it-7"], ["case", "beginning-10", "to-8"], ["det", "beginning-10", "the-9"], ["nmod:to", "add-6", "beginning-10"], ["case", "input_array1-12", "of-11"], ["nmod:of", "beginning-10", "input_array1-12"]], [[]]], "Given the string, compute and return the value of the string.": [[["prep", "compute-5", "Given-1"], ["det", "string-3", "the-2"], ["pobj", "Given-1", "string-3"], ["root", "ROOT-0", "compute-5"], ["conj_and", "compute-5", "return-7"], ["det", "value-9", "the-8"], ["dobj", "return-7", "value-9"], ["det", "string-12", "the-11"], ["prep_of", "value-9", "string-12"]], [[]]], " You are given an int[] input_array .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "int-5", "an-4"], ["iobj", "given-3", "int-5"], ["amod", "input_array-8", "-LSB--6"], ["amod", "input_array-8", "-RSB--7"], ["dobj", "given-3", "input_array-8"]], [[]]], " Given Strings input_array0 and input_array1, return the String \"Yep, it'input_array0 wood.\" (quotes for clarity) if the pair (input_array0, input_array1) is wood and \"Nope.\" otherwise.\n": [[["case", "Strings-2", "Given-1"], ["nmod:given", "input_array0-15", "Strings-2"], ["nummod", "Strings-2", "input_array0-3"], ["cc", "Strings-2", "and-4"], ["conj:and", "Strings-2", "input_array1-5"], ["nmod:given", "input_array0-15", "input_array1-5"], ["parataxis", "input_array0-15", "return-7"], ["det", "String-9", "the-8"], ["dep", "Yep-11", "String-9"], ["xcomp", "return-7", "Yep-11"], ["nsubj", "input_array0-15", "it-13"], ["root", "ROOT-0", "input_array0-15"], ["dobj", "input_array0-15", "wood-16"]], [["csubj", "Nope-18", "quotes-2"], ["compound:prt", "quotes-2", "for-3"], ["dobj", "quotes-2", "clarity-4"], ["case", "pair-8", "if-6"], ["det", "pair-8", "the-7"], ["advmod", "quotes-2", "pair-8"], ["dep", "pair-8", "input_array0-10"], ["appos", "input_array0-10", "input_array1-12"], ["cop", "Nope-18", "is-14"], ["dep", "Nope-18", "wood-15"], ["cc", "Nope-18", "and-16"], ["root", "ROOT-0", "Nope-18"]], [["root", "ROOT-0", "otherwise-1"]], [[]]], " She wants a sequence of marbles consisting of at most two different colors.\n": [[["nsubj", "wants-2", "She-1"], ["root", "ROOT-0", "wants-2"], ["det", "sequence-4", "a-3"], ["dobj", "wants-2", "sequence-4"], ["case", "marbles-6", "of-5"], ["nmod:of", "sequence-4", "marbles-6"], ["acl", "marbles-6", "consisting-7"], ["case", "colors-13", "of-8"], ["case", "most-10", "at-9"], ["nmod:npmod", "two-11", "most-10"], ["nummod", "colors-13", "two-11"], ["amod", "colors-13", "different-12"], ["nmod:of", "consisting-7", "colors-13"]], [[]]], " You are to create a class Multiples with a method number, which takes three ints: input_int0, input_int1, and input_int2.\n": [[["nsubj", "are-2", "You-1"], ["nsubj", "create-4", "You-1"], ["root", "ROOT-0", "are-2"], ["mark", "create-4", "to-3"], ["xcomp", "are-2", "create-4"], ["det", "Multiples-7", "a-5"], ["compound", "Multiples-7", "class-6"], ["dobj", "create-4", "Multiples-7"], ["case", "number-11", "with-8"], ["det", "number-11", "a-9"], ["compound", "number-11", "method-10"], ["nmod:with", "create-4", "number-11"], ["nsubj", "takes-14", "number-11"], ["ref", "number-11", "which-13"], ["acl:relcl", "number-11", "takes-14"], ["nummod", "ints-16", "three-15"], ["dobj", "takes-14", "ints-16"], ["dep", "ints-16", "input_int0-18"], ["nummod", "input_int0-18", "input_int1-20"], ["cc", "input_int0-18", "and-22"], ["dep", "ints-16", "input_int2-23"], ["conj:and", "input_int0-18", "input_int2-23"]], [[]]], "In other words, among all sequences S that produce the given sequence input_array, find one that requires the most moves, and return that number of moves.": [[["amod", "words-3", "other-2"], ["prep_in", "sequences-7", "words-3"], ["prep_among", "sequences-7", "all-6"], ["root", "ROOT-0", "sequences-7"], ["dobj", "sequences-7", "S-8"], ["nsubj", "produce-10", "S-8"], ["nsubj", "find-16", "S-8"], ["nsubj", "return-25", "S-8"], ["rcmod", "S-8", "produce-10"], ["det", "input_array-14", "the-11"], ["amod", "input_array-14", "given-12"], ["nn", "input_array-14", "sequence-13"], ["dobj", "produce-10", "input_array-14"], ["rcmod", "S-8", "find-16"], ["conj_and", "produce-10", "find-16"], ["dobj", "find-16", "one-17"], ["nsubj", "requires-19", "one-17"], ["rcmod", "one-17", "requires-19"], ["det", "moves-22", "the-20"], ["amod", "moves-22", "most-21"], ["dobj", "requires-19", "moves-22"], ["rcmod", "S-8", "return-25"], ["conj_and", "produce-10", "return-25"], ["det", "number-27", "that-26"], ["dobj", "return-25", "number-27"], ["prep_of", "number-27", "moves-29"]], [[]]], "We call a pair of Strings (input_array0, input_array1) \"wood\" if input_array1 is contained in input_array0 as a subsequence.": [[["nsubj", "call-2", "We-1"], ["root", "ROOT-0", "call-2"], ["det", "pair-4", "a-3"], ["dobj", "call-2", "pair-4"], ["iobj", "call-2", "pair-4"], ["prep_of", "pair-4", "Strings-6"], ["dep", "pair-4", "input_array0-8"], ["appos", "input_array0-8", "input_array1-10"], ["dep", "pair-4", "wood-13"], ["mark", "contained-18", "if-15"], ["nsubjpass", "contained-18", "input_array1-16"], ["auxpass", "contained-18", "is-17"], ["dep", "wood-13", "contained-18"], ["prep_in", "contained-18", "input_array0-20"], ["det", "subsequence-23", "a-22"], ["prep_as", "input_array0-20", "subsequence-23"]], [[]]], " She typed the expression \"a+b\" into her computer, but the '+' key malfunctioned.\n": [[["nsubj", "typed-2", "She-1"], ["root", "ROOT-0", "typed-2"], ["det", "expression-4", "the-3"], ["dobj", "typed-2", "expression-4"], ["det", "b-8", "a-6"], ["amod", "b-8", "+-7"], ["dep", "expression-4", "b-8"], ["case", "computer-12", "into-10"], ["nmod:poss", "computer-12", "her-11"], ["nmod:into", "typed-2", "computer-12"], ["cc", "typed-2", "but-14"], ["nmod:poss", "key-19", "the-15"], ["case", "the-15", "'-16"], ["amod", "key-19", "+-17"], ["nsubj", "malfunctioned-20", "key-19"], ["conj:but", "typed-2", "malfunctioned-20"]], [[]]], " Tom is in charge of a tourist agency.\n": [[["nsubj", "charge-4", "Tom-1"], ["cop", "charge-4", "is-2"], ["case", "charge-4", "in-3"], ["root", "ROOT-0", "charge-4"], ["case", "agency-8", "of-5"], ["det", "agency-8", "a-6"], ["compound", "agency-8", "tourist-7"], ["nmod:of", "charge-4", "agency-8"]], [[]]], " Therefore, Cucumber Boy will go to the cucumber market to buy some cucumbers.\n": [[["advmod", "go-6", "Therefore-1"], ["compound", "Boy-4", "Cucumber-3"], ["nsubj", "go-6", "Boy-4"], ["nsubj", "buy-12", "Boy-4"], ["aux", "go-6", "will-5"], ["root", "ROOT-0", "go-6"], ["case", "market-10", "to-7"], ["det", "market-10", "the-8"], ["compound", "market-10", "cucumber-9"], ["nmod:to", "go-6", "market-10"], ["mark", "buy-12", "to-11"], ["xcomp", "go-6", "buy-12"], ["det", "cucumbers-14", "some-13"], ["dobj", "buy-12", "cucumbers-14"]], [[]]], "print([input_array0(one_cellar,another_cellar) for one_cellar, another_cellar in pairs(range(N))])": [[["root", "ROOT-0", "print-1"], ["amod", "input_array0-4", "-LSB--3"], ["dep", "print-1", "input_array0-4"], ["dep", "input_array0-4", "one_cellar-6"], ["appos", "one_cellar-6", "another_cellar-8"], ["prep_for", "input_array0-4", "one_cellar-11"], ["appos", "one_cellar-11", "another_cellar-13"], ["prep_in", "another_cellar-13", "pairs-15"], ["dep", "pairs-15", "range-17"], ["appos", "pairs-15", "N-19"], ["advmod", "pairs-15", "-RSB--22"]], [[]]], " If there are no words in the input_array, return 0.0.\n": [[["mark", "are-3", "If-1"], ["expl", "are-3", "there-2"], ["advcl", "return-10", "are-3"], ["neg", "words-5", "no-4"], ["nsubj", "are-3", "words-5"], ["case", "input_array-8", "in-6"], ["det", "input_array-8", "the-7"], ["nmod:in", "words-5", "input_array-8"], ["root", "ROOT-0", "return-10"], ["dobj", "return-10", "0.0-11"]], [[]]], " In other words, if a fairy has H hit points, it takes you H seconds to defeat her.\n": [[["case", "words-3", "In-1"], ["amod", "words-3", "other-2"], ["nmod:in", "takes-14", "words-3"], ["mark", "has-8", "if-5"], ["det", "fairy-7", "a-6"], ["nsubj", "has-8", "fairy-7"], ["advcl", "takes-14", "has-8"], ["compound", "points-11", "H-9"], ["compound", "points-11", "hit-10"], ["dobj", "has-8", "points-11"], ["nsubj", "takes-14", "it-13"], ["root", "ROOT-0", "takes-14"], ["nsubj", "seconds-17", "you-15"], ["compound", "seconds-17", "H-16"], ["xcomp", "takes-14", "seconds-17"], ["mark", "defeat-19", "to-18"], ["acl", "seconds-17", "defeat-19"], ["dobj", "defeat-19", "her-20"]], [[]]], " Most modern input_array editors are able to give some statistics about the input_array they are editing.\n": [[["advmod", "editors-4", "Most-1"], ["amod", "editors-4", "modern-2"], ["compound", "editors-4", "input_array-3"], ["nsubj", "able-6", "editors-4"], ["nsubj", "give-8", "editors-4"], ["cop", "able-6", "are-5"], ["root", "ROOT-0", "able-6"], ["mark", "give-8", "to-7"], ["xcomp", "able-6", "give-8"], ["det", "statistics-10", "some-9"], ["iobj", "give-8", "statistics-10"], ["advmod", "input_array-13", "about-11"], ["det", "input_array-13", "the-12"], ["dobj", "give-8", "input_array-13"], ["nsubj", "editing-16", "they-14"], ["cop", "editing-16", "are-15"], ["acl:relcl", "input_array-13", "editing-16"]], [[]]], " For example, in the input_array \"This is div2 easy problem.\n": [[["case", "example-2", "For-1"], ["nmod:for", "problem-12", "example-2"], ["advmod", "input_array-6", "in-4"], ["det", "input_array-6", "the-5"], ["nsubj", "problem-12", "input_array-6"], ["dep", "input_array-6", "This-8"], ["cop", "problem-12", "is-9"], ["amod", "problem-12", "div2-10"], ["amod", "problem-12", "easy-11"], ["root", "ROOT-0", "problem-12"]], [[]]], "Return the number of different towers that John and Brus can build.": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dobj", "Return-1", "number-3"], ["amod", "towers-6", "different-5"], ["prep_of", "number-3", "towers-6"], ["mark", "build-12", "that-7"], ["nsubj", "build-12", "John-8"], ["conj_and", "John-8", "Brus-10"], ["nsubj", "build-12", "Brus-10"], ["aux", "build-12", "can-11"], ["ccomp", "Return-1", "build-12"]], [[]]], " For example, input_array =\"1147\" represents the integer 1147.\n": [[["case", "example-2", "For-1"], ["nmod:for", "represents-9", "example-2"], ["advmod", "=-5", "input_array-4"], ["amod", "1147-7", "=-5"], ["nsubj", "represents-9", "1147-7"], ["root", "ROOT-0", "represents-9"], ["det", "integer-11", "the-10"], ["dobj", "represents-9", "integer-11"], ["nummod", "integer-11", "1147-12"]], [[]]], " Currently, he has N blocks, labeled 0 through N-1.\n": [[["advmod", "labeled-8", "Currently-1"], ["nsubj", "labeled-8", "he-3"], ["aux", "labeled-8", "has-4"], ["compound", "blocks-6", "N-5"], ["dobj", "labeled-8", "blocks-6"], ["root", "ROOT-0", "labeled-8"], ["dobj", "labeled-8", "0-9"], ["case", "N-1-11", "through-10"], ["nmod:through", "labeled-8", "N-1-11"]], [[]]], " You are to return an int representing the 0-based index of the state where the lowest percentage of people are planning on voting for candidate 1.\n": [[["nsubj", "are-2", "You-1"], ["nsubj", "return-4", "You-1"], ["root", "ROOT-0", "are-2"], ["mark", "return-4", "to-3"], ["xcomp", "are-2", "return-4"], ["det", "int-6", "an-5"], ["dobj", "return-4", "int-6"], ["acl", "int-6", "representing-7"], ["det", "index-10", "the-8"], ["amod", "index-10", "0-based-9"], ["dobj", "representing-7", "index-10"], ["case", "state-13", "of-11"], ["det", "state-13", "the-12"], ["nmod:of", "index-10", "state-13"], ["advmod", "planning-21", "where-14"], ["det", "percentage-17", "the-15"], ["amod", "percentage-17", "lowest-16"], ["nsubj", "planning-21", "percentage-17"], ["case", "people-19", "of-18"], ["nmod:of", "percentage-17", "people-19"], ["aux", "planning-21", "are-20"], ["advcl", "representing-7", "planning-21"], ["mark", "voting-23", "on-22"], ["advcl", "planning-21", "voting-23"], ["case", "candidate-25", "for-24"], ["nmod:for", "voting-23", "candidate-25"], ["nummod", "candidate-25", "1-26"]], [[]]], "Return the input_int -th term (indexed from 0) in this sequence.": [[["root", "ROOT-0", "Return-1"], ["det", "input_int-3", "the-2"], ["dep", "Return-1", "input_int-3"], ["nn", "term-6", "th-5"], ["dep", "Return-1", "term-6"], ["dep", "term-6", "indexed-8"], ["prep_from", "indexed-8", "0-10"], ["det", "sequence-14", "this-13"], ["prep_in", "term-6", "sequence-14"]], [[]]], " Element 0 of input_array1 will be -1 to denote that employee 0 has no boss.\n": [[["nsubj", "-1-7", "Element-1"], ["nsubj", "denote-9", "Element-1"], ["nummod", "Element-1", "0-2"], ["case", "input_array1-4", "of-3"], ["nmod:of", "Element-1", "input_array1-4"], ["aux", "-1-7", "will-5"], ["cop", "-1-7", "be-6"], ["root", "ROOT-0", "-1-7"], ["mark", "denote-9", "to-8"], ["xcomp", "-1-7", "denote-9"], ["mark", "has-13", "that-10"], ["nsubj", "has-13", "employee-11"], ["nummod", "employee-11", "0-12"], ["ccomp", "denote-9", "has-13"], ["neg", "boss-15", "no-14"], ["dobj", "has-13", "boss-15"]], [[]]], " The result is \"abab\" and it is not a palindrome.\n": [[["det", "result-2", "The-1"], ["nsubj", "abab-5", "result-2"], ["cop", "abab-5", "is-3"], ["root", "ROOT-0", "abab-5"], ["cc", "abab-5", "and-7"], ["nsubj", "palindrome-12", "it-8"], ["cop", "palindrome-12", "is-9"], ["neg", "palindrome-12", "not-10"], ["det", "palindrome-12", "a-11"], ["conj:and", "abab-5", "palindrome-12"]], [[]]], "Turning back time in cellar i will lose him input_array1 [i] in input_array0.": [[["csubj", "lose-8", "Turning-1"], ["prt", "Turning-1", "back-2"], ["dobj", "Turning-1", "time-3"], ["nn", "i-6", "cellar-5"], ["prep_in", "time-3", "i-6"], ["aux", "lose-8", "will-7"], ["root", "ROOT-0", "lose-8"], ["nsubj", "-RSB--13", "him-9"], ["nn", "-RSB--13", "input_array1-10"], ["nn", "-RSB--13", "-LSB--11"], ["nn", "-RSB--13", "i-12"], ["xcomp", "lose-8", "-RSB--13"], ["prep_in", "-RSB--13", "input_array0-15"]], [[]]], " You are given three positive integers, input_int0 , input_int1 and input_int2 .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["iobj", "given-3", "three-4"], ["amod", "integers-6", "positive-5"], ["dobj", "given-3", "integers-6"], ["dobj", "given-3", "input_int0-8"], ["conj:and", "integers-6", "input_int0-8"], ["dobj", "given-3", "input_int1-10"], ["conj:and", "integers-6", "input_int1-10"], ["cc", "integers-6", "and-11"], ["dobj", "given-3", "input_int2-12"], ["conj:and", "integers-6", "input_int2-12"]], [[]]], " 2 =   1 + 0 + 1   :  'B' in element 0 position 1\n": [[["root", "ROOT-0", "2-1"], ["dep", "0-5", "=-2"], ["nummod", "0-5", "1-3"], ["amod", "0-5", "+-4"], ["acl:relcl", "2-1", "0-5"], ["compound", "1-7", "+-6"], ["dep", "2-1", "1-7"], ["dep", "1-7", "B-10"], ["case", "position-15", "in-12"], ["compound", "position-15", "element-13"], ["nummod", "position-15", "0-14"], ["nmod:in", "B-10", "position-15"], ["nummod", "position-15", "1-16"]], [[]]], " return min(possibility for possibility in possibilities if valid(possibility))\n": [[["compound", "min-2", "return-1"], ["root", "ROOT-0", "min-2"], ["dep", "min-2", "possibility-4"], ["case", "possibility-6", "for-5"], ["nmod:for", "possibility-4", "possibility-6"], ["case", "possibilities-8", "in-7"], ["nmod:in", "possibility-4", "possibilities-8"], ["dep", "valid-10", "if-9"], ["amod", "possibilities-8", "valid-10"], ["appos", "possibilities-8", "possibility-12"]], [[]]], " You are given two Strings input_array1 and input_array2 that have the same length and contain only types letters ('a'-'z').\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["iobj", "given-3", "two-4"], ["compound", "input_array1-6", "Strings-5"], ["dobj", "given-3", "input_array1-6"], ["nsubj", "have-10", "input_array1-6"], ["nsubj", "contain-15", "input_array1-6"], ["cc", "input_array1-6", "and-7"], ["dobj", "given-3", "input_array2-8"], ["conj:and", "input_array1-6", "input_array2-8"], ["nsubj", "have-10", "input_array2-8"], ["ref", "input_array1-6", "that-9"], ["acl:relcl", "input_array1-6", "have-10"], ["det", "length-13", "the-11"], ["amod", "length-13", "same-12"], ["dobj", "have-10", "length-13"], ["cc", "have-10", "and-14"], ["acl:relcl", "input_array1-6", "contain-15"], ["conj:and", "have-10", "contain-15"], ["amod", "letters-18", "only-16"], ["compound", "letters-18", "types-17"], ["nsubj", "z-25", "letters-18"], ["dep", "letters-18", "a-21"], ["xcomp", "contain-15", "z-25"]], [[]]], " Each of those balls has one of three possible colors: red, green, or blue.\n": [[["nsubj", "has-5", "Each-1"], ["case", "balls-4", "of-2"], ["det", "balls-4", "those-3"], ["nmod:of", "Each-1", "balls-4"], ["root", "ROOT-0", "has-5"], ["dobj", "has-5", "one-6"], ["case", "colors-10", "of-7"], ["nummod", "colors-10", "three-8"], ["amod", "colors-10", "possible-9"], ["nmod:of", "one-6", "colors-10"], ["amod", "one-6", "red-12"], ["amod", "one-6", "green-14"], ["conj:or", "red-12", "green-14"], ["cc", "red-12", "or-16"], ["amod", "one-6", "blue-17"], ["conj:or", "red-12", "blue-17"]], [[]]], "The j-th character of the i-th element of input_array is '1' (one) if player i defeated player j, '0' (zero) if player j defeated player i, or '-' if the match between players i and j resulted in a draw.": [[["det", "character-3", "The-1"], ["amod", "character-3", "j-th-2"], ["nsubj", "0-25", "character-3"], ["det", "element-7", "the-5"], ["amod", "element-7", "i-th-6"], ["prep_of", "character-3", "element-7"], ["prep_of", "element-7", "input_array-9"], ["cop", "0-25", "is-10"], ["poss", "0-25", "1-12"], ["amod", "0-25", "one-15"], ["mark", "defeated-20", "if-17"], ["nn", "i-19", "player-18"], ["nsubj", "defeated-20", "i-19"], ["ccomp", "one-15", "defeated-20"], ["nn", "j-22", "player-21"], ["dobj", "defeated-20", "j-22"], ["root", "ROOT-0", "0-25"], ["appos", "0-25", "zero-28"], ["mark", "defeated-33", "if-30"], ["nn", "j-32", "player-31"], ["nsubj", "defeated-33", "j-32"], ["dep", "0-25", "defeated-33"], ["nn", "i-35", "player-34"], ["dobj", "defeated-33", "i-35"], ["advmod", "0-25", "if-41"], ["conj_or", "0-25", "if-41"], ["det", "match-43", "the-42"], ["pobj", "if-41", "match-43"], ["nn", "i-46", "players-45"], ["prep_between", "if-41", "i-46"], ["prep_between", "if-41", "j-48"], ["conj_and", "i-46", "j-48"], ["dep", "0-25", "resulted-49"], ["det", "draw-52", "a-51"], ["prep_in", "resulted-49", "draw-52"]], [[]]], " You are given these input_array as a int[] height.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "input_array-5", "these-4"], ["dobj", "given-3", "input_array-5"], ["case", "height-11", "as-6"], ["det", "height-11", "a-7"], ["compound", "height-11", "int-8"], ["compound", "height-11", "-LSB--9"], ["compound", "height-11", "-RSB--10"], ["nmod:as", "given-3", "height-11"]], [[]]], " Thus she now has to check the input_array and determine whether there are five consecutive tokens somewhere on the input_array.\n": [[["advmod", "has-4", "Thus-1"], ["nsubj", "has-4", "she-2"], ["nsubj", "check-6", "she-2"], ["nsubj", "determine-10", "she-2"], ["advmod", "has-4", "now-3"], ["root", "ROOT-0", "has-4"], ["mark", "check-6", "to-5"], ["xcomp", "has-4", "check-6"], ["det", "input_array-8", "the-7"], ["dobj", "check-6", "input_array-8"], ["cc", "check-6", "and-9"], ["xcomp", "has-4", "determine-10"], ["conj:and", "check-6", "determine-10"], ["mark", "are-13", "whether-11"], ["expl", "are-13", "there-12"], ["ccomp", "determine-10", "are-13"], ["nummod", "tokens-16", "five-14"], ["amod", "tokens-16", "consecutive-15"], ["nmod:npmod", "somewhere-17", "tokens-16"], ["advmod", "are-13", "somewhere-17"], ["case", "input_array-20", "on-18"], ["det", "input_array-20", "the-19"], ["nmod:on", "are-13", "input_array-20"]], [[]]], " Christmas is just around the corner, and Alice just decorated her Christmas tree.\n": [[["nsubj", "corner-6", "Christmas-1"], ["cop", "corner-6", "is-2"], ["advmod", "corner-6", "just-3"], ["case", "corner-6", "around-4"], ["det", "corner-6", "the-5"], ["root", "ROOT-0", "corner-6"], ["cc", "corner-6", "and-8"], ["nsubj", "decorated-11", "Alice-9"], ["advmod", "decorated-11", "just-10"], ["conj:and", "corner-6", "decorated-11"], ["nmod:poss", "tree-14", "her-12"], ["compound", "tree-14", "Christmas-13"], ["dobj", "decorated-11", "tree-14"]], [[]]], "Words can be separated by spaces, digits, and punctuation marks.": [[["nsubjpass", "separated-4", "Words-1"], ["aux", "separated-4", "can-2"], ["auxpass", "separated-4", "be-3"], ["root", "ROOT-0", "separated-4"], ["nn", "digits-8", "spaces-6"], ["agent", "separated-4", "digits-8"], ["nn", "marks-12", "punctuation-11"], ["agent", "separated-4", "marks-12"], ["conj_and", "digits-8", "marks-12"]], [[]]], " Otherwise, return \"Not equal\".\n": [[["advmod", "return-3", "Otherwise-1"], ["root", "ROOT-0", "return-3"], ["neg", "equal-6", "Not-5"], ["xcomp", "return-3", "equal-6"]], [[]]], "Return the maximum possible length of the remaining chocolate bar that contains no repeated input_array.": [[["root", "ROOT-0", "Return-1"], ["det", "length-5", "the-2"], ["amod", "length-5", "maximum-3"], ["amod", "length-5", "possible-4"], ["dobj", "Return-1", "length-5"], ["nsubj", "contains-12", "length-5"], ["det", "bar-10", "the-7"], ["amod", "bar-10", "remaining-8"], ["nn", "bar-10", "chocolate-9"], ["prep_of", "length-5", "bar-10"], ["rcmod", "length-5", "contains-12"], ["neg", "input_array-15", "no-13"], ["amod", "input_array-15", "repeated-14"], ["dobj", "contains-12", "input_array-15"]], [[]]], " Return the number of possible positions for the wall.\n": [[["root", "ROOT-0", "Return-1"], ["det", "number-3", "the-2"], ["dep", "Return-1", "number-3"], ["case", "positions-6", "of-4"], ["amod", "positions-6", "possible-5"], ["nmod:of", "number-3", "positions-6"], ["case", "wall-9", "for-7"], ["det", "wall-9", "the-8"], ["nmod:for", "positions-6", "wall-9"]], [[]]], " Return the maximum possible length of the remaining chocolate bar that contains no repeated input_array.\n": [[["root", "ROOT-0", "Return-1"], ["det", "length-5", "the-2"], ["amod", "length-5", "maximum-3"], ["amod", "length-5", "possible-4"], ["dobj", "Return-1", "length-5"], ["nsubj", "contains-12", "length-5"], ["case", "bar-10", "of-6"], ["det", "bar-10", "the-7"], ["amod", "bar-10", "remaining-8"], ["compound", "bar-10", "chocolate-9"], ["nmod:of", "length-5", "bar-10"], ["ref", "length-5", "that-11"], ["acl:relcl", "length-5", "contains-12"], ["neg", "input_array-15", "no-13"], ["amod", "input_array-15", "repeated-14"], ["dobj", "contains-12", "input_array-15"]], [[]]], " Compute and return the smallest possible result after inserting the missing plus sign\n": [[["root", "ROOT-0", "Compute-1"], ["cc", "Compute-1", "and-2"], ["conj:and", "Compute-1", "return-3"], ["det", "result-7", "the-4"], ["amod", "result-7", "smallest-5"], ["amod", "result-7", "possible-6"], ["dobj", "return-3", "result-7"], ["mark", "inserting-9", "after-8"], ["advcl", "return-3", "inserting-9"], ["det", "sign-13", "the-10"], ["amod", "sign-13", "missing-11"], ["compound", "sign-13", "plus-12"], ["dobj", "inserting-9", "sign-13"]], [[]]], " A positive integer n is a perfect square if and only if there is a positive integer b >= 1 such that b*b = n. For example, 1 (=1*1), 16 (=4*4), and 169 (=13*13) are perfect squares, while 2, 54, and 48 are not.\n": [[["det", "n-4", "A-1"], ["amod", "n-4", "positive-2"], ["compound", "n-4", "integer-3"], ["nsubj", "square-8", "n-4"], ["cop", "square-8", "is-5"], ["det", "square-8", "a-6"], ["amod", "square-8", "perfect-7"], ["root", "ROOT-0", "square-8"], ["mark", ">-19", "if-9"], ["cc", ">-19", "and-10"], ["advmod", ">-19", "only-11"], ["mark", "is-14", "if-12"], ["expl", "is-14", "there-13"], ["advcl", ">-19", "is-14"], ["det", "integer-17", "a-15"], ["amod", "integer-17", "positive-16"], ["nsubj", "is-14", "integer-17"], ["nsubj", ">-19", "b-18"], ["advcl", "square-8", ">-19"], ["dep", "1-21", "=-20"], ["ccomp", ">-19", "1-21"], ["advcl", ">-19", "such-22"], ["mark", "n.-28", "that-23"], ["dep", "n.-28", "b-24"], ["dep", "b-26", "*-25"], ["dep", "n.-28", "b-26"], ["nsubj", "n.-28", "=-27"], ["ccomp", ">-19", "n.-28"], ["case", "example-30", "For-29"], ["nmod:for", "squares-58", "example-30"], ["nsubj", "squares-58", "1-32"], ["dep", "1-32", "=-34"], ["compound", "=-34", "1-35"], ["compound", "=-34", "*-36"], ["compound", "=-34", "1-37"], ["conj:and", "1-32", "16-40"], ["nsubj", "squares-58", "16-40"], ["dep", "16-40", "=-42"], ["compound", "=-42", "4-43"], ["compound", "=-42", "*-44"], ["compound", "=-42", "4-45"], ["cc", "1-32", "and-48"], ["conj:and", "1-32", "169-49"], ["nsubj", "squares-58", "169-49"], ["dep", "1-32", "=-51"], ["compound", "=-51", "13-52"], ["compound", "=-51", "*-53"], ["compound", "=-51", "13-54"], ["cop", "squares-58", "are-56"], ["amod", "squares-58", "perfect-57"], ["ccomp", "n.-28", "squares-58"], ["mark", "2-61", "while-60"], ["advcl", "squares-58", "2-61"], ["amod", "2-61", "54-63"], ["cc", "n.-28", "and-65"], ["nsubj", "are-67", "48-66"], ["ccomp", ">-19", "are-67"], ["conj:and", "n.-28", "are-67"], ["neg", "are-67", "not-68"]], [[]]], "Return a int[] with n elements: the numbers of all candidates, ordered according to their level in skill input_int from the best to the worst.": [[["root", "ROOT-0", "Return-1"], ["det", "-RSB--5", "a-2"], ["nn", "-RSB--5", "int-3"], ["nn", "-RSB--5", "-LSB--4"], ["dep", "Return-1", "-RSB--5"], ["nn", "elements-8", "n-7"], ["prep_with", "-RSB--5", "elements-8"], ["det", "numbers-11", "the-10"], ["dep", "Return-1", "numbers-11"], ["det", "candidates-14", "all-13"], ["prep_of", "numbers-11", "candidates-14"], ["vmod", "numbers-11", "ordered-16"], ["prepc_according_to", "ordered-16", "to-18"], ["poss", "level-20", "their-19"], ["pobj", "ordered-16", "level-20"], ["nn", "input_int-23", "skill-22"], ["prep_in", "level-20", "input_int-23"], ["det", "best-26", "the-25"], ["prep_from", "input_int-23", "best-26"], ["det", "worst-29", "the-28"], ["prep_to", "best-26", "worst-29"]], [[]]], " For example, 12321, 101, 9, and 0 are palindromic numbers but 2011, 509, and 40 are not.\n": [[["case", "example-2", "For-1"], ["nmod:for", "palindromic-13", "example-2"], ["nsubj", "palindromic-13", "12321-4"], ["appos", "12321-4", "101-6"], ["nummod", "101-6", "9-8"], ["cc", "101-6", "and-10"], ["appos", "12321-4", "0-11"], ["conj:and", "101-6", "0-11"], ["cop", "palindromic-13", "are-12"], ["root", "ROOT-0", "palindromic-13"], ["nsubj", "are-22", "numbers-14"], ["cc", "numbers-14", "but-15"], ["conj:but", "numbers-14", "2011-16"], ["nsubj", "are-22", "2011-16"], ["nummod", "2011-16", "509-18"], ["cc", "numbers-14", "and-20"], ["conj:but", "numbers-14", "40-21"], ["nsubj", "are-22", "40-21"], ["ccomp", "palindromic-13", "are-22"], ["neg", "are-22", "not-23"]], [[]]], " Ciel numbered the candidates 0 through n-1 and the skills 0 through m-1.\n": [[["nsubj", "numbered-2", "Ciel-1"], ["root", "ROOT-0", "numbered-2"], ["det", "0-5", "the-3"], ["compound", "0-5", "candidates-4"], ["dobj", "numbered-2", "0-5"], ["case", "n-1-7", "through-6"], ["nmod:through", "numbered-2", "n-1-7"], ["cc", "n-1-7", "and-8"], ["det", "skills-10", "the-9"], ["nmod:through", "numbered-2", "skills-10"], ["conj:and", "n-1-7", "skills-10"], ["nmod:through", "numbered-2", "0-11"], ["case", "0-11", "through-12"], ["dep", "0-11", "m-1-13"]], [[]]], "Two variants are considered different if string input_array1 is inserted in different places.": [[["num", "variants-2", "Two-1"], ["nsubjpass", "considered-4", "variants-2"], ["auxpass", "considered-4", "are-3"], ["root", "ROOT-0", "considered-4"], ["acomp", "considered-4", "different-5"], ["mark", "inserted-10", "if-6"], ["nn", "input_array1-8", "string-7"], ["nsubjpass", "inserted-10", "input_array1-8"], ["auxpass", "inserted-10", "is-9"], ["advcl", "considered-4", "inserted-10"], ["amod", "places-13", "different-12"], ["prep_in", "inserted-10", "places-13"]], [[]]], " F[0] = 0\n": [[["compound", "-LSB--2", "F-1"], ["root", "ROOT-0", "-LSB--2"], ["nummod", "-RSB--4", "0-3"], ["dep", "-LSB--2", "-RSB--4"], ["dep", "0-6", "=-5"], ["acl:relcl", "-RSB--4", "0-6"]], [[]]], "The height of a tower is the sum of all heights of bricks that form the tower.": [[["det", "height-2", "The-1"], ["nsubj", "sum-8", "height-2"], ["det", "tower-5", "a-4"], ["prep_of", "height-2", "tower-5"], ["cop", "sum-8", "is-6"], ["det", "sum-8", "the-7"], ["root", "ROOT-0", "sum-8"], ["det", "heights-11", "all-10"], ["prep_of", "sum-8", "heights-11"], ["prep_of", "heights-11", "bricks-13"], ["nsubj", "form-15", "bricks-13"], ["rcmod", "bricks-13", "form-15"], ["det", "tower-17", "the-16"], ["dobj", "form-15", "tower-17"]], [[]]], "Return \"Interesting\" if that integer is interesting, otherwise return \"Not interesting\".": [[["root", "ROOT-0", "Return-1"], ["dobj", "Return-1", "Interesting-3"], ["mark", "interesting-9", "if-5"], ["det", "integer-7", "that-6"], ["nsubj", "interesting-9", "integer-7"], ["cop", "interesting-9", "is-8"], ["advcl", "Return-1", "interesting-9"], ["advmod", "return-12", "otherwise-11"], ["dep", "Return-1", "return-12"], ["neg", "interesting-15", "Not-14"], ["dobj", "return-12", "interesting-15"]], [[]]], "The distance between two letters is defined as the absolute value of their difference.": [[["det", "distance-2", "The-1"], ["nsubjpass", "defined-7", "distance-2"], ["num", "letters-5", "two-4"], ["prep_between", "distance-2", "letters-5"], ["auxpass", "defined-7", "is-6"], ["root", "ROOT-0", "defined-7"], ["det", "value-11", "the-9"], ["amod", "value-11", "absolute-10"], ["prep_as", "defined-7", "value-11"], ["poss", "difference-14", "their-13"], ["prep_of", "value-11", "difference-14"]], [[]]], " Return the smallest difference that can be achieved.\n": [[["root", "ROOT-0", "Return-1"], ["det", "difference-4", "the-2"], ["amod", "difference-4", "smallest-3"], ["dobj", "Return-1", "difference-4"], ["nsubjpass", "achieved-8", "difference-4"], ["ref", "difference-4", "that-5"], ["aux", "achieved-8", "can-6"], ["auxpass", "achieved-8", "be-7"], ["acl:relcl", "difference-4", "achieved-8"]], [[]]], " Given a String input_array , return the average word length in it.\n": [[["case", "input_array-4", "Given-1"], ["det", "input_array-4", "a-2"], ["compound", "input_array-4", "String-3"], ["nmod:given", "return-6", "input_array-4"], ["root", "ROOT-0", "return-6"], ["det", "length-10", "the-7"], ["amod", "length-10", "average-8"], ["compound", "length-10", "word-9"], ["dobj", "return-6", "length-10"], ["case", "it-12", "in-11"], ["nmod:in", "return-6", "it-12"]], [[]]], " The deer have lost exactly input_int2 antlers in total.\n": [[["det", "deer-2", "The-1"], ["nsubj", "lost-4", "deer-2"], ["aux", "lost-4", "have-3"], ["root", "ROOT-0", "lost-4"], ["advmod", "antlers-7", "exactly-5"], ["amod", "antlers-7", "input_int2-6"], ["dobj", "lost-4", "antlers-7"], ["case", "total-9", "in-8"], ["nmod:in", "antlers-7", "total-9"]], [[]]], " Each fairy has two characteristics: her damage per second (input_array1) and her amount of hit points.\n": [[["det", "fairy-2", "Each-1"], ["nsubj", "has-3", "fairy-2"], ["root", "ROOT-0", "has-3"], ["nummod", "characteristics-5", "two-4"], ["dobj", "has-3", "characteristics-5"], ["nmod:poss", "damage-8", "her-7"], ["dep", "characteristics-5", "damage-8"], ["case", "input_array1-12", "per-9"], ["amod", "input_array1-12", "second-10"], ["nmod:per", "damage-8", "input_array1-12"], ["cc", "input_array1-12", "and-14"], ["nmod:poss", "amount-16", "her-15"], ["nmod:per", "damage-8", "amount-16"], ["conj:and", "input_array1-12", "amount-16"], ["case", "points-19", "of-17"], ["compound", "points-19", "hit-18"], ["nmod:of", "amount-16", "points-19"]], [[]]], " The stars are numbered 1 through N.\n": [[["det", "stars-2", "The-1"], ["nsubjpass", "numbered-4", "stars-2"], ["auxpass", "numbered-4", "are-3"], ["root", "ROOT-0", "numbered-4"], ["dobj", "numbered-4", "1-5"], ["case", "N.-7", "through-6"], ["nmod:through", "numbered-4", "N.-7"]], [[]]], " You are given the colors of stars as a int[] input_array0 with N elements.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "colors-5", "the-4"], ["iobj", "given-3", "colors-5"], ["case", "stars-7", "of-6"], ["nmod:of", "colors-5", "stars-7"], ["case", "int-10", "as-8"], ["det", "int-10", "a-9"], ["nmod:as", "stars-7", "int-10"], ["amod", "input_array0-13", "-LSB--11"], ["amod", "input_array0-13", "-RSB--12"], ["dobj", "given-3", "input_array0-13"], ["case", "elements-16", "with-14"], ["compound", "elements-16", "N-15"], ["nmod:with", "input_array0-13", "elements-16"]], [[]]], " Determine whether there are 5 consecutive cells (horizontally, vertically, or diagonally) that contain Jiro's tokens.\n": [[["root", "ROOT-0", "Determine-1"], ["mark", "are-4", "whether-2"], ["expl", "are-4", "there-3"], ["ccomp", "Determine-1", "are-4"], ["nummod", "cells-7", "5-5"], ["amod", "cells-7", "consecutive-6"], ["nsubj", "are-4", "cells-7"], ["nsubj", "contain-17", "cells-7"], ["dep", "cells-7", "horizontally-9"], ["dep", "cells-7", "vertically-11"], ["conj:or", "horizontally-9", "vertically-11"], ["cc", "horizontally-9", "or-13"], ["dep", "cells-7", "diagonally-14"], ["conj:or", "horizontally-9", "diagonally-14"], ["ref", "cells-7", "that-16"], ["acl:relcl", "cells-7", "contain-17"], ["nmod:poss", "tokens-20", "Jiro-18"], ["case", "Jiro-18", "'s-19"], ["dobj", "contain-17", "tokens-20"]], [[]]], " Yesterday, Gogo distributed all his balls into the bins, placing S[0] balls into bin 0, S[1] balls into bin 1, and so on.\n": [[["nmod:tmod", "distributed-4", "Yesterday-1"], ["nsubj", "distributed-4", "Gogo-3"], ["ccomp", "-LSB--23", "distributed-4"], ["det:predet", "balls-7", "all-5"], ["nmod:poss", "balls-7", "his-6"], ["dobj", "distributed-4", "balls-7"], ["case", "bins-10", "into-8"], ["det", "bins-10", "the-9"], ["nmod:into", "distributed-4", "bins-10"], ["advcl", "distributed-4", "placing-12"], ["compound", "balls-17", "S-13"], ["compound", "balls-17", "-LSB--14"], ["nummod", "balls-17", "0-15"], ["amod", "balls-17", "-RSB--16"], ["dobj", "placing-12", "balls-17"], ["case", "bin-19", "into-18"], ["nmod:into", "placing-12", "bin-19"], ["nummod", "bin-19", "0-20"], ["nsubj", "-LSB--23", "S-22"], ["root", "ROOT-0", "-LSB--23"], ["compound", "-RSB--25", "1-24"], ["nummod", "balls-26", "-RSB--25"], ["dobj", "-LSB--23", "balls-26"], ["case", "bin-28", "into-27"], ["nmod:into", "-LSB--23", "bin-28"], ["nummod", "bin-28", "1-29"], ["cc", "so-32", "and-31"], ["advmod", "-LSB--23", "so-32"], ["case", "so-32", "on-33"]], [[]]], "F[0] = 0": [[["nn", "-LSB--2", "F-1"], ["root", "ROOT-0", "-LSB--2"], ["num", "-RSB--4", "0-3"], ["dep", "-LSB--2", "-RSB--4"], ["dep", "0-6", "=-5"], ["rcmod", "-RSB--4", "0-6"]], [[]]], " Ash is a marble collector and he likes to create various ornaments using his marbles.\n": [[["nsubj", "collector-5", "Ash-1"], ["cop", "collector-5", "is-2"], ["det", "collector-5", "a-3"], ["compound", "collector-5", "marble-4"], ["root", "ROOT-0", "collector-5"], ["cc", "collector-5", "and-6"], ["nsubj", "likes-8", "he-7"], ["nsubj", "create-10", "he-7"], ["conj:and", "collector-5", "likes-8"], ["mark", "create-10", "to-9"], ["xcomp", "likes-8", "create-10"], ["amod", "ornaments-12", "various-11"], ["dobj", "create-10", "ornaments-12"], ["xcomp", "create-10", "using-13"], ["nmod:poss", "marbles-15", "his-14"], ["dobj", "using-13", "marbles-15"]], [[]]], "Given Strings input_array0 and input_array1, return the String \"Yep, it'input_array0 wood.\" (quotes for clarity) if the pair (input_array0, input_array1) is wood and \"Nope.\" otherwise.": [[["prep", "input_array0-15", "Given-1"], ["pobj", "Given-1", "Strings-2"], ["num", "Strings-2", "input_array0-3"], ["pobj", "Given-1", "input_array1-5"], ["conj_and", "Strings-2", "input_array1-5"], ["parataxis", "input_array0-15", "return-7"], ["det", "String-9", "the-8"], ["dep", "Yep-11", "String-9"], ["dep", "return-7", "Yep-11"], ["nsubj", "input_array0-15", "it-13"], ["root", "ROOT-0", "input_array0-15"], ["dobj", "input_array0-15", "wood-16"]], [["csubj", "Nope-18", "quotes-2"], ["prt", "quotes-2", "for-3"], ["dobj", "quotes-2", "clarity-4"], ["advmod", "quotes-2", "if-6"], ["det", "pair-8", "the-7"], ["pobj", "if-6", "pair-8"], ["dep", "pair-8", "input_array0-10"], ["appos", "input_array0-10", "input_array1-12"], ["cop", "Nope-18", "is-14"], ["dep", "Nope-18", "wood-15"], ["cc", "Nope-18", "and-16"], ["root", "ROOT-0", "Nope-18"]], [["root", "ROOT-0", "otherwise-1"]], [[]]], " First, we discard some (or none) of the baskets completely.\n": [[["advmod", "discard-4", "First-1"], ["nsubj", "discard-4", "we-3"], ["root", "ROOT-0", "discard-4"], ["dobj", "discard-4", "some-5"], ["cc", "none-8", "or-7"], ["dep", "some-5", "none-8"], ["case", "baskets-12", "of-10"], ["det", "baskets-12", "the-11"], ["nmod:of", "some-5", "baskets-12"], ["advmod", "baskets-12", "completely-13"]], [[]]], " You know how many liters of input_int your car uses per hour for certain speeds and you'd like to know how far a certain amount of input_int will take you when travelling at the optimal speed.\n": [[["nsubj", "know-2", "You-1"], ["root", "ROOT-0", "know-2"], ["advmod", "many-4", "how-3"], ["amod", "liters-5", "many-4"], ["dobj", "uses-10", "liters-5"], ["case", "input_int-7", "of-6"], ["nmod:of", "liters-5", "input_int-7"], ["nmod:poss", "car-9", "your-8"], ["nsubj", "uses-10", "car-9"], ["ccomp", "know-2", "uses-10"], ["case", "hour-12", "per-11"], ["nmod:per", "uses-10", "hour-12"], ["case", "speeds-15", "for-13"], ["amod", "speeds-15", "certain-14"], ["nmod:for", "hour-12", "speeds-15"], ["cc", "know-2", "and-16"], ["nsubj", "like-19", "you-17"], ["nsubj", "know-21", "you-17"], ["aux", "like-19", "'d-18"], ["conj:and", "know-2", "like-19"], ["mark", "know-21", "to-20"], ["xcomp", "like-19", "know-21"], ["advmod", "far-23", "how-22"], ["advmod", "take-30", "far-23"], ["det", "amount-26", "a-24"], ["amod", "amount-26", "certain-25"], ["nsubj", "take-30", "amount-26"], ["case", "input_int-28", "of-27"], ["nmod:of", "amount-26", "input_int-28"], ["aux", "take-30", "will-29"], ["ccomp", "know-21", "take-30"], ["dobj", "take-30", "you-31"], ["advmod", "travelling-33", "when-32"], ["advcl", "take-30", "travelling-33"], ["case", "speed-37", "at-34"], ["det", "speed-37", "the-35"], ["amod", "speed-37", "optimal-36"], ["nmod:at", "travelling-33", "speed-37"]], [[]]], " You see that he already rearranged the balls.\n": [[["nsubj", "see-2", "You-1"], ["root", "ROOT-0", "see-2"], ["mark", "rearranged-6", "that-3"], ["nsubj", "rearranged-6", "he-4"], ["advmod", "rearranged-6", "already-5"], ["ccomp", "see-2", "rearranged-6"], ["det", "balls-8", "the-7"], ["dobj", "rearranged-6", "balls-8"]], [[]]], " Given the string, compute and return the value of the string.\n": [[["case", "string-3", "Given-1"], ["det", "string-3", "the-2"], ["nmod:given", "compute-5", "string-3"], ["root", "ROOT-0", "compute-5"], ["cc", "compute-5", "and-6"], ["conj:and", "compute-5", "return-7"], ["det", "value-9", "the-8"], ["dobj", "return-7", "value-9"], ["case", "string-12", "of-10"], ["det", "string-12", "the-11"], ["nmod:of", "value-9", "string-12"]], [[]]], " Return the maximum input_array0 that Gogo can gain by advancing time in one cellar and turning time back in another cellar.\n": [[["root", "ROOT-0", "Return-1"], ["det", "input_array0-4", "the-2"], ["amod", "input_array0-4", "maximum-3"], ["dobj", "Return-1", "input_array0-4"], ["mark", "gain-8", "that-5"], ["nsubj", "gain-8", "Gogo-6"], ["aux", "gain-8", "can-7"], ["ccomp", "Return-1", "gain-8"], ["mark", "advancing-10", "by-9"], ["advcl", "gain-8", "advancing-10"], ["dobj", "advancing-10", "time-11"], ["case", "cellar-14", "in-12"], ["nummod", "cellar-14", "one-13"], ["nmod:in", "time-11", "cellar-14"], ["cc", "advancing-10", "and-15"], ["advcl", "gain-8", "turning-16"], ["conj:and", "advancing-10", "turning-16"], ["dobj", "turning-16", "time-17"], ["advmod", "turning-16", "back-18"], ["case", "cellar-21", "in-19"], ["det", "cellar-21", "another-20"], ["nmod:in", "turning-16", "cellar-21"]], [[]]], " Find and return the String that represents the smallest possible integer that can be obtained.\n": [[["root", "ROOT-0", "Find-1"], ["cc", "Find-1", "and-2"], ["conj:and", "Find-1", "return-3"], ["det", "String-5", "the-4"], ["dobj", "return-3", "String-5"], ["nsubj", "represents-7", "String-5"], ["ref", "String-5", "that-6"], ["acl:relcl", "String-5", "represents-7"], ["det", "integer-11", "the-8"], ["amod", "integer-11", "smallest-9"], ["amod", "integer-11", "possible-10"], ["dobj", "represents-7", "integer-11"], ["nsubjpass", "obtained-15", "integer-11"], ["ref", "integer-11", "that-12"], ["aux", "obtained-15", "can-13"], ["auxpass", "obtained-15", "be-14"], ["acl:relcl", "integer-11", "obtained-15"]], [[]]], " You agreed to help her and even tell how many different variants of such insertions exist.\n": [[["nsubj", "agreed-2", "You-1"], ["nsubj", "help-4", "You-1"], ["nsubj", "tell-8", "You-1"], ["root", "ROOT-0", "agreed-2"], ["mark", "help-4", "to-3"], ["xcomp", "agreed-2", "help-4"], ["dobj", "help-4", "her-5"], ["cc", "help-4", "and-6"], ["advmod", "tell-8", "even-7"], ["xcomp", "agreed-2", "tell-8"], ["conj:and", "help-4", "tell-8"], ["advmod", "many-10", "how-9"], ["dep", "exist-16", "many-10"], ["amod", "variants-12", "different-11"], ["nsubj", "exist-16", "variants-12"], ["case", "insertions-15", "of-13"], ["amod", "insertions-15", "such-14"], ["nmod:of", "variants-12", "insertions-15"], ["ccomp", "tell-8", "exist-16"]], [[]]], " A brick can be placed either on the ground, or on a brick of a different color.\n": [[["det", "brick-2", "A-1"], ["nsubjpass", "placed-5", "brick-2"], ["nsubjpass", "placed-5", "brick-2"], ["aux", "placed-5", "can-3"], ["auxpass", "placed-5", "be-4"], ["root", "ROOT-0", "placed-5"], ["conj:or", "placed-5", "placed-5"], ["advmod", "placed-5", "either-6"], ["case", "ground-9", "on-7"], ["det", "ground-9", "the-8"], ["nmod:on", "placed-5", "ground-9"], ["cc", "placed-5", "or-11"], ["case", "brick-14", "on-12"], ["det", "brick-14", "a-13"], ["nmod:on", "placed-5", "brick-14"], ["case", "color-18", "of-15"], ["det", "color-18", "a-16"], ["amod", "color-18", "different-17"], ["nmod:of", "brick-14", "color-18"]], [[]]], "At any moment, you may choose a nonempty contiguous subsequence of input_array .": [[["det", "moment-3", "any-2"], ["prep_at", "choose-7", "moment-3"], ["nsubj", "choose-7", "you-5"], ["aux", "choose-7", "may-6"], ["root", "ROOT-0", "choose-7"], ["det", "subsequence-11", "a-8"], ["advmod", "contiguous-10", "nonempty-9"], ["amod", "subsequence-11", "contiguous-10"], ["dobj", "choose-7", "subsequence-11"], ["prep_of", "subsequence-11", "input_array-13"]], [[]]], "Given a int[] input_array, for each non-empty subset of input_array, compute the average of its elements, then return the average of those averages.": [[["prep", "compute-15", "Given-1"], ["det", "input_array-6", "a-2"], ["amod", "input_array-6", "int-3"], ["nn", "input_array-6", "-LSB--4"], ["nn", "input_array-6", "-RSB--5"], ["pobj", "Given-1", "input_array-6"], ["det", "subset-11", "each-9"], ["amod", "subset-11", "non-empty-10"], ["prep_for", "input_array-6", "subset-11"], ["prep_of", "subset-11", "input_array-13"], ["root", "ROOT-0", "compute-15"], ["det", "average-17", "the-16"], ["dobj", "compute-15", "average-17"], ["poss", "elements-20", "its-19"], ["prep_of", "average-17", "elements-20"], ["advmod", "return-23", "then-22"], ["dep", "compute-15", "return-23"], ["det", "average-25", "the-24"], ["dobj", "return-23", "average-25"], ["det", "averages-28", "those-27"], ["prep_of", "average-25", "averages-28"]], [[]]], "You enjoy working with numbers that contain only square digits (namely, 0, 1, 4 and 9).": [[["nsubj", "enjoy-2", "You-1"], ["root", "ROOT-0", "enjoy-2"], ["xcomp", "enjoy-2", "working-3"], ["prep_with", "working-3", "numbers-5"], ["nsubj", "contain-7", "numbers-5"], ["rcmod", "numbers-5", "contain-7"], ["advmod", "digits-10", "only-8"], ["amod", "digits-10", "square-9"], ["dobj", "contain-7", "digits-10"], ["dep", "0-14", "namely-12"], ["dep", "numbers-5", "0-14"], ["amod", "0-14", "1-16"], ["dep", "0-14", "4-18"], ["dep", "0-14", "9-20"], ["conj_and", "4-18", "9-20"]], [[]]], " After coloring the top side Arthur is wondering how many different options there are now for the color of the bottom side of the frisbee.\n": [[["mark", "coloring-2", "After-1"], ["advcl", "wondering-8", "coloring-2"], ["det", "side-5", "the-3"], ["amod", "side-5", "top-4"], ["dobj", "coloring-2", "side-5"], ["nsubj", "wondering-8", "Arthur-6"], ["aux", "wondering-8", "is-7"], ["root", "ROOT-0", "wondering-8"], ["advmod", "many-10", "how-9"], ["amod", "options-12", "many-10"], ["amod", "options-12", "different-11"], ["dobj", "are-14", "options-12"], ["expl", "are-14", "there-13"], ["ccomp", "wondering-8", "are-14"], ["advmod", "are-14", "now-15"], ["case", "color-18", "for-16"], ["det", "color-18", "the-17"], ["nmod:for", "are-14", "color-18"], ["case", "side-22", "of-19"], ["det", "side-22", "the-20"], ["amod", "side-22", "bottom-21"], ["nmod:of", "color-18", "side-22"], ["case", "frisbee-25", "of-23"], ["det", "frisbee-25", "the-24"], ["nmod:of", "side-22", "frisbee-25"]], [[]]], " The smallest of those three results is 101.\n": [[["det", "smallest-2", "The-1"], ["nsubj", "101-8", "smallest-2"], ["case", "results-6", "of-3"], ["det", "results-6", "those-4"], ["nummod", "results-6", "three-5"], ["nmod:of", "smallest-2", "results-6"], ["cop", "101-8", "is-7"], ["root", "ROOT-0", "101-8"]], [[]]], " He knows that the '+' sign is missing but he does not know where it belongs.\n": [[["nsubj", "knows-2", "He-1"], ["root", "ROOT-0", "knows-2"], ["mark", "missing-10", "that-3"], ["nmod:poss", "sign-8", "the-4"], ["case", "the-4", "'-5"], ["amod", "sign-8", "+-6"], ["nsubj", "missing-10", "sign-8"], ["cop", "missing-10", "is-9"], ["ccomp", "knows-2", "missing-10"], ["cc", "knows-2", "but-11"], ["nsubj", "know-15", "he-12"], ["aux", "know-15", "does-13"], ["neg", "know-15", "not-14"], ["conj:but", "knows-2", "know-15"], ["advmod", "belongs-18", "where-16"], ["nsubj", "belongs-18", "it-17"], ["ccomp", "know-15", "belongs-18"]], [[]]], " Fred remembers that the correct password can be obtained from S by erasing exactly one character.\n": [[["nsubj", "remembers-2", "Fred-1"], ["root", "ROOT-0", "remembers-2"], ["mark", "obtained-9", "that-3"], ["det", "password-6", "the-4"], ["amod", "password-6", "correct-5"], ["nsubjpass", "obtained-9", "password-6"], ["aux", "obtained-9", "can-7"], ["auxpass", "obtained-9", "be-8"], ["ccomp", "remembers-2", "obtained-9"], ["case", "S-11", "from-10"], ["nmod:from", "obtained-9", "S-11"], ["mark", "erasing-13", "by-12"], ["advcl", "obtained-9", "erasing-13"], ["advmod", "character-16", "exactly-14"], ["nummod", "character-16", "one-15"], ["dobj", "erasing-13", "character-16"]], [[]]], " For each i, input_array1[i] is the damage per second of fairy i, and input_array2[i] is her initial amount of hit points.\n": [[["case", "i-3", "For-1"], ["det", "i-3", "each-2"], ["nmod:for", "damage-11", "i-3"], ["amod", "-RSB--8", "input_array1-5"], ["compound", "-RSB--8", "-LSB--6"], ["compound", "-RSB--8", "i-7"], ["nsubj", "damage-11", "-RSB--8"], ["cop", "damage-11", "is-9"], ["det", "damage-11", "the-10"], ["root", "ROOT-0", "damage-11"], ["case", "second-13", "per-12"], ["nmod:per", "damage-11", "second-13"], ["case", "i-16", "of-14"], ["compound", "i-16", "fairy-15"], ["nmod:of", "second-13", "i-16"], ["cc", "damage-11", "and-18"], ["amod", "-RSB--22", "input_array2-19"], ["compound", "-RSB--22", "-LSB--20"], ["compound", "-RSB--22", "i-21"], ["nsubj", "amount-26", "-RSB--22"], ["cop", "amount-26", "is-23"], ["nmod:poss", "amount-26", "her-24"], ["amod", "amount-26", "initial-25"], ["conj:and", "damage-11", "amount-26"], ["case", "points-29", "of-27"], ["compound", "points-29", "hit-28"], ["nmod:of", "amount-26", "points-29"]], [[]]], " The number of blue bricks they have is input_int2 and each of them has a height of input_int3 .\n": [[["det", "number-2", "The-1"], ["nsubj", "has-14", "number-2"], ["case", "bricks-5", "of-3"], ["amod", "bricks-5", "blue-4"], ["nmod:of", "number-2", "bricks-5"], ["nsubj", "input_int2-9", "they-6"], ["aux", "input_int2-9", "have-7"], ["cop", "input_int2-9", "is-8"], ["acl:relcl", "bricks-5", "input_int2-9"], ["cc", "bricks-5", "and-10"], ["nmod:of", "number-2", "each-11"], ["conj:and", "bricks-5", "each-11"], ["case", "them-13", "of-12"], ["nmod:of", "each-11", "them-13"], ["root", "ROOT-0", "has-14"], ["det", "height-16", "a-15"], ["dobj", "has-14", "height-16"], ["case", "input_int3-18", "of-17"], ["nmod:of", "height-16", "input_int3-18"]], [[]]], " Return the minimal number of egg cartons he must buy.\n": [[["case", "number-4", "Return-1"], ["det", "number-4", "the-2"], ["amod", "number-4", "minimal-3"], ["nmod:return", "buy-10", "number-4"], ["case", "cartons-7", "of-5"], ["compound", "cartons-7", "egg-6"], ["nmod:of", "number-4", "cartons-7"], ["nsubj", "buy-10", "he-8"], ["aux", "buy-10", "must-9"], ["root", "ROOT-0", "buy-10"]], [[]]], " For each i, there is a ribbon that connects the stars with numbers input_array1[i] and input_array2[i].\n": [[["case", "i-3", "For-1"], ["det", "i-3", "each-2"], ["nmod:for", "is-6", "i-3"], ["expl", "is-6", "there-5"], ["root", "ROOT-0", "is-6"], ["det", "ribbon-8", "a-7"], ["nsubj", "is-6", "ribbon-8"], ["nsubj", "connects-10", "ribbon-8"], ["ref", "ribbon-8", "that-9"], ["acl:relcl", "ribbon-8", "connects-10"], ["det", "stars-12", "the-11"], ["dobj", "connects-10", "stars-12"], ["case", "-RSB--18", "with-13"], ["compound", "-RSB--18", "numbers-14"], ["compound", "-RSB--18", "input_array1-15"], ["compound", "-RSB--18", "-LSB--16"], ["compound", "-RSB--18", "i-17"], ["nmod:with", "connects-10", "-RSB--18"], ["cc", "-RSB--18", "and-19"], ["compound", "-RSB--23", "input_array2-20"], ["compound", "-RSB--23", "-LSB--21"], ["compound", "-RSB--23", "i-22"], ["nmod:with", "connects-10", "-RSB--23"], ["conj:and", "-RSB--18", "-RSB--23"]], [[]]], "Return the minimal number of egg cartons he must buy.": [[["det", "number-4", "the-2"], ["amod", "number-4", "minimal-3"], ["prep_return", "buy-10", "number-4"], ["nn", "cartons-7", "egg-6"], ["prep_of", "number-4", "cartons-7"], ["nsubj", "buy-10", "he-8"], ["aux", "buy-10", "must-9"], ["root", "ROOT-0", "buy-10"]], [[]]], " Like all other software engineers, Gogo likes to play with bins and balls.\n": [[["case", "engineers-5", "Like-1"], ["det", "engineers-5", "all-2"], ["amod", "engineers-5", "other-3"], ["compound", "engineers-5", "software-4"], ["nmod:like", "likes-8", "engineers-5"], ["nsubj", "likes-8", "Gogo-7"], ["nsubj", "play-10", "Gogo-7"], ["root", "ROOT-0", "likes-8"], ["mark", "play-10", "to-9"], ["xcomp", "likes-8", "play-10"], ["case", "bins-12", "with-11"], ["nmod:with", "play-10", "bins-12"], ["cc", "bins-12", "and-13"], ["nmod:with", "play-10", "balls-14"], ["conj:and", "bins-12", "balls-14"]], [[]]], "For each i, there is a ribbon that connects the stars with numbers input_array1[i] and input_array2[i].": [[["det", "i-3", "each-2"], ["prep_for", "is-6", "i-3"], ["expl", "is-6", "there-5"], ["root", "ROOT-0", "is-6"], ["det", "ribbon-8", "a-7"], ["nsubj", "is-6", "ribbon-8"], ["nsubj", "connects-10", "ribbon-8"], ["rcmod", "ribbon-8", "connects-10"], ["det", "stars-12", "the-11"], ["dobj", "connects-10", "stars-12"], ["nn", "-RSB--18", "numbers-14"], ["nn", "-RSB--18", "input_array1-15"], ["nn", "-RSB--18", "-LSB--16"], ["nn", "-RSB--18", "i-17"], ["prep_with", "connects-10", "-RSB--18"], ["nn", "-RSB--23", "input_array2-20"], ["nn", "-RSB--23", "-LSB--21"], ["nn", "-RSB--23", "i-22"], ["prep_with", "connects-10", "-RSB--23"], ["conj_and", "-RSB--18", "-RSB--23"]], [[]]], " The i-th character of input_array denotes the letter carved on the i-th square (both indices are 0-based).\n": [[["det", "character-3", "The-1"], ["amod", "character-3", "i-th-2"], ["nsubj", "denotes-6", "character-3"], ["case", "input_array-5", "of-4"], ["nmod:of", "character-3", "input_array-5"], ["root", "ROOT-0", "denotes-6"], ["det", "letter-8", "the-7"], ["dobj", "denotes-6", "letter-8"], ["acl", "letter-8", "carved-9"], ["case", "square-13", "on-10"], ["det", "square-13", "the-11"], ["amod", "square-13", "i-th-12"], ["nmod:on", "carved-9", "square-13"], ["det", "indices-16", "both-15"], ["nsubj", "0-based-18", "indices-16"], ["cop", "0-based-18", "are-17"], ["parataxis", "denotes-6", "0-based-18"]], [[]]], " You just bought a very delicious chocolate bar from a local store.\n": [[["nsubj", "bought-3", "You-1"], ["advmod", "bought-3", "just-2"], ["root", "ROOT-0", "bought-3"], ["det", "bar-8", "a-4"], ["advmod", "delicious-6", "very-5"], ["amod", "bar-8", "delicious-6"], ["compound", "bar-8", "chocolate-7"], ["dobj", "bought-3", "bar-8"], ["case", "store-12", "from-9"], ["det", "store-12", "a-10"], ["amod", "store-12", "local-11"], ["nmod:from", "bought-3", "store-12"]], [[]]], " (The two swapped elements may have the same value.)\n": [[["det", "elements-5", "The-2"], ["nummod", "elements-5", "two-3"], ["amod", "elements-5", "swapped-4"], ["nsubj", "have-7", "elements-5"], ["aux", "have-7", "may-6"], ["root", "ROOT-0", "have-7"], ["det", "value-10", "the-8"], ["amod", "value-10", "same-9"], ["dobj", "have-7", "value-10"]], [[]]], " Formally, for any y different from x, employee y belongs into the department of employee x if and only if input_array1[y]=x.\n": [[["advmod", "belongs-12", "Formally-1"], ["case", "y-5", "for-3"], ["det", "y-5", "any-4"], ["nmod:for", "belongs-12", "y-5"], ["amod", "y-5", "different-6"], ["case", "x-8", "from-7"], ["nmod:from", "different-6", "x-8"], ["compound", "y-11", "employee-10"], ["nsubj", "belongs-12", "y-11"], ["root", "ROOT-0", "belongs-12"], ["case", "department-15", "into-13"], ["det", "department-15", "the-14"], ["nmod:into", "belongs-12", "department-15"], ["case", "employee-17", "of-16"], ["nmod:of", "department-15", "employee-17"], ["dep", "y-25", "x-18"], ["mark", "y-25", "if-19"], ["cc", "only-21", "and-20"], ["nsubj", "y-25", "only-21"], ["case", "-LSB--24", "if-22"], ["amod", "-LSB--24", "input_array1-23"], ["nmod:if", "only-21", "-LSB--24"], ["advcl", "belongs-12", "y-25"], ["nsubj", "x.-28", "-RSB--26"], ["dep", "x.-28", "=-27"], ["ccomp", "y-25", "x.-28"]], [[]]], " For each i, the i-th element of input_array represents the number of mandarins in the i-th bag.\n": [[["case", "i-3", "For-1"], ["det", "i-3", "each-2"], ["nmod:for", "represents-10", "i-3"], ["det", "element-7", "the-5"], ["amod", "element-7", "i-th-6"], ["nsubj", "represents-10", "element-7"], ["case", "input_array-9", "of-8"], ["nmod:of", "element-7", "input_array-9"], ["root", "ROOT-0", "represents-10"], ["det", "number-12", "the-11"], ["dobj", "represents-10", "number-12"], ["case", "mandarins-14", "of-13"], ["nmod:of", "number-12", "mandarins-14"], ["case", "bag-18", "in-15"], ["det", "bag-18", "the-16"], ["amod", "bag-18", "i-th-17"], ["nmod:in", "mandarins-14", "bag-18"]], [[]]], " More precisely, for each i, the height of block i is input_array[i].\n": [[["advmod", "precisely-2", "More-1"], ["advmod", "-RSB--17", "precisely-2"], ["case", "i-6", "for-4"], ["det", "i-6", "each-5"], ["nmod:for", "-RSB--17", "i-6"], ["det", "height-9", "the-8"], ["nsubj", "-RSB--17", "height-9"], ["case", "i-12", "of-10"], ["compound", "i-12", "block-11"], ["nmod:of", "height-9", "i-12"], ["cop", "-RSB--17", "is-13"], ["advmod", "-RSB--17", "input_array-14"], ["compound", "-RSB--17", "-LSB--15"], ["compound", "-RSB--17", "i-16"], ["root", "ROOT-0", "-RSB--17"]], [[]]], " Of course Arthur would like to palindromize input_int spending the least amount of money.\n": [[["case", "course-2", "Of-1"], ["nmod:of", "like-5", "course-2"], ["nsubj", "like-5", "Arthur-3"], ["nsubj", "palindromize-7", "Arthur-3"], ["aux", "like-5", "would-4"], ["root", "ROOT-0", "like-5"], ["mark", "palindromize-7", "to-6"], ["xcomp", "like-5", "palindromize-7"], ["dobj", "palindromize-7", "input_int-8"], ["acl", "input_int-8", "spending-9"], ["det", "amount-12", "the-10"], ["amod", "amount-12", "least-11"], ["dobj", "spending-9", "amount-12"], ["case", "money-14", "of-13"], ["nmod:of", "amount-12", "money-14"]], [[]]], " There are input_int1 deer in the zoo.\n": [[["expl", "are-2", "There-1"], ["root", "ROOT-0", "are-2"], ["amod", "deer-4", "input_int1-3"], ["nsubj", "are-2", "deer-4"], ["case", "zoo-7", "in-5"], ["det", "zoo-7", "the-6"], ["nmod:in", "deer-4", "zoo-7"]], [[]]], " Josh will never place a box of an even height on top of a box of an odd height.\n": [[["nsubj", "place-4", "Josh-1"], ["aux", "place-4", "will-2"], ["neg", "place-4", "never-3"], ["root", "ROOT-0", "place-4"], ["det", "box-6", "a-5"], ["dobj", "place-4", "box-6"], ["case", "height-10", "of-7"], ["det", "height-10", "an-8"], ["amod", "height-10", "even-9"], ["nmod:of", "box-6", "height-10"], ["case", "top-12", "on-11"], ["nmod:on", "place-4", "top-12"], ["case", "box-15", "of-13"], ["det", "box-15", "a-14"], ["nmod:of", "top-12", "box-15"], ["case", "height-19", "of-16"], ["det", "height-19", "an-17"], ["amod", "height-19", "odd-18"], ["nmod:of", "box-15", "height-19"]], [[]]], " The message you received is input_array .\n": [[["det", "message-2", "The-1"], ["nsubj", "input_array-6", "message-2"], ["nsubj", "received-4", "you-3"], ["acl:relcl", "message-2", "received-4"], ["cop", "input_array-6", "is-5"], ["root", "ROOT-0", "input_array-6"]], [[]]], " return(min(mapping(possibility) for possibility in possibilities))\n": [[["root", "ROOT-0", "return-1"], ["amod", "possibility-7", "min-3"], ["compound", "possibility-7", "mapping-5"], ["dep", "return-1", "possibility-7"], ["case", "possibility-10", "for-9"], ["nmod:for", "possibility-7", "possibility-10"], ["case", "possibilities-12", "in-11"], ["nmod:in", "possibility-10", "possibilities-12"]], [[]]], " Cat Snuke found the string and removed one character from the string.\n": [[["compound", "Snuke-2", "Cat-1"], ["nsubj", "found-3", "Snuke-2"], ["nsubj", "removed-7", "Snuke-2"], ["root", "ROOT-0", "found-3"], ["det", "string-5", "the-4"], ["dobj", "found-3", "string-5"], ["cc", "found-3", "and-6"], ["conj:and", "found-3", "removed-7"], ["nummod", "character-9", "one-8"], ["dobj", "removed-7", "character-9"], ["case", "string-12", "from-10"], ["det", "string-12", "the-11"], ["nmod:from", "removed-7", "string-12"]], [[]]], "Find and return the String that represents the smallest possible integer that can be obtained.": [[["root", "ROOT-0", "Find-1"], ["conj_and", "Find-1", "return-3"], ["det", "String-5", "the-4"], ["dobj", "return-3", "String-5"], ["nsubj", "represents-7", "String-5"], ["rcmod", "String-5", "represents-7"], ["det", "integer-11", "the-8"], ["amod", "integer-11", "smallest-9"], ["amod", "integer-11", "possible-10"], ["dobj", "represents-7", "integer-11"], ["nsubjpass", "obtained-15", "integer-11"], ["aux", "obtained-15", "can-13"], ["auxpass", "obtained-15", "be-14"], ["rcmod", "integer-11", "obtained-15"]], [[]]], " The cost of a single lottery ticket is input_int.\n": [[["det", "cost-2", "The-1"], ["nsubj", "input_int-9", "cost-2"], ["case", "ticket-7", "of-3"], ["det", "ticket-7", "a-4"], ["amod", "ticket-7", "single-5"], ["compound", "ticket-7", "lottery-6"], ["nmod:of", "cost-2", "ticket-7"], ["cop", "input_int-9", "is-8"], ["root", "ROOT-0", "input_int-9"]], [[]]], "A positive integer n is called a semi-square if and only if there are positive integers a >= 1 and b > 1 such that a < b and a*b*b = n. For example, 81 (=1*9*9) and 48 (=3*4*4) are semi-squares, while 24, 63, and 125 are not.": [[["det", "n-4", "A-1"], ["amod", "n-4", "positive-2"], ["nn", "n-4", "integer-3"], ["nsubjpass", "called-6", "n-4"], ["auxpass", "called-6", "is-5"], ["root", "ROOT-0", "called-6"], ["det", "semi-square-8", "a-7"], ["dobj", "called-6", "semi-square-8"], ["mark", "integers-16", "if-9"], ["advcl", "called-6", "only-11"], ["advmod", "integers-16", "only-11"], ["conj_and", "integers-16", "only-11"], ["mark", "are-14", "if-12"], ["expl", "are-14", "there-13"], ["csubj", "integers-16", "are-14"], ["acomp", "are-14", "positive-15"], ["advcl", "called-6", "integers-16"], ["det", ">-18", "a-17"], ["nsubj", "1-20", ">-18"], ["dep", "1-20", "=-19"], ["ccomp", "integers-16", "1-20"], ["dep", "1-24", "b-22"], ["number", "1-24", ">-23"], ["dep", "b-33", "1-24"], ["dep", "1-24", "such-25"], ["det", "b-29", "a-27"], ["amod", "b-29", "<-28"], ["prep_that", "1-24", "b-29"], ["det", "*-32", "a-31"], ["prep_that", "1-24", "*-32"], ["conj_and", "b-29", "*-32"], ["dep", "n.-37", "b-33"], ["dep", "b-35", "*-34"], ["dep", "n.-37", "b-35"], ["nsubj", "n.-37", "=-36"], ["advcl", "called-6", "n.-37"], ["conj_and", "integers-16", "n.-37"], ["prep_for", "semi-squares-61", "example-39"], ["nsubj", "semi-squares-61", "81-41"], ["dep", "81-41", "=-43"], ["num", "9-46", "1-44"], ["amod", "9-46", "*-45"], ["dobj", "=-43", "9-46"], ["dep", "9-48", "*-47"], ["dep", "=-43", "9-48"], ["conj_and", "81-41", "48-51"], ["nsubj", "semi-squares-61", "48-51"], ["dep", "48-51", "=-53"], ["num", "4-56", "3-54"], ["amod", "4-56", "*-55"], ["dobj", "=-53", "4-56"], ["dep", "4-58", "*-57"], ["dep", "=-53", "4-58"], ["cop", "semi-squares-61", "are-60"], ["ccomp", "n.-37", "semi-squares-61"], ["mark", "are-70", "while-63"], ["nsubj", "are-70", "24-64"], ["conj_and", "24-64", "63-66"], ["nsubj", "are-70", "63-66"], ["conj_and", "24-64", "125-69"], ["nsubj", "are-70", "125-69"], ["advcl", "semi-squares-61", "are-70"], ["neg", "are-70", "not-71"]], [[]]], " You will be given a int[] input_array where the i-th element of input_array is the number of input_array in the i-th basket.\n": [[["nsubjpass", "given-4", "You-1"], ["aux", "given-4", "will-2"], ["auxpass", "given-4", "be-3"], ["root", "ROOT-0", "given-4"], ["det", "int-6", "a-5"], ["iobj", "given-4", "int-6"], ["amod", "input_array-9", "-LSB--7"], ["amod", "input_array-9", "-RSB--8"], ["dobj", "given-4", "input_array-9"], ["advmod", "number-18", "where-10"], ["det", "element-13", "the-11"], ["amod", "element-13", "i-th-12"], ["nsubj", "number-18", "element-13"], ["case", "input_array-15", "of-14"], ["nmod:of", "element-13", "input_array-15"], ["cop", "number-18", "is-16"], ["det", "number-18", "the-17"], ["acl:relcl", "input_array-9", "number-18"], ["case", "input_array-20", "of-19"], ["nmod:of", "number-18", "input_array-20"], ["case", "basket-24", "in-21"], ["det", "basket-24", "the-22"], ["amod", "basket-24", "i-th-23"], ["nmod:in", "input_array-20", "basket-24"]], [[]]], " The pony Applejack is going to raise a new barn.\n": [[["det", "Applejack-3", "The-1"], ["amod", "Applejack-3", "pony-2"], ["nsubj", "going-5", "Applejack-3"], ["nsubj", "raise-7", "Applejack-3"], ["aux", "going-5", "is-4"], ["root", "ROOT-0", "going-5"], ["mark", "raise-7", "to-6"], ["xcomp", "going-5", "raise-7"], ["det", "barn-10", "a-8"], ["amod", "barn-10", "new-9"], ["dobj", "raise-7", "barn-10"]], [[]]], "Compute and return the total number of hit points you'll lose during the fight.": [[["dep", "lose-12", "Compute-1"], ["conj_and", "Compute-1", "return-3"], ["dep", "lose-12", "return-3"], ["det", "number-6", "the-4"], ["amod", "number-6", "total-5"], ["dobj", "return-3", "number-6"], ["nn", "points-9", "hit-8"], ["prep_of", "number-6", "points-9"], ["nsubj", "lose-12", "you-10"], ["aux", "lose-12", "'ll-11"], ["root", "ROOT-0", "lose-12"], ["det", "fight-15", "the-14"], ["prep_during", "lose-12", "fight-15"]], [[]]], "A department is called diverse if no two employees in the department do the same type of work.": [[["det", "department-2", "A-1"], ["nsubjpass", "called-4", "department-2"], ["auxpass", "called-4", "is-3"], ["root", "ROOT-0", "called-4"], ["acomp", "called-4", "diverse-5"], ["mark", "do-13", "if-6"], ["neg", "employees-9", "no-7"], ["num", "employees-9", "two-8"], ["nsubj", "do-13", "employees-9"], ["det", "department-12", "the-11"], ["prep_in", "employees-9", "department-12"], ["advcl", "called-4", "do-13"], ["det", "type-16", "the-14"], ["amod", "type-16", "same-15"], ["dobj", "do-13", "type-16"], ["prep_of", "type-16", "work-18"]], [[]]], "Return \"Yes\" (quotes for clarity) if input_int is a semi-square number.": [[["nn", "Yes-3", "Return-1"], ["nsubj", "number-15", "Yes-3"], ["dep", "Yes-3", "quotes-6"], ["prep_for", "quotes-6", "clarity-8"], ["dep", "input_int-11", "if-10"], ["amod", "Yes-3", "input_int-11"], ["cop", "number-15", "is-12"], ["det", "number-15", "a-13"], ["amod", "number-15", "semi-square-14"], ["root", "ROOT-0", "number-15"]], [[]]], " It is known that Arthur can use any of the input_int0 * input_int1 * input_int2 possible colors.\n": [[["nsubjpass", "known-3", "It-1"], ["auxpass", "known-3", "is-2"], ["root", "ROOT-0", "known-3"], ["mark", "use-7", "that-4"], ["nsubj", "use-7", "Arthur-5"], ["aux", "use-7", "can-6"], ["ccomp", "known-3", "use-7"], ["dobj", "use-7", "any-8"], ["case", "input_int1-13", "of-9"], ["det", "input_int1-13", "the-10"], ["amod", "input_int1-13", "input_int0-11"], ["nummod", "input_int1-13", "*-12"], ["nmod:of", "any-8", "input_int1-13"], ["dep", "any-8", "*-14"], ["amod", "colors-17", "input_int2-15"], ["amod", "colors-17", "possible-16"], ["dep", "any-8", "colors-17"]], [[]]], " You are given this information encoded in a String[] input_array with n elements, each consisting of m characters.\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "information-5", "this-4"], ["dobj", "given-3", "information-5"], ["advmod", "given-3", "encoded-6"], ["case", "input_array-12", "in-7"], ["det", "input_array-12", "a-8"], ["compound", "input_array-12", "String-9"], ["compound", "input_array-12", "-LSB--10"], ["compound", "input_array-12", "-RSB--11"], ["nmod:in", "given-3", "input_array-12"], ["case", "elements-15", "with-13"], ["compound", "elements-15", "n-14"], ["nmod:with", "input_array-12", "elements-15"], ["dobj", "given-3", "each-17"], ["acl", "each-17", "consisting-18"], ["case", "characters-21", "of-19"], ["compound", "characters-21", "m-20"], ["nmod:of", "consisting-18", "characters-21"]], [[]]], "In other words, you may choose a pair of distinct indices i and j, and swap the characters input_array [i] and input_array [j].": [[["amod", "words-3", "other-2"], ["prep_in", "choose-7", "words-3"], ["nsubj", "choose-7", "you-5"], ["nsubj", "swap-18", "you-5"], ["aux", "choose-7", "may-6"], ["root", "ROOT-0", "choose-7"], ["det", "pair-9", "a-8"], ["dobj", "choose-7", "pair-9"], ["amod", "i-13", "distinct-11"], ["nn", "i-13", "indices-12"], ["prep_of", "pair-9", "i-13"], ["prep_of", "pair-9", "j-15"], ["conj_and", "i-13", "j-15"], ["conj_and", "choose-7", "swap-18"], ["det", "-RSB--24", "the-19"], ["nn", "-RSB--24", "characters-20"], ["nn", "-RSB--24", "input_array-21"], ["nn", "-RSB--24", "-LSB--22"], ["nn", "-RSB--24", "i-23"], ["dobj", "swap-18", "-RSB--24"], ["amod", "-RSB--29", "input_array-26"], ["amod", "-RSB--29", "-LSB--27"], ["nn", "-RSB--29", "j-28"], ["dobj", "swap-18", "-RSB--29"], ["conj_and", "-RSB--24", "-RSB--29"]], [[]]], "Return \"found\" (quotes for clarity) if there are five such cells anywhere on the input_array. Otherwise, return \"not found\".": [[["root", "ROOT-0", "Return-1"], ["acomp", "Return-1", "found-3"], ["dep", "Return-1", "quotes-6"], ["prep_for", "quotes-6", "clarity-8"], ["mark", "are-12", "if-10"], ["expl", "are-12", "there-11"], ["advcl", "Return-1", "are-12"], ["num", "cells-15", "five-13"], ["amod", "cells-15", "such-14"], ["npadvmod", "anywhere-16", "cells-15"], ["advmod", "are-12", "anywhere-16"], ["det", "input_array-19", "the-18"], ["prep_on", "are-12", "input_array-19"]], [["advmod", "return-3", "Otherwise-1"], ["root", "ROOT-0", "return-3"], ["neg", "found-6", "not-5"], ["acomp", "return-3", "found-6"]], [[]]], "(I.e., you are not allowed to put two bricks of the same color immediately on one another.)": [[["advmod", "allowed-7", "I.e.-2"], ["nsubjpass", "allowed-7", "you-4"], ["nsubj", "put-9", "you-4"], ["auxpass", "allowed-7", "are-5"], ["neg", "allowed-7", "not-6"], ["root", "ROOT-0", "allowed-7"], ["aux", "put-9", "to-8"], ["xcomp", "allowed-7", "put-9"], ["num", "bricks-11", "two-10"], ["dobj", "put-9", "bricks-11"], ["det", "color-15", "the-13"], ["amod", "color-15", "same-14"], ["prep_of", "bricks-11", "color-15"], ["advmod", "put-9", "immediately-16"], ["prep_on", "put-9", "one-18"], ["dep", "one-18", "another-19"]], [[]]], "Given a range of integers from min to max (inclusive), determine how many numbers within that range are evenly divisible by input_int2.": [[["prep", "determine-14", "Given-1"], ["det", "range-3", "a-2"], ["pobj", "Given-1", "range-3"], ["prep_of", "range-3", "integers-5"], ["number", "max-9", "min-7"], ["dep", "max-9", "to-8"], ["prep_from", "integers-5", "max-9"], ["appos", "max-9", "inclusive-11"], ["root", "ROOT-0", "determine-14"], ["advmod", "many-16", "how-15"], ["dep", "divisible-23", "many-16"], ["nsubj", "divisible-23", "numbers-17"], ["det", "range-20", "that-19"], ["prep_within", "numbers-17", "range-20"], ["cop", "divisible-23", "are-21"], ["advmod", "divisible-23", "evenly-22"], ["ccomp", "determine-14", "divisible-23"], ["prep_by", "divisible-23", "input_int2-25"]], [[]]], " Two towers are considered to be different if they have different heights.\n": [[["nummod", "towers-2", "Two-1"], ["nsubjpass", "considered-4", "towers-2"], ["nsubj", "different-7", "towers-2"], ["auxpass", "considered-4", "are-3"], ["root", "ROOT-0", "considered-4"], ["mark", "different-7", "to-5"], ["cop", "different-7", "be-6"], ["xcomp", "considered-4", "different-7"], ["mark", "have-10", "if-8"], ["nsubj", "have-10", "they-9"], ["advcl", "different-7", "have-10"], ["amod", "heights-12", "different-11"], ["dobj", "have-10", "heights-12"]], [[]]], " Then, the value of input_array is defined to be the sum of k[i] * val[input_array[i]] for all valid i.\n": [[["advmod", "defined-8", "Then-1"], ["det", "value-4", "the-3"], ["nsubjpass", "defined-8", "value-4"], ["nsubj", "sum-12", "value-4"], ["case", "input_array-6", "of-5"], ["nmod:of", "value-4", "input_array-6"], ["auxpass", "defined-8", "is-7"], ["root", "ROOT-0", "defined-8"], ["mark", "sum-12", "to-9"], ["cop", "sum-12", "be-10"], ["det", "sum-12", "the-11"], ["xcomp", "defined-8", "sum-12"], ["case", "-RSB--25", "of-13"], ["compound", "-RSB--25", "k-14"], ["compound", "-RSB--25", "-LSB--15"], ["compound", "-RSB--25", "i-16"], ["compound", "-RSB--25", "-RSB--17"], ["amod", "-RSB--25", "*-18"], ["compound", "-RSB--25", "val-19"], ["compound", "-RSB--25", "-LSB--20"], ["compound", "-RSB--25", "input_array-21"], ["compound", "-RSB--25", "-LSB--22"], ["compound", "-RSB--25", "i-23"], ["compound", "-RSB--25", "-RSB--24"], ["nmod:of", "sum-12", "-RSB--25"], ["case", "i.-29", "for-26"], ["det", "i.-29", "all-27"], ["amod", "i.-29", "valid-28"], ["nmod:for", "sum-12", "i.-29"]], [[]]], " He has N bins, numbered 0 through N-1.\n": [[["nsubj", "numbered-6", "He-1"], ["aux", "numbered-6", "has-2"], ["compound", "bins-4", "N-3"], ["dobj", "numbered-6", "bins-4"], ["root", "ROOT-0", "numbered-6"], ["dobj", "numbered-6", "0-7"], ["case", "N-1-9", "through-8"], ["nmod:through", "numbered-6", "N-1-9"]], [[]]], " The employees are numbered 0 through N-1 in order in which they joined the company.\n": [[["det", "employees-2", "The-1"], ["nsubjpass", "numbered-4", "employees-2"], ["auxpass", "numbered-4", "are-3"], ["root", "ROOT-0", "numbered-4"], ["dobj", "numbered-4", "0-5"], ["case", "N-1-7", "through-6"], ["nmod:through", "numbered-4", "N-1-7"], ["nmod:in", "joined-13", "N-1-7"], ["acl", "N-1-7", "in-8"], ["mwe", "in-8", "order-9"], ["case", "which-11", "in-10"], ["ref", "N-1-7", "which-11"], ["nsubj", "joined-13", "they-12"], ["acl:relcl", "N-1-7", "joined-13"], ["det", "company-15", "the-14"], ["dobj", "joined-13", "company-15"]], [[]]], " Employee 0 is the only employee with no boss.\n": [[["compound", "0-2", "Employee-1"], ["nsubj", "employee-6", "0-2"], ["cop", "employee-6", "is-3"], ["det", "employee-6", "the-4"], ["amod", "employee-6", "only-5"], ["root", "ROOT-0", "employee-6"], ["case", "boss-9", "with-7"], ["neg", "boss-9", "no-8"], ["nmod:with", "employee-6", "boss-9"]], [[]]], " From newspaper polls, it is clear what percentages of people plan to vote for each candidate in each state.\n": [[["case", "polls-3", "From-1"], ["compound", "polls-3", "newspaper-2"], ["nmod:from", "clear-7", "polls-3"], ["nsubj", "clear-7", "it-5"], ["cop", "clear-7", "is-6"], ["root", "ROOT-0", "clear-7"], ["dobj", "plan-12", "what-8"], ["nsubj", "vote-14", "what-8"], ["nsubj", "plan-12", "percentages-9"], ["case", "people-11", "of-10"], ["nmod:of", "percentages-9", "people-11"], ["ccomp", "clear-7", "plan-12"], ["mark", "vote-14", "to-13"], ["xcomp", "plan-12", "vote-14"], ["case", "candidate-17", "for-15"], ["det", "candidate-17", "each-16"], ["nmod:for", "vote-14", "candidate-17"], ["case", "state-20", "in-18"], ["det", "state-20", "each-19"], ["nmod:in", "candidate-17", "state-20"]], [[]]], " The least common multiple of a group of integers is the smallest number that can be evenly divided by all the integers in the group.\n": [[["det", "multiple-4", "The-1"], ["dep", "common-3", "least-2"], ["amod", "multiple-4", "common-3"], ["nsubj", "number-13", "multiple-4"], ["case", "group-7", "of-5"], ["det", "group-7", "a-6"], ["nmod:of", "multiple-4", "group-7"], ["case", "integers-9", "of-8"], ["nmod:of", "group-7", "integers-9"], ["cop", "number-13", "is-10"], ["det", "number-13", "the-11"], ["amod", "number-13", "smallest-12"], ["root", "ROOT-0", "number-13"], ["nsubjpass", "divided-18", "number-13"], ["ref", "number-13", "that-14"], ["aux", "divided-18", "can-15"], ["auxpass", "divided-18", "be-16"], ["advmod", "divided-18", "evenly-17"], ["acl:relcl", "number-13", "divided-18"], ["case", "integers-22", "by-19"], ["det:predet", "integers-22", "all-20"], ["det", "integers-22", "the-21"], ["nmod:by", "divided-18", "integers-22"], ["case", "group-25", "in-23"], ["det", "group-25", "the-24"], ["nmod:in", "integers-22", "group-25"]], [[]]], " You are given the results of all the matches as a String[] input_array .\n": [[["nsubjpass", "given-3", "You-1"], ["auxpass", "given-3", "are-2"], ["root", "ROOT-0", "given-3"], ["det", "results-5", "the-4"], ["nsubj", "matches-9", "results-5"], ["case", "the-8", "of-6"], ["det:predet", "the-8", "all-7"], ["nmod:of", "results-5", "the-8"], ["ccomp", "given-3", "matches-9"], ["case", "input_array-15", "as-10"], ["det", "input_array-15", "a-11"], ["compound", "input_array-15", "String-12"], ["compound", "input_array-15", "-LSB--13"], ["compound", "input_array-15", "-RSB--14"], ["nmod:as", "matches-9", "input_array-15"]], [[]]], " You will be given a int[] input_array1 and a int[] input_array2.\n": [[["nsubjpass", "given-4", "You-1"], ["aux", "given-4", "will-2"], ["auxpass", "given-4", "be-3"], ["root", "ROOT-0", "given-4"], ["det", "int-6", "a-5"], ["iobj", "given-4", "int-6"], ["amod", "input_array1-9", "-LSB--7"], ["amod", "input_array1-9", "-RSB--8"], ["dobj", "given-4", "input_array1-9"], ["cc", "input_array1-9", "and-10"], ["det", "input_array2-15", "a-11"], ["amod", "input_array2-15", "int-12"], ["compound", "input_array2-15", "-LSB--13"], ["compound", "input_array2-15", "-RSB--14"], ["dobj", "given-4", "input_array2-15"], ["conj:and", "input_array1-9", "input_array2-15"]], [[]]]}